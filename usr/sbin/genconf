#!/usr/bin/perl

#    Copyright (C) 2002  <Gregory Hinton Nietsky>
#    Copyright (C) 2005  <ZA Telecomunications>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


$x509cmd{'Country'}="C";
$x509cmd{'State'}="ST";
$x509cmd{'City'}="L";
$x509cmd{'Company'}="O";
$x509cmd{'Division'}="OU";
$x509cmd{'Name'}="CN";
$x509cmd{'Email'}="EMAIL";

if ( -e "/var/run/netsentry-config" ) {
  open(NC,"/var/run/netsentry-config");
  while(<NC>) {
    chop $_;
    $epid=$_;
  }
  close(NC);
  if ( -d "/proc/$epid") {
    exit;
  }
}

while( -e "/var/run/netsentry-config" ) {
  if ( ! -d "/proc/$epid") {
    unlink("/var/run/netsentry-config");
    sleep 3;
  } else {
    sleep 3;
    if ( -e "/var/run/netsentry-config" ) {
      open(NC,"/var/run/netsentry-config");
      while(<NC>) {
        chop $_;
        $epid=$_;
      }
      close(NC);
    }
  }
}

open(NC,">/var/run/netsentry-config");
print NC $$;
close(NC);
open(NC,">/var/run/netsentry-update");
print NC $$;
close(NC);
chdir "/var/spool/apache/htdocs/ns/config";

use Socket;
use MIME::Base64;
use Net::LDAPS;
use Net::LDAP;
use SNMP;
use Digest::MD5  qw(md5_hex);
use Crypt::PasswdMD5;
use DBI;
use NetAddr::IP;
use Dahdi;
use Dahdi::Span;

#$encoded = encode_base64('');
#$decoded = decode_base64($encoded);
#print "$encoded\n$decoded\n";

chmod(0600,"netsentry.conf");
open(CF,"netsentry.conf");

$dnsconf{'Serial'}="1";
$dnsconf{'Refresh'}="3600";
$dnsconf{'Retry'}="1800";
$dnsconf{'Expire'}="604800";
$dnsconf{'DefaultTTL'}="3600";

$tuncnt=0;
$tblcnt=0;
$vparent=0;
$ppplcnt=0;
open(SV,">sysvars");
while(<CF>) {
  chop $_;
  if (substr($_,length($_)-1,1) eq "\r") {
    chop $_;
  }
  @words=split(/ /,$_);
  $skipline=0;
  if (@words[0] eq "IP" ) {
    shift(@words);
    if (@words[0] eq "Interface") {
      shift @words;
      $ishostip{@words[1]}=@words[3];
      if (@words[3] =~ m/^eth([A-Z]$)|^eth([A-Z])\.([0-9]+$)/) {
        if ($1 ne "") {
          if ($phiface eq "") {
            $phiface=1;
          } else {
            $phiface++;
          }
          print SV "IP_ADDR\[" . $phiface . "\]=\"" . @words[1] . "\";\n";
          print SV "SN_ADDR\[" . $phiface . "\]=\"" . @words[2] . "\";\n";
          print SV "IP_SDHCP\[" . $phiface . "\]=\"" . @words[4] . "\";\n";
          print SV "IP_EDHCP\[" . $phiface . "\]=\"" . @words[5] . "\";\n";
          print SV "INT_BWIN\[" . $phiface . "\]=\"" . @words[6]  . "\";\n";
          print SV "INT_BWOUT\[" . $phiface . "\]=\"" . @words[7]  . "\";\n";
          print SV "INT_MAC\[" . $phiface . "\]=\"" . @words[8]  . "\";\n";
          print SV "INT_GW\[" . $phiface . "\]=\"" . @words[9]  . "\";\n";
          print SV "INT_NAME\[" . $phiface . "\]=\"" . @words[0]  . "\";\n";
          print SV "INT_IFACE\[" . $phiface . "\]=\"" . $1 . "\";\n";
        } else {
          if ($vliface eq "") {
            $vliface=1;
          } else {
            $vliface++;
          }
          $vliflink=$phiface;
          print SV "VLAN\[" . $vliface . "\]=\"" . $3 . "\";\n";
          print SV "IP_ADDRV\[" . $vliface . "\]=\"" . @words[1] . "\";\n";
          print SV "SN_ADDRV\[" . $vliface . "\]=\"" . @words[2] . "\";\n";
          print SV "IP_SDHCPV\[" . $vliface . "\]=\"" . @words[4] . "\";\n";
          print SV "IP_EDHCPV\[" . $vliface . "\]=\"" . @words[5] . "\";\n";
          print SV "INT_BWINV\[" . $vliface . "\]=\"" . @words[6]  . "\";\n";
          print SV "INT_BWOUTV\[" . $vliface . "\]=\"" . @words[7]  . "\";\n";
          print SV "INT_GWV\[" . $vliface . "\]=\"" . @words[9]  . "\";\n";
          print SV "INT_NAMEV\[" . $vliface . "\]=\"" . @words[0]  . "\";\n";
          print SV "INT_PARV\[" . $vliface . "\]=\"" . $2  . "\";\n";
        }
      } elsif (@words[3] =~ m/^(eth[ABCD0-9\.]+:[0-9])$/) {
        $aiface=$1;
        if ($aliface eq "") {
          $aliface=1;
        } else {
          $aliface++;
        }
        $vliflink=$phiface;
        print SV "ALIAS\[" . $aliface . "\]=\"" . $aiface . "\";\n";
        print SV "IP_ADDRA\[" . $aliface . "\]=\"" . @words[1] . "\";\n";
        print SV "SN_ADDRA\[" . $aliface . "\]=\"" . @words[2] . "\";\n";
        print SV "INT_NAMEA\[" . $aliface . "\]=\"" . @words[0]  . "\";\n";
      }

#when activating remove old
#ip rule |grep -E "^5[0-9]:" |awk -F: '{printf "ip rule del prio %s\n",$1}'

      if ((@words[9] ne "") && (! check_ip(@words[1] . "/" . @words[2],@words[9])) && (@words[9] ne @words[1])) {
        if ($tblcnt <= 10) {
          print "/sbin/ip rule del" . " prio " . ($tblcnt + 50) . " > /dev/null 2>\&1\n";
          print "/sbin/ip rule add from " . getnw(@words[2],@words[1]) . "/" . @words[2] . " table eth_" . $tblcnt . " prio " . ($tblcnt + 50) . "\n";
          print "/sbin/ip route flush table eth_" . $tblcnt . "\n";
          print "/sbin/ip route add " . getnw(@words[2],@words[1]) . "/" . @words[2] . " dev " . @words[3] . " src " . @words[1] . " table eth_" . $tblcnt . "\n"; 
          print "/sbin/ip route add default via " . @words[9] . " src " . @words[1] . " table eth_" . $tblcnt . "\n"; 
          print "/sbin/iptables  -t mangle -I CMARK -j MARK -i " . @words[3] . " -d " . getnw(@words[2],@words[1]) . "/" . @words[2] . " --set-mark " . ($tblcnt  + 30) . "\n";
          $tblcnt++;
        }
#        @words[9]="";
      }

      $intdata=join("\|",@words);
      $interface{@words[3]}=$intdata;
      push(@ints,@words[3]);
      if (index(@words[3],".") ne -1) {
        push(@vlanids,@words[3]);
        if (index(@words[3],".") ne -1) {
          $baseint=substr(@words[3],0,index(@words[3],"."));
          if ($interface{$baseint} eq "") {
            $interface{$baseint}=$baseint . "|0.0.0.0|32|" . $baseint;
            push(@ints,$baseint);
          }
        }
      }
      if (index(@words[3],":") ne -1) {
        $baseint=substr(@words[3],0,index(@words[3],":"));
        $ifalias{$baseint}.="@words[1]:@words[2]:" . getnw(@words[2],@words[1]) . ":" . getbc(@words[2],@words[1]) . " ";
      }
    } elsif (@words[0] eq "SysConf") {
      shift @words;
      $scmd=shift @words;
      $sysconf{$scmd}=join(" ",@words);
      push(@scnf,$scmd);
      if ($scmd eq "NTPServer") {
        print SV "NTP_SERV=\"" . $sysconf{$scmd} . "\";\n";
      }
    } elsif (@words[0] eq "Modem") {
      shift @words;
      if (@words[1] eq "") {
        @words[1]=true;
      }
      $mdmconf{@words[0]}=@words[1];
      push(@mcnf,@words[0]);
    } elsif (@words[0] eq "FAX") {
      shift @words;
      if (@words[1] eq "") {
        $faxconf{@words[0]}="true";
      } else {
        $fclab=shift(@words);
        $faxconf{$fclab}=join(" ",@words);
      }
    } elsif (@words[0] eq "Route") {
      shift @words;
      $rdata=join("\|",@words);
      $routes{@words[0]}=$rdata;
      push(@wans,@words[0]);
      $groutes{@words[0]}="@words[0]\|@words[1]\|@words[2]\|@words[3]";
      push(@genroute,@words[0]);
    } elsif (@words[0] eq "WiFi") {
      shift @words;
      $rdata=join("\|",@words);
      $wificard{@words[0]}=join(" ",split(/_/,$rdata));
      push(@wificards,@words[0]);
    } elsif (@words[0] eq "GenRoute") {
      shift @words;
      $rdata=join("\|",@words);
      $groutes{@words[0]}=$rdata;
      push(@genroute,@words[0]);
    } elsif (@words[0] eq "LDAP") {
      shift @words;
      $ldapserv{@words[0]}=@words[1];
      if ((@words[0] eq "OPassword") && (@words[1] ne $ldapserv{'Password'})) {
        $ldap = Net::LDAP->new("127.0.0.1",timeout => "10");
        if ($ldap ne "") {
          $lbndr=$ldap->bind($ldapserv{'Login'},password => $ldapserv{'OPassword'});
          if ($lbndr->code eq "0") {
            $pwcrypt="{CRYPT}";
            $salt=join('',('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64, rand 64, rand 64, rand 64, rand 64, rand 64,rand 64]);
            $pwcrypt.=unix_md5_crypt($ldapserv{'Password'},$salt);
            $pwres=$ldap->modify($ldapserv{'Login'},replace => { 'userPassword' => $pwcrypt });
            if ($pwres->code eq "0") {
              &printetcshadow();
              $_="IP LDAP OPassword " . $ldapserv{'Password'};
            } else {
              $ldapserv{'Password'}=$ldapserv{'OPassword'};
            }
          }
          $ldap->unbind();
        }
      }
    } elsif (@words[0] eq "FW") {
      shift @words;
      if (@words[0] eq "SourceNetwork") {
        shift @words;
        if ($grert{@words[3]} ne "") {
          @words[3]=$grert{@words[3]};
        }
        $snname="@words[0]:@words[3]";
        $fwsource{$snname}="@words[1]/@words[2]";
        if ($fwbwcnt{@words[3]} eq "") {
          $fwbwcnt{@words[3]}=0;
        }
        if (index(@words[3],"tun") ne -1) {
          $newint=@words[1] . "/" . @words[2];
          $tintsrc{@words[3]}.="$newint;";
          if ($tundnsuniq{$newint} eq "") {
            push(@tundnsint,$newint);
            $tundnsuniq{$newint}=true;
          } 
        }
        $fwbwsrc{@words[3]}[$fwbwcnt{@words[3]}]=join("\|",@words);
        $fwbwcnt{@words[3]}++;
      } elsif (@words[0] eq "Rule") {
        shift(@words);
        push(@fwrules,join("\|",@words));
      }
    } elsif (@words[0] eq "ESP") {
      shift @words;
      if (@words[0] eq "Tunnel") {
        shift @words;
        if (@words > 7) {
  	  if (@words eq "4") {
	    push(@words,@words[3]);
	    @words[3]="";
	  }
          $etun=join("\|",@words);
          push(@esptunnels,$etun);
        }
      }
      if (@words[0] eq "Access") {
        shift @words;
        $etun=join("\|",@words);
        push(@esptunnels,"\|" . $etun . "\|\|");
      }
    } elsif (@words[0] eq "GRE") {
      shift @words;
      if (@words[0] eq "Tunnel") {
        @words[0]="gtun" . $tuncnt;
        $tuncnt++;
        $grert{@words[1]}=@words[0];
        $gretun{@words[0]}=join("\|",@words);
        push(@gretunnels,@words[0]);

        @intdat=(@words[2],@words[1],'30',@words[0]);
        $intdata=join("\|",@intdat);
        $interface{@words[0]}=$intdata;
        push(@ints,@words[0]);
	
        $ppptun{@words[3]}.=@words[0] . " ";
        if (@words[6] ne "") {
          push(@crlurl,@words[6]);
        }
      } elsif (@words[0] eq "Route") {
        shift @words;
        if (@words[2] ne "") {
          @words[1]=@words[1] . "/" . @words[2];
        }
        $greint=$grert{@words[0]};

        if ($grertcnt{$greint} eq "") {
          $grertcnt{$greint}=0;
        }
        $greroute{$greint}[$grertcnt{$greint}]=@words[1];
        $grertcnt{$greint}++;
      }
    } elsif (@words[0] eq "ADSL") {
      $ppplcnt++;
      shift @words;
      $aldata=join("\|",@words);
      $adsllink{@words[0]}=$aldata;
      push(@vadsllink,@words[0]);
      $ppplink{@words[6]}.=$ppplcnt . " ";
    } elsif (@words[0] eq "ADSL_USER") {
      shift @words;
      $aldata=join("\|",@words);
      $adsluser{@words[0]}=$aldata;
      push(@adslacc,@words[0]);
    } elsif (@words[0] eq "TOS") {
      shift @words;
      $lbdata=join("\|",@words);
      $adsllb{@words[0]}=$lbdata;
      push(@adsltos,@words[0]);
    } elsif (@words[0] eq "TC") {
      shift @words;
      $tcctl{@words[0]}=@words[1];
    } elsif (@words[0] eq "VOIP" ) {
      shift(@words);
      if (@words[0] eq "SIP") {
        shift(@words);
        $sproxy=join("\|",@words);
        if (index(@words[3],"parent") eq "0") {
          $vparent++;
        }
        push(@sipproxys,$sproxy);    
      } elsif (@words[0] eq "FWD") {
        shift(@words);
        push(@words,"fwd.pulver.com");
        push(@words,"freeworlddialup");
        $sproxy=join("\|",@words);
        push(@sipproxys,$sproxy);    
        $fwdnumber=@words[0];
      } elsif (@words[0] eq "VBOX") {
        shift(@words);
        $vparent++;
        if (@words == 2) {
          push(@words,"voip.zatelecom.co.za");
          push(@words,"plaintext");
          push(@words,"parent");
          $sproxy=join("\|",@words);
          push(@iaxproxys,$sproxy);    
          $parentnumber=@words[0];
          $parentdial="IAX2/parent";
        } else {
          $proto=@words[3];
          if ($proto eq "IAX") {
            push(@words,"plaintext");
            push(@words,"parent");
            @words[4]=@words[0];
            $sproxy=join("\|",@words);
            push(@iaxproxys,$sproxy);    
            $parentnumber=@words[0];
            $parentdial="IAX2/parent";
          } elsif ($proto eq "SIP") {
            $sproxy=join("\|",@words);
            push(@sipproxys,$sproxy);
            $parentnumber=@words[0];
            $parentdial="SIP/parent";
          } else {
            $h323number=@words[0];
            $h323password=@words[1];
            $h323server=@words[2];
            $h323prefix=@words[4];
            $parentdial="OH323";
            $parentnumber=@words[0];
          }
        }
      } elsif (@words[0] eq "GOSSIP") {
        shift(@words);
        push(@words,"sip.gossiptel.com");
        push(@words,"gossiptel");
        $sproxy=join("\|",@words);
        push(@sipproxys,$sproxy);    
        $gossipnum=@words[0];
      } elsif (@words[0] eq "FRESHTEL") {
        shift(@words);
        push(@words,"gateway.freshtel.net");
        push(@words,"md5");
        push(@words,"@words[0]");
        push(@words,"");
        $iproxy=join("\|",@words);
        push(@iaxproxys,$iproxy);
        $freshtelnum=@words[0];
      } elsif (@words[0] eq "IAXTEL") {
        shift(@words);
        $iaxtelnum=pop(@words);
        push(@words,"iaxtel.com");
        push(@words,"rsa");
        push(@words,"iaxtel");
        push(@words,"iaxtel");
        $iproxy=join("\|",@words);
        push(@iaxproxys,$iproxy);
            
      } elsif (@words[0] eq "IAX") {
        shift(@words);
        $iproxy=join("\|",@words);
        push(@iaxproxys,$iproxy);    
      }
    }
  } elsif (@words[0] eq "DNS" ) {
    shift(@words);
    if (@words[0] eq "Domain") {
      $dnsconf{'Domain'}=@words[1];
      print SV "DOM_ADDR=\"" . $dnsconf{'Domain'} . "\";\n";
    } elsif (@words[0] eq "Hostname") {
      $dnsconf{'Hostname'}=@words[1];
      print SV "HN_ADDR=\"" . $dnsconf{'Hostname'} . "\";\n";
    } elsif (@words[0] eq "Serial") {
      $soaser=substr(@words[1],8,length(@words[1]));
      if (substr($soaser,0,1) eq "0") {
        $soaser=chop $soaser;
      }
      $soaday=substr(@words[1],0,8);
      @time=localtime(time);
      @time[4]++;
      if (@time[5] < 2000) {
        @time[5]=1900+@time[5];
      }
      if (@time[4] < 10) {
        @time[4]="0@time[4]";
      }
      if (@time[3] < 10) {
        @time[3]="0@time[3]";
      }
      $soaser++;
      if ($soaser < 10) {
        $soaser="0$soaser";
      }
      if ($soaser >= 99) {
        $soaser=99;
      }
      if ($soaday eq "@time[5]@time[4]@time[3]") {
        $dnsconf{'Serial'}="@time[5]@time[4]@time[3]$soaser";
      } else {
        $dnsconf{'Serial'}="@time[5]@time[4]@time[3]00";
      }
      $_="DNS Serial $dnsconf{'Serial'}";
    } elsif (@words[0] eq "Search") {
      shift @words;
      $dnsconf{'Search'}="@words";
    } elsif (@words[0] eq "Refresh") {
      $dnsconf{'Refresh'}=@words[1];
    } elsif (@words[0] eq "Retry") {
      $dnsconf{'Retry'}=@words[1];
    } elsif (@words[0] eq "Expire") {
      $dnsconf{'Expire'}=@words[1];
    } elsif (@words[0] eq "DefaultTTL") {
      $dnsconf{'DefaultTTL'}=@words[1];
    } elsif (@words[0] eq "DynServ") {
      $dnsconf{'DynServ'}=@words[1];
    } elsif (@words[0] eq "SmartKey") {
      $dnsconf{'SmartKey'}=@words[1];
    } elsif (@words[0] eq "DynKey") {
      $dnsconf{'DynKey'}=@words[1];
    } elsif (@words[0] eq "DynZone") {
      $dnsconf{'DynZone'}=@words[1];
    } elsif (@words[0] eq "Backup") {
      $dnsconf{'Backup'}=@words[1];
    } elsif (@words[0] eq "Auth") {
      $dnsconf{'Auth'}=@words[1];
    } elsif (@words[0] eq "AuthX") {
      $dnsconf{'AuthX'}=@words[1];
    } elsif (@words[0] eq "Usepeer") {
      $dnsconf{'Usepeer'}=@words[1];
    } elsif (@words[0] eq "ExtServ") {
      $dnsconf{'ExtServ'}=@words[1];
    } elsif (@words[0] eq "IntFirst") {
      $dnsconf{'IntFirst'}=@words[1];
    } elsif (@words[0] eq "Host") {
      shift @words;
      $hdata=join("\|",@words);
      $hosts{@words[0]}=$hdata;

      @ipq=split(/\./,@words[1]);
      if (index(@words[0],".") eq -1 ) {
        $classc="@ipq[2].@ipq[1].@ipq[0].in-addr.arpa";
        $revdns{$classc}.=",@words[0];@ipq[3]";
      }
      push(@hsts,@words[0]);
    } elsif (@words[0] eq "Internal") {
      shift @words;
      if (!((@words[2] eq "") && ((@words[0] eq "NS") || (@words[0] eq "MX")))) {
        push(@intdns,join("\|",@words));
      }
#    } elsif (@words[0] eq "External") {
#      shift @words;
#      push(@extdns,join("\|",@words));
    } elsif (@words[0] eq "Hosted") {
      shift @words;
      if (@words[0] eq $dnsconf{'DynZone'}) {
        $ddnslocal=1;
      }
      if ((@words[1] ne "") && (@words[1] ne "true") && (@words[1] ne "false")) {
       open(ZONE,">zones/@words[0]");
       chmod(0600,"zones/@words[0]");
       @words[1]=encode_base64(@words[1]);
       chop @words[1];
       $tsig{@words[0]}=@words[1];
       push(@tsigkeys,@words[0]);
       if (@words[0] ne $dnsconf{'DynZone'}) {
         open(KEY,">zones/@words[0].key");
         print KEY "@words[0]. IN KEY 512 3 157 @words[1]\n";
         close(KEY);
         open(PKEY,">zones/@words[0].private");
         print PKEY "Private-key-format: v1.2\n";
         print PKEY "Algorithm: 157 (HMAC_MD5)\n";
         print PKEY "Key: @words[1]\n";
         close(PKEY);
       }
       print ZONE<<__EOB__;
@                        $dnsconf{'DefaultTTL'} IN     SOA   @words[0].     info (
                                           $dnsconf{'Serial'} ; serial
                                           $dnsconf{'Refresh'}
                                           $dnsconf{'Retry'}
                                           $dnsconf{'Expire'}
                                           $dnsconf{'DefaultTTL'})
__EOB__
       if ($dnsconf{'Hostname'}) {
         $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
       } else {
         $fqdn=$dnsconf{'Domain'}
       }
       printf ZONE ("%-25s%s IN     %-5s %s.\n","",$dnsconf{'DefaultTTL'},"NS",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s %s.\n","www",$dnsconf{'DefaultTTL'},"CNAME",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s %s.\n","mail",$dnsconf{'DefaultTTL'},"CNAME",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s 0 1 4569 %s.\n","_iax._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s 0 1 5060 %s.\n","_sip._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s 0 1 5060 %s.\n","_sip._tcp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s 0 1 5061 %s.\n","_sips._tcp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
       printf ZONE ("%-25s%s IN     %-5s 0 1 3478 %s.\n","_stun._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
       close(ZONE);
       if (@words[2] ne "true") {
         push(@hosted,@words[0]);
         push(@islaves,@words[0]);
         $allowtx{@words[0]}=",127.0.0.2";
       } else {
         push(@ihosted,@words[0]);
       }
      }  else {
       if (@words[1] eq "true") {
         push(@islaves,@words[0]);
       } else {
         push(@slaves,@words[0]);
       }
      }
    } elsif (@words[0] eq "NameServer") {
      shift @words;
      if ((index(@words[0],"-") ne -1) && ($isslaverev{@words[0]} eq "")) {
         $isslaverev{@words[0]}=@words[1];
       } 
       $allowtx{@words[0]}.=",@words[1]";
    }
  } elsif (@words[0] eq "WWW" ) {
    shift(@words);
    if (@words[0] eq "Site") {
      shift @words;
      $sitedata=join("\|",@words[0],@words[1],@words[2],@words[3]);
      $website{@words[0]}=$sitedata;
      push(@www,@words[0]);
      if (@words[4] eq "true") {
        push(@dazuko,"/var/spool/apache/vhosts/@words[0]");
      }
      if (@words[5] && @words[6] && @words[7] && @words[8] && @words[9] && @words[10] && @words[11]) {
        $sslsitedata{@words[0]}=join("\|",@words[0],@words[5],@words[6],@words[7],@words[8],@words[9],@words[10],@words[11]);
        push(@sslserver,@words[0]);
      }
    } elsif (@words[0] eq "Redirect") {
      shift @words;
      $rewip{@words[0]}=@words[1];
      $rewint{@words[0]}=@words[2];
      push(@rewww,@words[0]);
    }
  } elsif (@words[0] eq "Alias" ) {
    shift(@words);
    if ((@words[0] eq "System") && (@words[2] ne "")) {
      shift @words;
      if ($sysalias{@words[0]}) {
        $sysalias{@words[0]} .=",@words[1]";
      } else {
        $sysalias{@words[0]}="@words[1]";        
        push(@sysaliases,@words[0]);
      }
    } elsif (@words[0] eq "Virtual") {
      shift @words;
      $alias="@words[2]\@@words[0]";
      push(@valias,"$alias\|@words[1]");
    } elsif (@words[0] eq "Vdomain") {
      shift @words;
      if (! $sysalias{@words[0]}) {
        $sysalias{@words[0]}="@words[0]";
        push(@smcw,@words[0]);
      }
    }
  } elsif (@words[0] eq "Email") {
    shift(@words);
    if (@words[0] eq "LDAP") {
      shift @words;
      $mailldap{@words[0]}=@words[1];
    } elsif (@words[0] eq "MailExchange1") {
      $pmailx=@words[1];
      $mailconf{@words[0]}=@words[1];
    } elsif (@words[0] eq "MailExchange2") {
      $smailx=@words[1];
    } elsif (@words[0] eq "Relay") {
      shift(@words);
      push(@emailrelay,join("\|",@words))
    } elsif (@words[0] eq "POP3") {
      shift(@words);
      push(@emailmdrop,join("\|",@words))
    } elsif (@words[0] eq "Filter") {
      shift(@words);
      $tempmsg=@words[3];
      @words[3]=@words[2];
      @words[2]=$tempmsg;
      push(@attfilter,join("\|",@words))
    } else {
      if (@words[0] eq "Smarthost") {
        print SV "SMTP_FWD=\"" . @words[1] . "\";\n";
      }
      $mailconf{@words[0]}=@words[1];
    }
  } elsif (@words[0] eq "Cron") {
    shift(@words);
    $cron=join("\|",@words);
    push(@cronjobs,$cron);
  } elsif (@words[0] eq "Proxy") {
    shift(@words);
    if (@words[0] eq "CacheSize") {
      $proxyconf{'CacheSize'}=@words[1];
    } elsif (@words[0] eq "Parent") {
      $proxyconf{'Parent'}=@words[1];
    } elsif (@words[0] eq "Redirect") {
      $proxyconf{'Redirect'}=@words[1];
    } elsif (@words[0] eq "Redir") {
      $proxyconf{'Redir'}=@words[1];
    } elsif (@words[0] eq "LogFQDN") {
      $proxyconf{'LogFQDN'}=@words[1];
    } elsif (@words[0] eq "Access") {
      shift(@words);
      if (@words[2] eq "true") {
        push(@paccess,"@words[0]/@words[1]");
      } else {
        push(@pdeny,"@words[0]/@words[1]");
      }
    } elsif (@words[0] eq "Bypass") {
      shift(@words);
      push(@pbypass,"@words[0]/@words[1]");
    } elsif (@words[0] eq "TimeGroup") {
      shift(@words);
      if (@words[1] ne "") {
        $tspec=join("\|",@words);
        $cachetg{@words[0]}.="$tspec;";           
      } else {
        push(@timegroup,@words[0]);
      }
    } elsif (@words[0] eq "SourceGroup") {
      shift(@words);
      if (@words[1] ne "") {
        $sspec=join("\|",@words);
        $cachesg{@words[0]}.="$sspec;";
      } else {
        push(@sourcegroup,@words[0]);
      }
    } elsif (@words[0] eq "ACL") {
      shift(@words);
      if ((@words[3] ne "local_allow") && (@words[3] ne "local_deny") && (! $flistd{@words[3]})) { 
        if ( -d "/var/db/squid/blacklists/" . @words[3]) {
          push(@flists,@words[3]);
          $flistd{@words[3]}=TRUE;
        }
      }
      if ((@words[3] eq "local_allow") || (@words[3] eq "local_deny") || ($flistd{@words[3]})) {
        $aclname="@words[0],@words[1],@words[2]";
        if ($firstacl{$aclname} eq "") {
          push(@sgacl,$aclname);
          $acldef{$aclname}=" @words[5]";
          $firstacl{$aclname}=1;
        }
        if (@words[4] ne "") {
          if (@words[4] ne "true") {
            $cacheacl{$aclname} .="@words[3] ";
          } else {
            $cacheacl{$aclname} .="!@words[3] ";
          }
        }
      }
    } elsif (@words[0] eq "Allow") {
      shift(@words);
      if (@words[0] eq "URL") {
        ($null,@words[1])=split(/:\/\//,@words[1]);
        if (@words[1] eq "") {
          @words[1]=$null;
        }
        if (index(@words[1],"/") eq "-1") {
          push(@dlallow,@words[1]);
        } else {
          push(@ulallow,@words[1]);
        }
      } else {
          push(@elallow,@words[1]);
      }
    } elsif (@words[0] eq "Deny") {
      shift(@words);
      if (@words[0] eq "URL") {
        ($null,@words[1])=split(/:\/\//,@words[1]);
        if (@words[1] eq "") {
          @words[1]=$null;
        }
        if (index(@words[1],"/") eq "-1") {
          push(@dldeny,@words[1]);
        } else {
          push(@uldeny,@words[1]);
        }
      } else {
          push(@eldeny,@words[1]);
      }
    } elsif (@words[0] eq "FilterList") {
      shift(@words);
      push(@flists,@words[0]);
    }
  } elsif (@words[0] eq "FileServer") {
    shift(@words);
    if (@words[0] eq "Config") {
      shift(@words);
      if ((@words[0] eq "netbios") && (@words[1] eq "name")) {
        @words[1]="aliases";
        @nbname=@words;
        shift(@nbname);
        shift(@nbname);
        shift(@nbname);
        print SV "NB_NAME=\"" . join(" ",@nbname) . "\";\n";
      } elsif ((@words[0] eq "os") && (@words[1] eq "level")) {
        print SV "OSLEVEL=\"" . @words[3] . "\";\n";
      }
      if (@words[0] ne "password") {
        push(@smbconf,join(" ",@words));
      }
    } elsif (@words[0] eq "Option") {
      shift(@words);
      $optname=@words[0];
      shift(@words);
      $smboption{$optname}=join(" ",@words);
    } elsif (@words[0] eq "Controler") {
      push(@smbconf,"domain logons = Yes");
      push(@smbconf,"logon drive = @words[1]:");
      push(@smbconf,"logon script = logon.bat");
      push(@smbconf,"logon path = \\\\%L\\%U\\.ntprofile");
#      push(@smbconf,"logon home = \\\\%L\\%U\\.winprofile");
      $dcontroller="@words[1]:@words[2]";
      if (! -d "/etc/samba") {
        push(@smbconf,"domain admin group = \@smbadm");
      }
    } elsif (@words[0] eq "Share") {
      shift(@words);
      push(@smbshare,join("\|",@words));
      if (@words[5] eq "true") {
        push(@dazuko,"/var/spool/samba/@words[1]");
      }
    } elsif (@words[0] eq "Mapping") {
      shift(@words);
      push(@mapdrive,join("\|",@words));
    } elsif (@words[0] eq "UProfile") {
      shift(@words);
      $smbprofile="set";
    } else {
      if (@words[1] eq "") {
        @words[1]=true;
      }
      $smbclam{@words[0]}=@words[1];
    }
  } elsif (@words[0] eq "User") {
    shift(@words);
    if (@words[2] ne "") {
      $users{@words[0]}=join("\|",@words);
      push(@sysusers,@words[0]);
    } else {
      $trusts{@words[0]}=@words[1];
      push(@trustusers,@words[0]);
    }
  } elsif (@words[0] eq "Group") {
    shift(@words);
    if (@words[1] eq "") {
      push(@grps,@words[0]);
    } else {
      $grpmem{@words[0]}.="@words[1],";
    }
  } elsif (@words[0] eq "Radius") {
    shift(@words);
    if (@words[0] eq "Client") {
      shift(@words);
      $radent=join("\|",@words);
      push(@radclient,$radent);
    } elsif (@words[0] eq "Realm") {
      shift(@words);
      $radent=join("\|",@words);
      push(@radrealm,$radent);
    } elsif (@words[0] eq "RAS") {
      shift(@words);
      $radent=join("\|",@words);
      push(@radlink,$radent);
    } elsif (@words[0] eq "Secret") {
      $radssecret=@words[1];
    } elsif (@words[0] eq "Server") {
      $radserver=@words[1];
    } elsif (@words[0] eq "AuthPort") {
      $radauport=@words[1];
    } elsif (@words[0] eq "AccPort") {
      $radacport=@words[1];
    } elsif (@words[0] eq "Hotspot") {
      $hspotrange=@words[1];
      $hspotint=@words[2];
    } elsif ((@words[0] eq "Wireless") || (@words[0] eq "PPPoE")){
      $wirelessrange=@words[1];
      $wirenonat=@words[2];
    } elsif (@words[0] eq "PPPoEIF") {
      $wirelessint=@words[1];     
    } else {
      $radopt{@words[0]}=@words[1];
    }
  } elsif (@words[0] eq "NFS") {
    shift(@words);
    if (@words[0] eq "Share") {
      shift(@words);
      $nfssh=join("\|",@words);
      push(@nfsshare,$nfssh);
    } elsif (@words[0] eq "Mount") {
      shift(@words);
      $nfsmnt=join("\|",@words);
      push(@nfsmount,$nfsmnt);
    }
  } elsif (@words[0] eq "X509") {
    shift(@words);
    if (@words[0] eq "Config") {
      shift @words;
      $scmd=shift @words;
      $caconf{$scmd}=join(" ",@words);
      if ($x509cmd{$scmd} ne "") {
        print SV "X509_" . $x509cmd{$scmd} . "=\"" . $caconf{$scmd} . "\";\n";
      }
    }
  } elsif (@words[0] eq "LDAP" ) {
    shift(@words);
    if (@words[0] eq "Password") {
      $ldappass=@words[1];
    } elsif (@words[0] eq "ReplicateDN") {
      @repdn=split(/\,/,@words[1]);
    } elsif(@words[0] eq "AnonRead") {
      $ldapread=@words[1];
    } elsif(@words[0] eq "Backup") {
      $ldapbackup=@words[1];
    } elsif (@words[0] eq "Addressbook") {
      $ldapanon{@words[1]}=@words[2];
      push(@ldapbook,@words[1]);
    } elsif (@words[0] eq "Replica") {
      shift @words;
      if (@words[2] ne "") {
        if (@words[2] eq "true") {
          $repurl="ldaps://@words[0]";
        } else {
          $repurl="ldap://@words[0]";
        }
        $syncreplsid=@words[1];
      } else {
        if (@words[1] eq "true") {
          $repurl="ldaps://@words[0]";
        } else {
          $repurl="ldap://@words[0]";
        }
        $syncreplsid="1";
      }
      $repmaster=@words[0];
#      $repserv=join("\|",@words);
#      push(@lrephost,$repserv);
    }
  } elsif (@words[0] eq "SQL" ) {
    shift(@words);
    if (@words[0] eq "Password") {
      $sqladminpass=@words[1];
    } elsif(@words[0] eq "WebmailPass") {
      $hordepass=@words[1];
    } elsif(@words[0] eq "IDPass") {
      $sqlulogdpass=@words[1];
    } elsif(@words[0] eq "Server") {
      $sqlserver=@words[1];
    } elsif(@words[0] eq "Radius") {
      $sqlradiuspass=@words[1];
    } elsif(@words[0] eq "RadiusServ") {
      $sqlradiusserv=@words[1];
    } elsif(@words[0] eq "Control") {
      $sqlctrlpass=@words[1];
    } elsif(@words[0] eq "Forum") {
      $sqlforumpass=@words[1];
    } elsif(@words[0] eq "CRM") {
      $sqlcrmpass=@words[1];
    } elsif(@words[0] eq "Backup") {
      $sqlbackup=@words[1];
    } elsif(@words[0] eq "PGAdmin") {
      $pgadminpass=@words[1];
    } elsif(@words[0] eq "PGExchange") {
      $exchangepass=@words[1];
    } elsif (@words[0] eq "Cubit") {
      $sqlcubitpass=@words[1];
    } elsif (@words[0] eq "Asterisk") {
      $sqlvoippass=@words[1];
    } elsif (@words[0] eq "AsteriskServ") {
      $sqlvoipserv=@words[1];
    } elsif (@words[0] eq "MAsterisk") {
      $sqlmvoippass=@words[1];
    } elsif (@words[0] eq "MAsteriskServ") {
      $sqlmvoipserv=@words[1];
    } elsif (@words[0] eq "OpSecret") {
      $voipopsecret=@words[1];
    } elsif (@words[0] eq "OpHostname") {
      $voipophostname=@words[1];
    } elsif(@words[0] eq "VBackup") {
      $voipbackup=@words[1];
    }
  } elsif (@words[0] eq "System") {
    shift(@words);
    $sdnme=@words[0];
    shift(@words);
    $sysconfig{$sdnme}=join(" ",@words);
  } elsif (@words[0] eq "Serial") {
    $sdnme=@words[0];
    shift(@words);
    $sysconfig{$sdnme}=join(" ",@words);
  }
  if ($skipline eq "0") {
    push(@configfile,$_);
  }
}

print SV "DOM_WG=\"" . $smboption{'Domain'} . "\";\n";
print SV "DTYPE=\"" . $smboption{'Security'} . "\";\n";
print SV "DOM_ADS=\"" . $smboption{'ADSRealm'} . "\";\n";
print SV "DOM_DC=\"" . $smboption{'ADSServer'} . "\";\n";
print SV "GW_ADDR=\"" . $sysconf{'Nexthop'} . "\";\n";

if ($dcontroller ne "") {
  print SV "DOMC=\"0\";\n";
} else {
  print SV "DOMC=\"1\";\n";
}
print SV "DNS_SERV1=\"" . $sysconf{'PrimaryDns'} . "\";\n";
print SV "DNS_SERV2=\"" . $sysconf{'SecondaryDns'} . "\";\n";
print SV "WINS_SERV1=\"" . $sysconf{'PrimaryWins'} . "\";\n";
print SV "WINS_SERV2=\"" . $sysconf{'SecondaryWins'} . "\";\n";

print SV "DYN_SERV=\"" . $dnsconf{'DynServ'} . "\";\n";
print SV "DYN_ZONE=\"" . $dnsconf{'DynZone'} . "\";\n";
print SV "DYN_KEY=\"" . $dnsconf{'SmartKey'} . "\";\n";

print SV "DNS_MX1=\"" . $pmailx . "\";\n";
print SV "DNS_MX2=\"" . $smailx . "\";\n";
print SV "VLAN_PHY=\"" . $vliflink . "\";\n";

@mdmopts=("ComPort","Speed","FlowControl","Connection","Init1","Init2","DialString","Number","Username","Password",
          "MTU","Address","Gateway","IdleTimeout","Holdoff","Maxfail");
foreach $mdmopt (@mdmopts) {
  if ($mdmconf{$mdmopt} eq "true") {
    $mdmconf{$mdmopt}="";
  }
}

if ($dnsconf{'Hostname'} ne "") {
  push(@smbconf,"netbios name = " . uc($dnsconf{'Hostname'}));
} else {
  push(@smbconf,"netbios name = SERVER");
}

print SV "MDM_PORT=\"" . $mdmconf{'ComPort'} . "\";\n";
print SV "MDM_SPEED=\"" . $mdmconf{'Speed'} . "\";\n";
print SV "MDM_FLW=\"" . $mdmconf{'FlowControl'} . "\";\n";
print SV "MDM_CONN=\"" . $mdmconf{'Connection'} . "\";\n";
print SV "MDM_Init1=\"" . $mdmconf{'Init1'} . "\";\n";
print SV "MDM_Init2=\"" . $mdmconf{'Init2'} . "\";\n";
print SV "MDM_DSTR=\"" . $mdmconf{'DialString'} . "\";\n";
print SV "MDM_NUM=\"" . $mdmconf{'Number'} . "\";\n";
print SV "MDM_UN=\"" . $mdmconf{'Username'} . "\";\n";
print SV "MDM_PW=\"" . $mdmconf{'Password'} . "\";\n";
print SV "MDM_MTU=\"" . $mdmconf{'MTU'} . "\";\n";
print SV "MDM_ADDR=\"" . $mdmconf{'Address'} . "\";\n";
print SV "MDM_GW=\"" . $mdmconf{'Gateway'} . "\";\n";
print SV "MDM_TOUT=\"" . $mdmconf{'IdleTimeout'} . "\";\n";
print SV "MDM_HO=\"" . $mdmconf{'Holdoff'} . "\";\n";
print SV "MDM_MF=\"" . $mdmconf{'Maxfail'} . "\";\n";

print SV "FWALL_INT=\"" . $sysconf{'Internal'} . "\";\n";
print SV "FWALL_EXT=\"" . $sysconf{'External'} . "\";\n";
print SV "DEL_DNS=\"0\";\n";
print SV "SERIAL=\"" . $sysconfig{'Serial'} . "\";\n";
close(SV);

if (($sysconfig{'Type'} ne "full") && ($sysconfig{'Type'} ne "")) {
  open(NL,">networksentry-lite");
  print NL "This System Is Limeted\n";
  close(NL);
  $sysconfig{'Type'}="lite";
  $dnsconf{'Domain'}=$mailconf{'Domain'};
  $dnsconf{'Hostname'}="netsentry-lite";
  $sysconf{'PrimaryDns'}=$mailconf{'DNS'};
  if ( -e "networksentry-full" ) {
    unlink("networksentry-full");
  }
} else {
  #Probe for printers

#  $/="\n\n";
#  open(PIPE,"/usr/sbin/lsusb -v|");
#  while(<PIPE>) {
#    @record=split(/\n/,$_);
#    foreach $_ (@record) {
#      if (/[\s]+iProduct[\s]+[0-9]+[\s]+(.*)/) {
#        $product=$1;
#      } elsif (/[\s]+iManufacturer[\s]+[0-9]+[\s]+(.*)/) {
#        $manu=$1;
#      } elsif (/[\s]+iInterface[\s]+([0-9])/) {
#        $iface=$1;
#      } elsif (/[\s]+bInterfaceClass[\s]+([0-9]+)[\s]+(.*)/) {
#        if ($1 ne "255") {
#          $class=$2;
#        }
#      }
#    }
#    if ($class eq "Printer") {
#      $usbport="/dev/usb/lp" . $iface;
#      push(@uprint,$usbport);
#      $uprinter{$usbport}=$manu . " " . $product;
#    }
#  }
#  close(PIPE);

  $base_dir="/proc/sys/dev/parport";
  opendir(PRINT,$base_dir);
  @dirs=grep(! /(^\.)|(^default$)/,readdir(PRINT));
  closedir(PRINT);
  foreach $entry (@dirs) {
    if ( -e $base_dir . "/" . $entry . "/autoprobe" ) {
      open(PRINTER,$base_dir . "/" . $entry . "/autoprobe");
      while(<PRINTER>) {
        chop $_;
        @pdat=split(/:/,$_);
        if (@pdat[0] eq "DESCRIPTION") {
          ($devnme,$port)=split(/parport/,$entry);
          chop @pdat[1];
          $port++;
          $port="LPT" . $port;
          $printer{$port}=@pdat[1];
        }
      }
      close(PRINTER);
    }
  }
  open(NL,">networksentry-full");
  print NL "This System Is Unlimeted\n";
  close(NL);
  if ( -e "networksentry-lite" ) {
    unlink("networksentry-lite");
  }
}

if (($dnsconf{'Auth'} eq "true") && ($dnsconf{'Domain'} ne $dnsconf{'DynZone'}) && 
    ($dnsconf{'DynZone'} ne "") && ($ddnslocal != "1")) {
  $ddnslocal=0;
} else {
  $ddnslocal=1;
}

if ($ddnslocal eq "0") {
  if ($dnsconf{'Hostname'}) {
     $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'}
  }

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

  $tsig{$dnsconf{'DynZone'}}=encode_base64($dnsconf{'SmartKey'});
  chop($tsig{$dnsconf{'DynZone'}});
  push(@tsigkeys,$dnsconf{'DynZone'});

  open(ZONE,">zones/domain.dyn");
  chmod(0600,"zones/domain.dyn");
  print ZONE<<__EOB__;
@                        $dnsconf{'DefaultTTL'} IN     SOA   $dnsconf{'DynZone'}.     info (
                                           $dnsconf{'Serial'} ; serial
                                           $dnsconf{'Refresh'}
                                           $dnsconf{'Retry'}
                                           $dnsconf{'Expire'}
                                           $dnsconf{'DefaultTTL'})
                         $dnsconf{'DefaultTTL'} IN     NS    $fqdn.
__EOB__
#  printf ZONE ("%-25s%s IN     %-5s %s\n","",$dnsconf{'DefaultTTL'},"A",$localip);
#  foreach $linknme (@vadsllink) {
#    printf ZONE ("%-25s%s IN     %-5s %s\n",$linknme,$dnsconf{'DefaultTTL'},"A",$localip);
#  }
  close(ZONE);
}

if (-e "/etc/vpnconf") {
  open(VCNF,"/etc/vpnconf");
  while(<VCNF>) {
    chop $_;
    push(@esptunnels,$_);
  }
  close(VCNF);
}

if ($wirelessint == "") {
  $wirelessint=$sysconf{'Internal'};
}


if ($tcctl{'Egress'} ne "") {
  $tcctl{'Egress50'}=$tcctl{'Egress'}*0.5;
  $tcctl{'Egress30'}=$tcctl{'Egress'}*0.3;
  $tcctl{'Egress20'}=$tcctl{'Egress'}*0.2;
}

if ($tcctl{'Ingress'} ne "") {
  $tcctl{'Ingress50'}=$tcctl{'Ingress'}*0.5;
  $tcctl{'Ingress30'}=$tcctl{'Ingress'}*0.3;
  $tcctl{'Ingress20'}=$tcctl{'Ingress'}*0.2;
}

if (($mdmconf{'Connection'} eq "ADSL") || (($sysconf{'External'} ne "Dialup") && (index($mdmconf{'ComPort'},"eth") eq 0)) && ($mdmconf{'Connection'} eq "ADSL")) {
  $mdmconf{'ComPort'}=$sysconf{'External'};
  $sysconf{'External'}="Dialup";
}

if (($mdmconf{'ComPort'} eq "Dialup") && ($mdmconf{'Connection'} eq "ADSL")) {
  $mdmconf{'ComPort'}=$sysconf{'Internal'}
}

if ($ldapserv{'Server'} eq "") {
  $ldapserv{'Server'}="127.0.0.1";
}

#if (($repdn ne "") && ($ldapserv{'Server'} ne "127.0.0.1")){
#  $ldapserv{'Replicate'}=$ldapserv{'Server'} . " 127.0.0.1";
#  $ldapserv{'ReplicateSMB'}="\"ldaps://" . $ldapserv{'Server'} . " ldaps://127.0.0.1\"";
#} else {
#}
$ldapserv{'Replicate'}=$ldapserv{'Server'};
$ldapserv{'ReplicateSMB'}="ldaps://" . $ldapserv{'Server'};

if ($ldapserv{'Login'} eq "") {
  $ldapserv{'Login'}="uid=admin,ou=Users";
}

if ($ldapserv{'Password'} eq "") {
  $ldapserv{'Password'}=$ldappass;
}

if ($sqlradiusserv eq "") {
  $sqlradiusserv="localhost";
}

if ($sqlvoipserv eq "") {
  $sqlvoipserv="localhost";
}

if ($sqlmvoipserv eq "") {
  $sqlmvoipserv=$sqlvoipserv;
}

if ($sqlmvoippass eq "") {
  $sqlmvoippass=$sqlvoippass;
}

if ($pmailx eq "") {
  if ($dnsconf{'Hostname'} ne "") {
    $pmailx="$dnsconf{'Hostname'}.$dnsconf{'Domain'}"
  } else {
    $pmailx="$dnsconf{'Domain'}"
  }
}

if ($mailconf{'Rescan'} eq "") {
  $mailconf{'Rescan'}="2";
}

if ($repmaster eq "") {
  $repmaster=$ldapserv{'Server'};
}

close(CF);

if ($sysconfig{'Type'} ne "") {
  open(CF,">netsentry.conf");
  chmod(0600,"netsentry.conf");
  foreach $cfln (@configfile) {
    print CF "$cfln\n";
  }
  close(CF);
} else {
  exit -1;
}

&printiftab();
&printrcppp();
&printresolv();
&printcrontab();

&printldap();

if ($sysconfig{'Type'} eq "full") {
  if ($sqlvoippass eq "") {
    $sqlvoippass="asterisk";
  }
  &printastmod();
  &printastsip();
  &printastvm();
  &printastcli();
  &printastiax();
  &printastagent();
  &printrrdlim();
  &printrctos();
  &printntpconf();
  &printclamconf();
  &printrcmail();
  &printcupsconf();
  if (($mdmconf{'Connection'} eq "Dialup") && ($sysconf{'External'} eq "Dialup")) {
    &printgrelitetun();
  } else {
    &printgretun();
  }
  &printhosts();
  &printespconf();
  &printcaconf();
  &printpop3();
  &printsmblogon();
  &printsmbconf();
  &printemailconf();
}

&printfconf();
&printlists();

&printdhcp();
&printdynkey();
&printdnsconf();

if ($sysconfig{'Type'} eq "full") {
  &printsqlpass();
  &printpopconf();
  &printattfilterconf();
#  &printatalkconf();
  &printmscanconf();
  &printradclient();  
  &printradserver();  
  &printradrealm();
  &printradpmap();
  &printautofsconf();
  &printfaxtty();
  &printfaxconf();
  &printfaxstart();
  &printmrtg;
  &printbackup;
} else {
  &printgrelitetun();
  &printrcmail();
  &printhosts();
  &printsqlpass();
  &printpop3();
  &printemailconf();
  &printlitetables();
}

&printsquid();

if ($sysconfig{'Type'} eq "full") {
  &printtables();
}

&printpppopt();
#&printpppport();
&printpppsecret();
&printdiald();

&printedns();

&setldapdom();

if ($sysconfig{'Type'} eq "full") {
#  &printgenmon();
  &printodbcdsn();
  &printnfsexport();
  &printgnugkh323();
  &printasth323();
  &printzapata();
  &printmisdn();
  &printblf();
  &initcallshop();
  &printchilli();
  &printsogo();
  &printovpnconf();
  &printippool();
}

if ( -e "/tmp/.firstconfig" ) {
  &printetcshadow();
}


sub printippool() {
  if ($sysconf{'L2TPNet'} ne "") {
    open(IPOOL,">ippool_l2tp");
    ($l2tpip,$l2tpnet)=split(/\//,$sysconf{'L2TPNet'});
    $l2tpip=getnw($l2tpnet,$l2tpip);
    $l2tpnetm=getsn($l2tpnet);
    print IPOOL<<__EOF__;
pool create pool_name=l2tp \\

pool address add pool_name=l2tp first_addr=$l2tpip \\
	netmask=$l2tpnetm
__EOF__
    close(IPOOL);
  }
}


sub printattfilterconf() {
  open(FO,">filename.rules.conf");
  chmod(0600,"filename.rules.conf");
  foreach $sin (@attfilter) {
    ($atype,$regex,$logtext,$usertext)=split(/\|/,$sin);
    $regex=join(" ",split(/_/,$regex));
    $logtext=join(" ",split(/_/,$logtext));
    $usertext=join(" ",split(/_/,$usertext));
    print FO "$atype\t$regex\t$logtext\t$usertext\n";
  }
  close(FO);
}

sub printclamconf() {
  open(AV,">clamav.conf");
  chmod(0600,"clamav.conf");
  
  $avsizem=uc(substr($smbclam{'AVMaxSize'},length($smbclam{'AVMaxSize'})-1));

  if (($avsizem ne "K") && ($avsizem ne "M")) {
    $smbclam{'AVMaxSize'} .="M";
  }

  $maxconql=10*$smbclam{'AVMaxThread'};
  print AV<<__EOF__;
LogFile /var/log/clamd.log
LogFileMaxSize 0
LogVerbose yes
LogTime yes
PidFile /var/run/clamd.pid
DatabaseDirectory /var/spool/avirus
LocalSocket /tmp/clamd
FixStaleSocket yes
#TCPSocket 3310
TemporaryDirectory /tmp
MaxConnectionQueueLength $maxconql
MaxThreads $smbclam{'AVMaxThread'}
MaxDirectoryRecursion 0
#ThreadTimeout 14400
#FollowDirectorySymlinks
FollowFileSymlinks yes
User root
#Foreground
ScanArchive yes
MaxFileSize $smbclam{'AVMaxSize'}
MaxRecursion 5
MaxFiles 1000
IdleTimeout 5
ReadTimeout 5
__EOF__

$clamdmount="";
$wrapfs="";

if ($smbclam{'AVHome'}) {
  $clamdmount .="ClamukoIncludePath /var/home/\n";
  push(@wrapfs,"/var/home");
}

if ($smbclam{'AVShare'}) {
  $clamdmount .="ClamukoIncludePath /var/spool/samba/share\n";
  $clamdmount .="ClamukoIncludePath /var/spool/samba/ftp\n";

  push(@wrapfs,"/var/spool/samba/share");
  push(@wrapfs,"/var/spool/samba/ftp");

}


  foreach $cavpath (@dazuko) {
    $clamdmount .="ClamukoIncludePath $cavpath\n";
#    push(@wrapfs,$cavpath);
  }

  open(DFT,">clamd.start");
  chmod(0600,"clamd.start");
  print DFT <<__EOF__;
#!/bin/bash

CLAMTEST=`clamctrl PING 2> /dev/null`
if [ "\$CLAMTEST" != "PONG" ];then
  /usr/sbin/clamctrl QUIT
  sleep 2
 elif [ "\$1" != "START" ];then
  exit
fi;

CTEST=X
while [ "`pidof clamd`" ] && [ "\${CTEST}" != "XXXXXXXXXX" ];do
  if [ -e /var/run/clam.pid ];then
    kill `cat /var/run/clam.pid`
   else
    killall clamd
  fi;
  CTEST="\${CTEST}X"
  sleep 1;
done

if [ "`pidof clamd`" ];then
  killall -9 clamd;
  sleep 2
fi;

if [ -S /tmp/clamd ];then
  rm /tmp/clamd> /dev/null 2>&1
fi;

while [ "`pidof clamctrl`" ];do
  killall -9 clamctrl
done;

__EOF__

if (($clamdmount ne "") && ( -e "/dev/dazukofs.ctrl")) {
  chop $clamdmount;
  print AV<<__EOF__;
#ClamukoScanOnAccess yes
#ClamukoScannerCount 4
#ClamukoMaxFileSize $smbclam{'AVMaxSize'}
__EOF__

print DFT <<__EOF__;

#cat /proc/mounts |grep dazukofs   |awk '{printf "umount %s\\n",\$1}' |sh

__EOF__
  foreach $wrapmnt (@wrapfs) {
    print DFT <<__EOF__;
#Wrap FS $wrapmnt
if [ ! "`cat /proc/mounts |grep -E "^$wrapmnt.*wrapfs"`" ];then
  if [ -d $wrapmnt.base ];then
    mount -t wrapfs $wrapmnt.base $wrapmnt
   else
    mount -t wrapfs $wrapmnt $wrapmnt
  fi;
fi;

__EOF__
  }
} elsif (($clamdmount ne "") && ( ! -e "/dev/dazukofs.ctrl")) {
  chop $clamdmount;
  print AV<<__EOF__;
ClamukoScanOnAccess yes
ClamukoScanOnOpen yes
ClamukoScanOnClose no
ClamukoScanOnExec no
ClamukoMaxFileSize $smbclam{'AVMaxSize'}
$clamdmount
__EOF__
}
  print DFT <<__EOF__;

/usr/sbin/clamd
__EOF__
  close(DFT);

  open(AVL,"/etc/clamav.conf.local");
  while(<AVL>) {
    print AV $_;
  }
  close(AVL);
  close(AV);
}

sub printdynkey(){
  $dynkey=encode_base64($dnsconf{'SmartKey'});
  $dynzone=$dnsconf{'DynZone'};
  open(KEY,">zones/dyndns.key");
  print KEY "$dnsconf{'DynZone'}. IN KEY 512 3 157 $dynkey\n";
  close(KEY);
  open(PKEY,">zones/dyndns.private");
  print PKEY "Private-key-format: v1.2\n";
  print PKEY "Algorithm: 157 (HMAC_MD5)\n";
  print PKEY "Key: $dynkey\n";
  close(PKEY);
}


sub printsqlpass(){
  open(SP,">sqlpasswd");
  chmod(0600,"sqlpasswd");

  if ($mailldap{'Password'} eq "") {
    $mailldap{'Password'}=$ldapserv{'Password'};
  }

  if ($mailldap{'Login'} eq "") {
    $mailldap{'Login'}=$ldapserv{'Login'};
  }

  if ($sqlserver eq "") {
    $sqlserver="localhost";
  }

  $ethint=$sysconf{'Internal'};
  @idata=split(/\|/,$interface{$ethint});

  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'}
  }

  if ($voipopsecret eq "") {
    $voipopsecret=$sqlvoippass;
  }

  if ($voipophostname eq "") {
    $voipophostname=$fqdn;
  }

  @dninf=split(/\./,$dnsconf{'Domain'});
  $vsuf="";
  foreach $dndat (@dninf) {
    $vsuf.="dc=" . $dndat . ",";
  }
  chop $vsuf;

  
  print SP<<__EOF__;
#!/bin/bash

__EOF__

if (($sysconfig{'Type'} ne "full") && (! -e "/etc/.firstboot")) {
  print SP<<__EOF__;
if [ -e /tmp/.firstconfig ];then
  (cat << EOF
hosts:          files
passwd:		files
shadow:		files
group:		files
EOF
) > /etc/nsswitch.conf
 else
  (cat << EOF
hosts:          files
passwd:		files
shadow:		files
group:		files
EOF
) > /etc/nsswitch.conf.boot
  (cat << EOF
hosts:          files dns ldap
passwd:		files ldap
shadow:		files ldap
group:		files ldap
EOF
) > /etc/nsswitch.conf.ldap
  if [ ! -e /etc/nsswitch.conf.local ];then
    cp /etc/nsswitch.conf.ldap /etc/nsswitch.conf
   else
    cp /etc/nsswitch.conf.local /etc/nsswitch.conf
  fi;
fi;

__EOF__

  @dninf=split(/\./,$dnsconf{'Domain'});
  $vsuf="";
  foreach $dndat (@dninf) {
    $vsuf.="dc=" . $dndat . ",";
  }
  chop $vsuf;

  print SP<<__EOF__;
(cat <<EOF
URI             ldap://$ldapserv{'Server'}
SASL_SECPROPS   none
EOF
)>/etc/openldap/ldap.conf

(cat <<EOF
<\%
  \\\$ds=ldap_connect("ldap://$repmaster");    
  ldap_set_option(\\\$ds, LDAP_OPT_PROTOCOL_VERSION,3);
  \\\$LDAP_ROOT_DN="$ldapserv{'Login'}";
  \\\$LDAP_ROOT_PW="$ldapserv{'Password'}";
  \\\$LOCAL_DOMAIN="$dnsconf{'Domain'}";
  \\\$LDAP_BDN="$vsuf";
\%>
EOF
)>/var/spool/apache/htdocs/ldap/ldapcon.inc
chmod 600 /var/spool/apache/htdocs/ldap/ldapcon.inc
chown 80.80 /var/spool/apache/htdocs/ldap/ldapcon.inc

sed -e "s/^binddn.*****\$/binddn $ldapserv{'Login'}/" \\
    -e "s/^bindpw.*****\$/bindpw $ldapserv{'Password'}/" \\
    -e "s/^base.*****\$/base $vsuf/" \\
    -e "s/^port.*/port 389/" \\
    -e "s/^uri.*****\$/uri ldap\\:\\/\\/$ldapserv{'Server'}/" \\
    -e "s/^master_host.*\$/master_host $repmaster/" /etc/ldap.conf.orig >  /etc/ldap.conf

chmod 644 /etc/ldap.conf
chown 0.139 /etc/ldap.conf

echo "$mailldap{'Password'}" > /etc/mail/ldap
__EOF__

} else {
  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'}
  }

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];
 
  print SP<<__EOF__;
if [ -e /tmp/.firstconfig ];then
  (cat << EOF
hosts:          files
passwd:		files
shadow:		files
group:		files
EOF
) > /etc/nsswitch.conf
 else
  (cat << EOF
hosts:          files
passwd:		files
shadow:		files
group:		files
EOF
) > /etc/nsswitch.conf.boot
  (cat << EOF
hosts:          files dns ldap wins
passwd:		files ldap winbind
shadow:		files ldap
group:		files ldap winbind
EOF
) > /etc/nsswitch.conf.ldap

  if [ ! -e /etc/nsswitch.conf.local ];then
    cp /etc/nsswitch.conf.ldap /etc/nsswitch.conf
   else
    cp /etc/nsswitch.conf.local /etc/nsswitch.conf
  fi;
fi;

__EOF__


  $domtsigkey=encode_base64($dnsconf{'DynKey'});
  chop $domtsigkey;
  if ($dnsconf{'Auth'} ne "false") {
    $dnsserv="127.0.0.1";
  } else {
    $dnsserv=$sysconf{'PrimaryDns'};
  }

  if ($sqlcrmpass eq "") {
    $sqlcrmpass="SugarCRM";
  }

  if ($sqlcubitpass eq "") {
     $sqlcubitpass="i56kfm";
  }

  if ($syncreplsid != "" ) {
    print SP<<__EOF__;

if [ ! -e "/var/spool/ldap/replica.$syncreplsid" ];then
  touch /var/spool/ldap/replica.$syncreplsid
  killall -9 slapd
  rm -rf /var/spool/ldap /var/log/ldap
fi;

__EOF__
  }

  $scrmcrypt=crypt($sqlcrmpass,"ad");
  $scrmmd5=md5_hex($sqlcrmpass);
  print SP<<__EOF__;
(cat <<EOF
TLS_CERT	/etc/openssl/server.signed.pem
TLS_KEY		/etc/openssl/serverkey.pem
TLS_REQCERT     allow
URI             ldaps://$ldapserv{'Server'}
SASL_SECPROPS   none
EOF
)>/etc/openldap/ldap.conf

(cat <<EOF
<\%
  \\\$ds=ldap_connect("ldaps://$repmaster");    
  ldap_set_option(\\\$ds, LDAP_OPT_PROTOCOL_VERSION,3);
  \\\$LDAP_ROOT_DN="$ldapserv{'Login'}";
  \\\$LDAP_ROOT_PW="$ldapserv{'Password'}";
  \\\$LOCAL_DOMAIN="$dnsconf{'Domain'}";
  \\\$LDAP_BDN="$vsuf";
\%>
EOF
)>/var/spool/apache/htdocs/ldap/ldapcon.inc
chmod 600 /var/spool/apache/htdocs/ldap/ldapcon.inc
chown 80.80 /var/spool/apache/htdocs/ldap/ldapcon.inc

(cat <<EOF
function FindProxyForURL(url, host) {
  if (isPlainHostName(host) || dnsDomainIs(host,".$dnsconf{'Domain'}"))
    return "DIRECT";
  if (isInNet(host,"192.168.0.0","255.255.0.0"))
    return "DIRECT";
  if (isInNet(host,"10.0.0.0","255.0.0.0"))
    return "DIRECT";
  if (isInNet(host,"172.16.0.0","255.224.0.0"))
    return "DIRECT";
  return "PROXY $fqdn:3128; DIRECT";
}
EOF
)>/var/spool/apache/htdocs/proxy.pac

sed -e "s/^\\\$whereami.*/\\\$whereami = \\\"$dnsconf{'Domain'}\\\";/" /var/spool/majordomo/majordomo.cf.orig  > /var/spool/majordomo/majordomo.cf

sed -e "s/^binddn.*****\$/binddn $ldapserv{'Login'}/" \\
    -e "s/^bindpw.*****\$/bindpw $ldapserv{'Password'}/" \\
    -e "s/^base.*****\$/base $vsuf/" \\
    -e "s/^port.*/port 636/" \\
    -e "s/^master_host.*\$/master_host $repmaster/" \\
    -e "s/^uri.*****\$/uri ldaps:\\/\\/$ldapserv{'Server'} ldaps:\\/\\/$repmaster/" /etc/ldap.conf.orig >  /etc/ldap.conf

chmod 644 /etc/ldap.conf
chown root.smbadm /etc/ldap.conf

echo "$mailldap{'Password'}" > /etc/mail/ldap

#sed -e "s/FQDN/$fqdn/" \\
#    -e "s/LOCALIP/$localip/" /etc/omniORB.cfg.orig > /etc/omniORB.cfg
#
#killall omniNames > /dev/null 2>&1
#sleep 3
#rm /var/log/omninames* > /dev/null 2>&1
#/usr/bin/omniNames -start -logdir /var/log >/dev/null 2>&1 &

#sed -e "s/^domain=\\*\\*\\*\\*\\*\$/domain=$dnsconf{'Domain'}/" \\
#    -e "s/^ldapurl=\\*\\*\\*\\*\\*\$/ldapurl=ldaps:\\/\\/$ldapserv{'Server'}/" \\
#    -e "s/^ldapbdn=\\*\\*\\*\\*\\*\$/ldapbdn=$ldapserv{'Login'}/" \\
#    -e "s/^ldappass=\\*\\*\\*\\*\\*\$/ldappass=$ldapserv{'Password'}/" \\
#    -e "s/^dbpasswd=\\*\\*\\*\\*\\*\$/dbpasswd=$exchangepass/" /etc/bill.conf.orig > /etc/bill.conf
#chmod 600 /etc/bill.conf
#chown root.root /etc/bill.conf

(cat <<EOF
<%
  \\\$db=pg_connect("host=127.0.0.1 dbname=exchange user=exchange password=$exchangepass sslmode=allow");
%>
EOF
) > /var/spool/apache/htdocs/ldap/pgauth.inc
chmod 600 /var/spool/apache/htdocs/ldap/pgauth.inc
chown www.root /var/spool/apache/htdocs/ldap/pgauth.inc

(cat <<EOF
<%
  \\\$db=mysql_connect("$sqlserver","admin","$sqladminpass");
  mysql_select_db("asterisk");
%>
EOF
) > /var/spool/apache/htdocs/ldap/myauth.inc
chmod 600 /var/spool/apache/htdocs/ldap/myauth.inc
chown www.root /var/spool/apache/htdocs/ldap/myauth.inc


(cat <<EOF
<%
  date_default_timezone_set("Africa/Johannesburg");
  \\\$dtime=getdate();
  \\\$syshname="$dnsconf{'Hostname'}";
  \\\$db=pg_connect("host=$sqlserver dbname=asterisk user=asterisk password=$sqlvoippass sslmode=allow");
%>
EOF
) > /var/spool/apache/htdocs/cdr/auth.inc
chmod 600 /var/spool/apache/htdocs/cdr/auth.inc
chown www.root /var/spool/apache/htdocs/cdr/auth.inc

(cat <<EOF
<%
  date_default_timezone_set("Africa/Johannesburg");
  \\\$dtime=getdate();
  \\\$db=pg_connect("host=$sqlserver dbname=asterisk user=asterisk password=$sqlvoippass sslmode=allow");
%>
EOF
) > /var/lib/asterisk/agi-bin/auth.inc
chmod 600 /var/lib/asterisk/agi-bin/auth.inc
chown root.root /var/lib/asterisk/agi-bin/auth.inc

(cat <<EOF
[global]
dsn=Asterisk
username=asterisk
password=$sqlvoippass
loguniqueid=yes
dispositionstring=yes
table=cdr
usegmtime=no
EOF
) > /etc/asterisk/cdr_odbc.conf

(cat <<EOF
[Asterisk]
dsn => Asterisk
pre-connect => yes
username => asterisk
password => $sqlvoippass
pooling => yes
limit => 1023

[Master]
dsn => Master
pre-connect => yes
username => asterisk
password => $sqlmvoippass
pooling => yes
limit => 1023
EOF
) > /etc/asterisk/res_odbc.conf

#if [ -e /etc/asterisk/res_odbc.conf.local ];then
#  cat /etc/asterisk/res_odbc.conf.local >> /etc/asterisk/res_odbc.conf
#fi;

(cat << EOF
#!/usr/bin/perl

use DBI;

\\\$dbh = DBI->connect("DBI:ODBC:Asterisk","asterisk","$sqlvoippass");
\\\$dbh->do("UPDATE users SET password='\@ARGV[2]' WHERE mailbox = '\@ARGV[1]' AND context='\@ARGV[0]'");

EOF
)>/usr/sbin/voippass
chmod 700 /usr/sbin/voippass
chown root.root /usr/sbin/voippass


(cat << EOF
#!/usr/bin/perl

use DBI;

\\\$dbh = DBI->connect("DBI:mysql:database=radius;host=$sqlradiusserv;port=3306","radius","$sqlradiuspass");
\\\$asel=\\\$dbh->prepare("select CallingStationId  from radacct where FramedIPAddress='\@ARGV[0]' AND AcctStopTime=''");
\\\$asel->execute;
\@row=\\\$asel->fetchrow_array;

print \@row[0] . \"\\n\";

EOF
)>/usr/sbin/getmacfromip
chmod 700 /usr/sbin/getmacfromip
chown root.root /usr/sbin/getmacfromip


echo "ALTER USER exchange WITH PASSWORD '$exchangepass';" |/usr/bin/psql -h 127.0.0.1 -U pgsql exchange -f - > /dev/null 2>&1
echo "ALTER USER asterisk WITH PASSWORD '$sqlvoippass';" |/usr/bin/psql -h 127.0.0.1 -U pgsql asterisk -f - > /dev/null 2>&1
echo "ALTER USER radius WITH PASSWORD '$sqlradiuspass';" |/usr/bin/psql -h 127.0.0.1 -U pgsql template1 -f - > /dev/null 2>&1
echo "ALTER USER pgsql WITH PASSWORD '$pgadminpass';" |/usr/bin/psql -h 127.0.0.1 -U pgsql template1 -f - > /dev/null 2>&1
echo "UPDATE reseller SET userpass='$sqlvoippass' WHERE id=0;" |/usr/bin/psql -h 127.0.0.1 -U pgsql asterisk -f - > /dev/null 2>&1
echo "UPDATE realm SET domain='$dnsconf{'Domain'}' WHERE id=0;" |/usr/bin/psql -h 127.0.0.1 -U pgsql asterisk -f - > /dev/null 2>&1

if [ -d /var/spool/cubit ];then 
  echo "ALTER USER postgres WITH PASSWORD '$sqlcubitpass';" |/usr/bin/psql -p 5433 -h 127.0.0.1 -U postgres template1 -f - > /dev/null 2>&1
fi;

(cat << EOF
127.0.0.1:5432:*:pgsql:$pgadminpass
127.0.0.1:5432:*:exchange:$exchangepass
127.0.0.1:5432:*:asterisk:$sqlvoippass
127.0.0.1:5432:*:phpgw:phpgw
127.0.0.1:5433:*:postgres:$sqlcubitpass
EOF
)> /root/.pgpass
chmod 600 /root/.pgpass
chown root.root /root/.pgpass

#kill `cat /var/run/exchange4linux/exchange4linux.pid 2>/dev/null` > /dev/null 2>&1
#/usr/bin/python /usr/local/exchange4linux/Server.pyc > /dev/null 2>&1 &


if [ -e "/etc/samba/smb.conf" ];then
  /usr/bin/smbpasswd -w "$ldapserv{'Password'}" > /dev/null 2>&1
  /usr/sbin/add_domain $smboption{'ServName'} $smboption{'Domain'} >/dev/null 2>&1
  (cat<<EOF
$ldapserv{'Password'}
$ldapserv{'Password'}
EOF
) | smbpasswd -sa admin &
fi;

if [ -e /var/spool/apache/htdocs/horde/config/horde.php ];then
  sed -e "s/\\\$conf\\['prefs'\\]\\['params'\\]\\['password'\\] = .*;/\\\$conf['prefs']['params']['password'] = '$hordepass';/" \\
      -e "s/\\\$conf\\['prefs'\\]\\['params'\\]\\['hostspec'\\] = .*;/\\\$conf['prefs']['params']['hostspec'] = '$sqlserver';/" \\
         /var/spool/apache/htdocs/horde/config/horde.php.orig > /var/spool/apache/htdocs/horde/config/horde.php
  chown www.www /var/spool/apache/htdocs/horde/config/horde.php

  if [ -e /var/spool/apache/htdocs/horde/kronolith/config/conf.php ];then
    sed -e "s/\\\$conf\\['calendar'\\]\\['params'\\]\\['password'\\] = .*;/\\\$conf['calendar']['params']['password'] = '$hordepass';/" \\
        -e "s/\\\$conf\\['calendar'\\]\\['params'\\]\\['hostspec'\\] = .*;/\\\$conf['calendar']['params']['hostspec'] = '$sqlserver';/" \\
           /var/spool/apache/htdocs/horde/kronolith/config/conf.php.orig > /var/spool/apache/htdocs/horde/kronolith/config/conf.php
    chown www.www /var/spool/apache/htdocs/horde/kronolith/config/conf.php
  fi;
  if [ -e /var/spool/apache/htdocs/horde/mnemo/config/conf.php ];then
    sed -e "s/\\\$conf\\['storage'\\]\\['params'\\]\\['password'\\] = .*;/\\\$conf['storage']['params']['password'] = '$hordepass';/" \\
        -e "s/\\\$conf\\['storage'\\]\\['params'\\]\\['hostspec'\\] = .*;/\\\$conf['storage']['params']['hostspec'] = '$sqlserver';/" \\
           /var/spool/apache/htdocs/horde/mnemo/config/conf.php.orig > /var/spool/apache/htdocs/horde/mnemo/config/conf.php
    chown www.www /var/spool/apache/htdocs/horde/mnemo/config/conf.php
  fi;
  if [ -e /var/spool/apache/htdocs/horde/nag/config/conf.php ];then
    sed -e "s/\\\$conf\\['storage'\\]\\['params'\\]\\['password'\\] = .*;/\\\$conf['storage']['params']['password'] = '$hordepass';/" \\
        -e "s/\\\$conf\\['storage'\\]\\['params'\\]\\['hostspec'\\] = .*;/\\\$conf['storage']['params']['hostspec'] = '$sqlserver';/" \\
           /var/spool/apache/htdocs/horde/nag/config/conf.php.orig > /var/spool/apache/htdocs/horde/nag/config/conf.php
    chown www.www /var/spool/apache/htdocs/horde/nag/config/conf.php
  fi;
  if [ -e /var/spool/apache/htdocs/horde/turba/config/sources.php ];then
    sed -e "s/.*'password'.*'****'/        'password' => '$hordepass'/" \\
        -e "s/.*'server'.*'****'/        'server' => '$ldapserv{'Server'}'/" \\
        -e "s/.*'hostspec'.*/        'hostspec' => '$sqlserver',/" \\
           /var/spool/apache/htdocs/horde/turba/config/sources.php.orig > /var/spool/apache/htdocs/horde/turba/config/sources.php
    chown www.www /var/spool/apache/htdocs/horde/turba/config/sources.php
  fi;
fi;

if [ -e /var/lib/asterisk/agi-bin/db_php_lib/defines.php.orig ];then
  sed -e "s/SQLPASS/$sqlvoippass/" /var/lib/asterisk/agi-bin/db_php_lib/defines.php.orig > /var/lib/asterisk/agi-bin/db_php_lib/defines.php
fi;

sed -e "s/pass=\\"\\*\\*\\*\\*\\"/pass=\\"admin\\"/" /etc/ulogd.conf.orig > /etc/ulogd.conf

if [ -e /var/spool/apache/htdocs/dbadmin/config.inc.php.orig ];then
  sed -e "s/\\*\\*\\*\\*\\*/$sqlctrlpass/" /var/spool/apache/htdocs/dbadmin/config.inc.php.orig > /var/spool/apache/htdocs/dbadmin/config.inc.php
fi;


(cat <<EOF
<%
  \\\$link = mysql_connect("localhost", "logview", "$sqlulogdpass");
  mysql_select_db("networksentry_log");
%>
EOF
)> /var/spool/apache/htdocs/logs/ulogauth.php
chmod 640 /var/spool/apache/htdocs/logs/ulogauth.php
chown www.www /var/spool/apache/htdocs/logs/ulogauth.php

(cat <<EOF
<%
\\\$db=pg_connect("host=$sqlradiusserv dbname=radius user=radius password=$sqlradiuspass sslmode=allow")
%>
EOF
)> /var/spool/apache/htdocs/radius/opendb.inc
chown www.www /var/spool/apache/htdocs/radius/opendb.inc
chmod 640 /var/spool/apache/htdocs/radius/opendb.inc

sed -e "s/\\\$password=.*;/\\\$password=\\\"$sqlulogdpass\\\";/" /etc/procmlog.orig > /usr/sbin/procmlog
chmod 750 /usr/sbin/procmlog
chown root.root /usr/sbin/procmlog

sed -e "s/\\\$password=.*;/\\\$password=\\\"$sqlulogdpass\\\";/" /etc/rrdlog.orig > /usr/bin/rrdlog
chmod 750 /usr/bin/rrdlog
chown root.root /usr/bin/rrdlog

sed -e "s/^\\\$password=.*;/\\\$password=\\\"$hordepass\\\";/" \\
    -e "s/^\\\$hostname=.*;/\\\$hostname=\\\"$sqlserver\\\";/" /etc/procmfilter.orig > /usr/sbin/procmfilter
chmod 750 /usr/sbin/procmfilter
chown root.root /usr/sbin/procmfilter

sed -e "s/DOMAIN/$dnsconf{'Domain'}/" -e "s/TSIGKEY/$domtsigkey/" \\
    -e "s/SERVER/$dnsserv/" /etc/wins_hook.orig > /usr/sbin/wins_hook
chmod 700 /usr/sbin/wins_hook
chown root.root /usr/sbin/wins_hook

sed -e "s/^\\\$password=.*;/\\\$password=\\\"$sqlradiuspass\\\";/" \\
    -e "s/^\\\$hostname=.*;/\\\$hostname=\\\"$sqlradiusserv\\\";/" /etc/radcheck.orig > /usr/sbin/radcheck
chmod 750 /usr/sbin/radcheck
chown root.root /usr/sbin/radcheck

sed -e "s/ETHER_LOCAL_DEV=.*/ETHER_LOCAL_DEV=$sysconf{'Internal'}/" /usr/lib/ipsec/_updown.orig > /usr/lib/ipsec/_updown
chown root.root /usr/lib/ipsec/_updown
chmod 755 /usr/lib/ipsec/_updown

sed -e "s/^\\\$password=.*;/\\\$password=\\\"$sqlvoippass\\\";/" /etc/asterisk/pannel/genbut.pl.orig > /etc/asterisk/pannel/genbut.pl
chmod 750 /etc/asterisk/pannel/genbut.pl
chown root.root /etc/asterisk/pannel/genbut.pl

webserver stopsql > /dev/null 2>&1

if [ -e /tmp/mysql.sock ];then
  rm /tmp/mysql.sock
fi;

(/usr/libexec/mysqld --basedir=/usr --datadir=/var/spool/mysql --user=mysql --pid-file=/var/spool/mysql/mysqld.pid --skip-external-locking --port=3306 --socket=/tmp/mysql.sock --skip-grant-tables > /dev/null 2>&1) &
sleep 4
(cat <<_EOF_
USE mysql;
UPDATE user SET Password=PASSWORD('$sqladminpass') WHERE User='admin';
FLUSH PRIVILEGES;
_EOF_
) |mysql

killall mysqld > /dev/null 2>&1
sleep 2
if [ "`/bin/pidof mysqld`" ];then
  killall -9 mysqld
fi;
#webserver stopsql > /dev/null 2>&1

webserver startsql > /dev/null 2>&1
sleep 2

(cat <<_EOF_
GRANT ALL ON *.* TO 'admin'\@'localhost' IDENTIFIED BY '$sqladminpass' WITH GRANT OPTION;
GRANT ALL ON *.* TO 'admin'\@'%' IDENTIFIED BY '$sqladminpass' WITH GRANT OPTION;
GRANT SELECT,INSERT,UPDATE,DELETE ON networksentry_log.* TO 'logview'\@'\%' IDENTIFIED BY '$sqlulogdpass';
GRANT SELECT,INSERT,UPDATE,DELETE ON networksentry_log.* TO 'logview'\@'localhost' IDENTIFIED BY '$sqlulogdpass';
GRANT SELECT,INSERT,UPDATE,DELETE ON horde.* TO 'horde'\@'\%' IDENTIFIED BY '$hordepass';
GRANT ALL ON phpBB2.* TO 'phpBB2'\@'localhost' IDENTIFIED BY '$sqlforumpass';
GRANT SELECT ON mysql.db TO 'control'\@'localhost' IDENTIFIED BY '$sqlctrlpass';
GRANT SELECT (Host,Db,User,Table_name,Table_priv,Column_priv) ON mysql.tables_priv TO 'control'\@'localhost';
GRANT SELECT (Host,User,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Reload_priv,Shutdown_priv,Process_priv,File_priv,Grant_priv,References_priv,Index_priv,Alter_priv) ON mysql.user TO 'control'\@'localhost';
GRANT SELECT,INSERT,UPDATE,DELETE ON phpmyadmin.* to 'control'\@'localhost';
FLUSH PRIVILEGES;
_EOF_
) |mysql -u admin -p$sqladminpass

if [ ! -d /var/spool/mysql/phpmyadmin ] && [ -e /usr/bin/mysql_pmadb.sql ];then
  mysql -u admin -p$sqladminpass < /usr/bin/mysql_pmadb.sql
fi;

if [ ! -d /var/spool/mysql/phpBB2 ];then
  mysql -u admin -p$sqladminpass < /var/spool/apache/htdocs/phpBB2/schema/phpBB2_struct.sql
  mysql -u admin -p$sqladminpass < /var/spool/apache/htdocs/phpBB2/schema/phpBB2_data.sql
fi;

#if [ ! -d /var/spool/mysql/storephront ];then
#  mysql -u admin -p$sqladminpass < /usr/bin/mysql_sfront.sql
#fi;

sed -e "s/.*[^_]server.*=.******/                server  = $ldapserv{'Server'}/" \\
  -e "s/.*identity.*=.******/                identity = $ldapserv{'Login'}/" \\
  -e "s/.*password.*=.*/                password = $ldapserv{'Password'}/" \\
  -e "s/.*basedn.*=.*/                basedn = $vsuf/" \\
 /etc/raddb/radiusd.conf.orig > /etc/raddb/radiusd.conf
chmod 640 /etc/raddb/radiusd.conf
chown root.root /etc/raddb/radiusd.conf

sed -e "s/server.*=.*/server = \\\"$sqlradiusserv\\\"/" \\
  -e "s/password.*=.*/password = \\\"$sqlradiuspass\\\"/" \\
 /etc/raddb/sql.conf.orig > /etc/raddb/sql.conf
chmod 640 /etc/raddb/sql.conf
chown root.root /etc/raddb/sql.conf

sed -e "s/^\\\$dbpasswd = '.*'/\\\$dbpasswd = '$sqlforumpass'/"\\
       /var/spool/apache/htdocs/phpBB2/config.php.orig >\\
       /var/spool/apache/htdocs/phpBB2/config.php

kill -9 `cat /var/run/radiusd.pid 2>/dev/null` > /dev/null 2>&1
sleep 5
if [ -e /var/log/radutmp ];then
  rm /var/log/radutmp
fi
/usr/sbin/radiusd > /dev/null 2>&1

__EOF__
}

if ($sysconfig{'Type'} eq "full") {
  $isldaptls="on";
} else {
  $isldaptls="off";
}


print SP<<__EOF__;
if [ ! -e /etc/apache/sogo.conf ];then
  touch /etc/apache/sogo.conf
fi;

if [ ! -d /opt/apache2 ];then
  sed -e "s/^Listen.*:80.*/Listen @idata[1]:80/"  \\
      -e "s/^Listen 80.*/Listen @idata[1]:80/" \\
      -e "s/AuthLDAPUrl ldap:\\/\\/127.0.0.1/AuthLDAPUrl ldap:\\/\\/$ldapserv{'Server'}/" \\
      -e "s/AuthLDAPBindDN uid=admin,ou=Users/AuthLDAPBindDN $ldapserv{'Login'}/" \\
      -e "s/AuthLDAPBindPassword admin/AuthLDAPBindPassword $ldapserv{'Password'}/" \\
      -e "s/AuthLDAPStartTLS on/AuthLDAPStartTLS $isldaptls/" \\
      -e "s/\(^\|^#\)ServerName.*/ServerName $fqdn/" \\
      -e "s/LOCAL_SERVER_NAME/$fqdn/" /etc/apache/httpd.conf.orig | grep -vE "(^#)" >  /tmp/httpd.conf
  HCDIFF=`diff /tmp/httpd.conf /etc/apache/httpd.conf`
 else
  sed -e "s/^Listen.*:80.*/Listen @idata[1]:80/"  \\
      -e "s/^Listen 80.*/Listen @idata[1]:80/" \\
      -e "s/AuthLDAPUrl ldap:\\/\\/127.0.0.1/AuthLDAPUrl ldap:\\/\\/$ldapserv{'Server'}/" \\
      -e "s/AuthLDAPBindDN uid=admin,ou=Users/AuthLDAPBindDN $ldapserv{'Login'}/" \\
      -e "s/AuthLDAPBindPassword admin/AuthLDAPBindPassword $ldapserv{'Password'}/" \\
      -e "s/AuthLDAPStartTLS on/AuthLDAPStartTLS $isldaptls/" \\
      -e "s/LOCAL_SERVER_NAME/$fqdn/" /opt/apache2/conf/httpd.conf.orig >  /tmp/httpd.conf.1
  if [ ! -e /opt/apache2/conf/httpd.conf ];then
    cp /opt/apache2/conf/httpd.conf.orig /opt/apache2/conf/httpd.conf
  fi;
  if [ -e /etc/httpd.conf.local ];then
     cat /tmp/httpd.conf.1 /etc/httpd.conf.local > /tmp/httpd.conf
     rm /tmp/httpd.conf.1
    else
     mv /tmp/httpd.conf.1 /tmp/httpd.conf
  fi;
  HCDIFF=`diff /tmp/httpd.conf /opt/apache2/conf/httpd.conf`
fi;
if [ "\$HCDIFF" ] && [ ! -e /etc/.install ] && [ ! -e /etc/.cdrom ];then
  if [ ! -d /opt/apache2 ];then
    apachectl stop > /dev/null 2>&1
   else
    /usr/sbin/apachectl stop > /dev/null 2>&1
  fi;
  sleep 1;
  while [ -s /var/run/httpd.pid -a "\$tflag" != "xxxxxxxxx" ] ;do 
    if [ ! -d /opt/apache2 ];then
      apachectl stop > /dev/null 2>&1;
     else
      /usr/sbin/apachectl stop > /dev/null 2>&1
    fi;
    sleep 1;
    tflag=x\$tflag;
  done


  while [ "`pidof httpd`" ] && [ "\$tflag" != "xxxxxxxxx" ];do 
    killall httpd
    sleep 1;
    tflag=x\$tflag;
  done

  if [ "`pidof httpd`" ];then
    killall -9 httpd
  fi;

  if [ -e /var/run/httpd.pid ];then
    rm /var/run/httpd.pid
  fi;

  if [ ! -d /opt/apache2 ];then
    cp /tmp/httpd.conf /etc/apache
   else
    cp /tmp/httpd.conf /opt/apache2/conf/httpd.conf
  fi;
  rm /tmp/httpd.conf

  if [ -e /etc/ipsec.d/cacerts/cacert.pem ] && [ -e /etc/openssl/server.signed.pem ] && [ ! -e /etc/.networksentry-lite ];then
    if [ ! -d /opt/apache2 ];then
      /usr/sbin/apachectl startssl  > /dev/null 2>&1
     else
      if [ ! -e /etc/apache/vhosts2 ];then
        /usr/sbin/genwebmap
      fi;
      /opt/apache2/bin/apachectl start  > /dev/null 2>&1
    fi;
   else
    /usr/sbin/apachectl stop > /dev/null 2>&1
  fi

fi;
__EOF__

  close(SP);
}

sub printldap(){
  open(SC,">slapd.conf");
  chmod(0600,"slapd.conf");
#  open(ML,">mod.ldif");
#  chmod(0600,"mod.ldif");

  @dninf=split(/\./,$dnsconf{'Domain'});
  $vsuf="";
  foreach $dndat (@dninf) {
    $vsuf.="dc=" . $dndat . ",";
  }
  chop $vsuf;
if ( -d "/etc/openldap/schema" ) {
  print SC<<__EOB__;
include         /etc/openldap/schema/core.schema
include         /etc/openldap/schema/cosine.schema
include         /etc/openldap/schema/nis.schema
include         /etc/openldap/schema/inetorgperson.schema
include         /etc/openldap/schema/misc.schema

include         /etc/openldap/schema/netscape.schema
include         /etc/openldap/schema/extension.schema
include         /etc/openldap/schema/radius.schema
include         /etc/openldap/schema/samba.schema
include         /etc/openldap/schema/sendmail.schema

modulepath /usr/libexec/openldap

__EOB__

  if ($repurl eq "" ){
    if ((( ! -e "/var/spool/ldap/usehdb" ) || (! -e "/var/spool/ldap/id2entry.bdb")) && ( -d "/var/spool/ldap" )) {
      print SC "moduleload back_bdb.la\n";
      $dbtype="bdb";
    } else {
      $dbtype="hdb";
    }
    print SC<<__EOB__;
moduleload back_hdb.la
moduleload syncprov.la
moduleload accesslog.la
__EOB__
  } else {
    print SC<<__EOB__;
moduleload back_hdb.la
moduleload syncprov.la
moduleload accesslog.la
__EOB__
  }

print SC<<__EOB__;
moduleload unique.la
moduleload refint.la
moduleload rwm.la

loglevel 0
threads 128
idletimeout 30
timelimit 180
sizelimit 1000
conn_max_pending 256

sasl-secprops none
authz-regexp uid=(.*),cn=.*,cn=.* ldap:///$vsuf??subtree?uid=\$1

allow bind_v2 bind_anon_cred bind_anon_cred
__EOB__
} else {
  print SC<<__EOB__;
include		/usr/lib/openldap/core.schema
include         /usr/lib/openldap/cosine.schema
include         /usr/lib/openldap/nis.schema
include         /usr/lib/openldap/inetorgperson.schema
include         /usr/lib/openldap/netscape.schema
include         /usr/lib/openldap/extension.schema
include         /usr/lib/openldap/radius.schema
include         /usr/lib/openldap/samba.schema
include         /usr/lib/openldap/sendmail.schema
include         /usr/lib/openldap/misc.schema
include         /usr/lib/openldap/samba_old.schema

loglevel 0
threads 128
idletimeout 180
timelimit 300

sasl-secprops none
sasl-regexp uid=admin,cn=.*,cn=.* cn=admin
sasl-regexp uid=(^[sS]-1-5-21-.*),cn=.*,cn=.* sambaSid=\$1,ou=Idmap
sasl-regexp uid=(.*),cn=.*,cn=.* uid=\$1,ou=Users
allow bind_v2 bind_anon_cred bind_anon_cred
__EOB__
}

if (($sysconfig{'Type'} eq "full") && (-e "/etc/openssl/serverkey.pem")) {
  print SC<<__EOB__;

TLSCACertificatePath /etc/ipsec.d/certs
TLSCertificateKeyFile /etc/openssl/serverkey.pem
TLSCertificateFile /etc/openssl/server.signed.pem
TLSVerifyClient never

__EOB__
}


if ($sysconfig{'Type'} eq "full") {
  $ldap = Net::LDAPS->new($repmaster,port=>"636",verify => 'none',timeout => "10");
} else {
  $ldap = Net::LDAP->new($repmaster,timeout => "10");
}

if ($ldapread eq "true") {
  $ureadaccess="by dn.regex=\"^uid=.*,ou=Users\"\n    read\n  by dn.regex=\"^sambaSID=.*,ou=Idmap\"";
} else {
  $ureadaccess="by group=\"cn=User Read Access,ou=Admin\"";
}

#if ($repdn ne "") {
#  $rootdn="cn=admin\"\n    read\n  by dn=\"" . $repdn;
#} else {
#  $rootdn="cn=admin";
#}

$rootdn=$ldapserv{'Login'} . "," . $vsuf;

print SC<<__EOB__;

#System Restricted Attributes
access to  attrs=olduid,exchangeServerAccess,sambaPasswordHistory,sambaLMPassword,sambaNTPassword,sambaAcctFlags,sambaLogonTime,sambaKickoffTime,sambaSID,sambaHomePath,sambaUserWorkstations,sambaLogoffTime,sambaHomeDrive,sambaLogonScript,sambaprofilePath,sambaPrimaryGroupSID
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by anonymous
    auth

access to  attrs=loginShell,homeDirectory,shadowMin,shadowMax,shadowInactive,shadowWarning,shadowExpire,uidNumber
  by dn="$rootdn"
   write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by anonymous
    auth

access to dn="ou=Snom"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group="cn=Voip Admin,ou=Admin"
    write
  by dn="cn=Snom,ou=Snom"
    search
  by anonymous
    auth

access to dn.regex="^cn=(.*),ou=Snom"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group="cn=Voip Admin,ou=Admin"
    write
  by dn="cn=Snom,ou=Snom"
    read
  by anonymous
    auth

access to dn="cn=Addressbooks"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by *
    read

access to dn.regex="^cn=(.*),ou=Admin"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group.regex="cn=\$1,ou=Admin"
   read
  by dn.regex="^uid=.*,ou=servers"
    read
  by anonymous
    auth

#Radius Profiles
access to dn.regex="^radiusrealm=(.*),(.*),ou=(idmap|users)" attrs=objectclass
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^radiusrealm=(.*),(.*),ou=(idmap|users)" attrs=radiusrealm
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^\$2,ou=\$3"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^radiusrealm=(.*),(.*),ou=(idmap|users)" attrs=radiusProfileDN,dialupaccess,radiusporttype,radiusframedipaddress,radiusframedmtu,radiusframedcompression,radiussimultaneoususe,radiussessiontimeout,radiusidletimeout,radiusacctinteriminterval,radiusreplyitem,radiuscheckitem,radiusServiceType,radiusFramedProtocol,radiusFramedIPNetmask,radiusAuthType,maxwebaliases,maxaliases,maxmailboxes,quotaHomeDir,quotaFileServer,quotaMailSpool,squidProxyAccess,smbServerAccess,sambapwdlastset,sambapwdmustchange,sambapwdcanchange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^\$2,ou=\$3"
    read
  by anonymous
    auth

access to dn.regex="^radiusrealm=(.*),(.*),ou=(idmap|users)"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^\$2,ou=\$3"
    read
  by anonymous
    auth

#Email Boxes
access to dn.regex="^uid=(.*),(uid|sambasid)=(.*),ou=(users|idmap)" attrs=userPassword,shadowLastChange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^\$2=\$3,ou=\$4"
    write
  by dn.regex="^uid=\$1,\$2=\$3,ou=\$4"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),(uid|sambasid)=(.*),ou=(users|idmap)" attrs=objectclass,gidnumber,uid
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^uid=\$1,\$2=\$3,ou=\$4"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^uid=(.*),(uid|sambasid)=(.*),ou=(users|idmap)" attrs=mailLocalAddress,mailRoutingAddress,mailHost
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=email"
    read
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^\$2=\$3,ou=\$4"
    write
  by dn.regex="^uid=\$1,\$2=\$3,ou=\$4"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),(uid|sambasid)=(.*),ou=(users|idmap)"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=email"
    read
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^\$2=\$3,ou=\$4"
    write
  by dn.regex="^uid=\$1,\$2=\$3,ou=\$4"
    write
  $ureadaccess
    read
  by anonymous
    auth

#Virtual Realms
access to dn.regex="^cn=(.*),ou=VAdmin" attrs=objectclass,cn
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$1,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=.*,o=\$1,ou=users"
    search
  by anonymous
    auth


access to dn.regex="^cn=(.*),ou=VAdmin" attrs=maxwebaliases,maxaliases,maxmailboxes,squidProxyAccess,smbServerAccess,radiusRealm,quotaFileServer,quotaMailSpool,quotaHomeDir,dialupaccess,radiusporttype,radiusframedipaddress,radiusframedmtu,radiusframedcompression,radiussimultaneoususe,radiussessiontimeout,radiusidletimeout,radiusacctinteriminterval,radiusreplyitem,radiuscheckitem,radiusServiceType,radiusFramedProtocol,radiusFramedIPNetmask,radiusAuthType
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$1,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=.*,o=\$1,ou=users"
    read
  by anonymous
    auth

access to dn.regex="^cn=(.*),ou=VAdmin" attrs=member
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$1,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by anonymous
    auth

access to dn.regex="^cn=(.*),ou=VAdmin"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$1,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=.*,o=\$1,ou=users"
    read
  by anonymous
    auth

access to dn.regex="^o=(.*),ou=Users"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$1,ou=VAdmin"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=objectclass
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=sn,givenName,mail,preferredLanguage,initials,ipHostNumber,description,physicalDeliveryOfficeName,postalAddress,postalCode,title,homePostalAddress,pager,conferenceInformation,ou,o,st,l,comment,URL,c,jpegPhoto
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=telephoneNumber,facsimileTelephoneNumber,homePhone,otherFacsimiletelephoneNumber,mobile,IPPhone
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  by dn="cn=Snom,ou=Snom"
    read
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=displayName,cn
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=radiusProfileDN,dialupaccess,radiusRealm,quotaFileServer,quotaMailSpool,quotaHomeDir,dialupaccess,radiusporttype,radiusframedipaddress,radiusframedmtu,radiusframedcompression,radiussimultaneoususe,radiussessiontimeout,radiusidletimeout,radiusacctinteriminterval,radiusreplyitem,radiuscheckitem,radiusServiceType,radiusFramedProtocol,radiusFramedIPNetmask,radiusAuthType,maxwebaliases,maxaliases,maxmailboxes,quotaHomeDir,quotaFileServer,quotaMailSpool,squidProxyAccess,smbServerAccess,sambapwdlastset,sambapwdmustchange,sambapwdcanchange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=mailLocalAddress,mailRoutingAddress,mailHost
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  by dn.regex="^uid=.*,ou=email"
    read
  by dn.regex="^uid=.*,ou=servers"
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=outOfOfficeMSG,outOfOfficeActive,hostedSite,clearpassword,hostedFPSite
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=sambapwdcanchange,sambapwdlastset,sambapwdmustchange,accountSuspended,quotachanged
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=certificateRequest,certificatesign,userCertificate,userPassword,shadowLastChange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=userSMIMECertificate,userPKCS12
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users" attrs=gidnumber,uid
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    read
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^uid=\$1,o=\$2,ou=Users"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^uid=(.*),o=(.*),ou=Users"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group/virtZoneSettings.regex="cn=\$2,ou=VAdmin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=.*,ou=email"
    read
  by dn="cn=Snom,ou=Snom"
    read
  by dn.regex="^uid=\$1,o=\$2,ou=users"
    write
  $ureadaccess
    read
  by anonymous
    auth

#PDC Users
access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=objectClass
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=sn,givenName,mail,preferredLanguage,initials,ipHostNumber,description,physicalDeliveryOfficeName,postalAddress,postalCode,title,homePostalAddress,pager,conferenceInformation,ou,o,st,l,comment,URL,c,jpegPhoto
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=telephoneNumber,facsimileTelephoneNumber,homePhone,otherFacsimiletelephoneNumber,mobile,IPPhone
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn="cn=Snom,ou=Snom"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=displayName,cn
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=radiusProfileDN,radiusrealm,dialupaccess,radiusporttype,radiusframedipaddress,radiusframedmtu,radiusframedcompression,radiussimultaneoususe,radiussessiontimeout,radiusidletimeout,radiusacctinteriminterval,radiusreplyitem,radiuscheckitem,radiusServiceType,radiusFramedProtocol,radiusFramedIPNetmask,radiusAuthType,maxwebaliases,maxaliases,maxmailboxes,quotaHomeDir,quotaFileServer,quotaMailSpool,squidProxyAccess,smbServerAccess,sambapwdlastset,sambapwdmustchange,sambapwdcanchange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    read
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=mailLocalAddress,mailRoutingAddress,mailHost
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^uid=.*,ou=Email"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=outOfOfficeMSG,outOfOfficeActive,hostedSite,clearpassword,hostedFPSite
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=sambapwdcanchange,sambapwdlastset,sambapwdmustchange,accountSuspended,quotachanged
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    read
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=certificateRequest,certificatesign,userCertificate,userPassword,shadowLastChange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=userSMIMECertificate,userPKCS12
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap" attrs=gidnumber,uid
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^sambaSID=(.*),ou=Idmap"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=.*,ou=email"
    read
  by dn="cn=Snom,ou=Snom"
    read
  by dn.regex="^sambaSID=\$1,ou=Idmap"
    write
  $ureadaccess
    read
  by anonymous
    auth

#System Users
access to dn.regex="^uid=(.*),ou=Users" attrs=objectClass
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^uid=\$1,ou=Users"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=sn,givenName,mail,initials,preferredLanguage,ipHostNumber,description,physicalDeliveryOfficeName,postalAddress,postalCode,title,homePostalAddress,pager,conferenceInformation,ou,o,st,l,comment,URL,c,jpegPhoto
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=\$1,ou=Users"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=telephoneNumber,facsimileTelephoneNumber,homePhone,otherFacsimiletelephoneNumber,mobile,IPPhone
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn="cn=Snom,ou=Snom"
    read
  by dn.regex="^uid=\$1,ou=Users"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=displayName,cn
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^uid=\$1,ou=Users"
    write
  $ureadaccess
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=radiusProfileDN,radiusrealm,dialupaccess,radiusporttype,radiusframedipaddress,radiusframedmtu,radiusframedcompression,radiussimultaneoususe,radiussessiontimeout,radiusidletimeout,radiusacctinteriminterval,radiusreplyitem,radiuscheckitem,radiusServiceType,radiusFramedProtocol,radiusFramedIPNetmask,radiusAuthType,maxwebaliases,maxaliases,maxmailboxes,quotaHomeDir,quotaFileServer,quotaMailSpool,squidProxyAccess,smbServerAccess,sambapwdlastset,sambapwdmustchange,sambapwdcanchange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=\$1,ou=Users"
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=mailLocalAddress,mailRoutingAddress,mailHost
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^uid=.*,ou=Email"
    read
  by dn.regex="^uid=\$1,ou=Users"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=outOfOfficeMSG,outOfOfficeActive,hostedSite,clearpassword,hostedFPSite
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=\$1,ou=Users"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=sambapwdcanchange,sambapwdlastset,sambapwdmustchange,accountSuspended,quotachanged
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^uid=\$1,ou=Users"
    read
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=certificateRequest,certificatesign,userCertificate,userPassword,shadowLastChange
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by dn.regex="^uid=\$1,ou=Users"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=userSMIMECertificate,userPKCS12
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=\$1,ou=Users"
    write
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=Users" attrs=gidnumber,uid
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=Servers"
    read
  by dn.regex="^uid=\$1,ou=Users"
    read
  by *
    search
  by anonymous
    auth

access to dn.regex="^uid=(.*),ou=users"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    read
  by dn.regex="^uid=.*,ou=email"
    read
  by dn="cn=Snom,ou=Snom"
    read
  by dn.regex="^uid=\$1,ou=users"
    write
  $ureadaccess
    read
  by anonymous
    auth

#Restrict Access To Objectclass
access to attrs=objectclass
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by *
    search
  by anonymous
    auth


access to dn="cn=Domain"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by anonymous
    auth

access to dn.regex="^sambaDomainName=.*"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by anonymous
    auth

access to dn.regex="^uid=.*,ou=trusts"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=servers"
    write
  by anonymous
    auth

access to dn.regex="^uid=.*,ou=servers"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by anonymous
    auth

#Email Server Restricted Access
access to dn.regex="^uid=.*,ou=Email"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by anonymous
    auth

access to dn.regex="^sendmailMTAClassName=(LDAPRoute|R),ou=Email"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by *
    read
  by anonymous
    auth

access to dn.regex="^.*,ou=Email"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by dn.regex="^uid=.*,ou=email"
    read
  by dn.regex="^uid=.*,ou=servers"
    read
  by anonymous
    auth

__EOB__

  foreach $abook (@ldapbook) {
    print SC<<__EOB__;
access to dn="cn=Users,cn=$abook"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group="cn=Users,cn=$abook"
    write
  by anonymous
    auth

access to dn="ou=Entries,cn=$abook"
  by dn="$rootdn"
    write
  by dn="cn=Snom,ou=Snom"
    read
  by group="cn=Admin Access,ou=Admin"
    write
  by group="cn=Users,cn=$abook"
    write
__EOB__
    if ($ldapanon{$abook} eq "true") {
      print SC<<__EOB__;
  by dn.regex="uid=.*,ou=Users"
    read
__EOB__
    }
    print SC<<__EOB__;
  by anonymous
    auth

access to dn="cn=$abook"
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by group="cn=Users,cn=$abook"
    write
  by anonymous
    auth

__EOB__
  }

print SC<<__EOB__;
access to dn.regex="^(cn|ou)=[a-zA-Z0-9]+" attrs=entry
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by *
    search
  by anonymous
    auth

access to *
  by dn="$rootdn"
    write
  by group="cn=Admin Access,ou=Admin"
    write
  by anonymous
    auth
  by *
    read
__EOB__
    
print SC<<__EOB__;

pidfile		/var/run/slapd.pid
argsfile	/var/run/slapd.args

password-hash {CRYPT}
password-crypt-salt-format \$1\$\%.8s

__EOB__

#  if ($repurl eq "" ){
    print SC<<__EOB__;
database        hdb
suffix          "ou=Log"
directory       /var/log/ldap
rootdn          uid=admin,ou=Log
rootpw          $ldapserv{'Password'}
index           default eq
index           entryCSN,objectClass,reqEnd,reqResult,reqStart eq
index           reqDN               eq

overlay syncprov
syncprov-nopresent TRUE
syncprov-reloadhint TRUE 

__EOB__
#  }

  if ( -e "/root/slapd.local") {
    print SC "include /root/slapd.local\n\n";
  }

  if ($repurl eq "" ){
    print SC<<__EOB__;
database        $dbtype
__EOB__
  } else {
    print SC<<__EOB__;
database        hdb
__EOB__
  }

  print SC<<__EOB__;
suffix		""
directory	/var/spool/ldap
lastmod         on
rootdn          $ldapserv{'Login'}
rootpw          $ldapserv{'Password'}
cachesize	10000
cachefree	10
idlcachesize	30000

index           uid                     pres,sub,eq
index           uidNumber               pres,eq
index           gidNumber               pres,eq
index           memberUid               eq
index	        radiusRealm		eq
index           cn                      pres,eq,sub
index           sn                      pres,eq,sub
index           displayName             pres,sub,eq
index           email                   pres,sub,eq
index           givenName               pres,sub,eq
index           objectClass             eq
index           entryUUID               eq
index           contextCSN              eq
index           entryCSN                eq
index           sambaSID                pres,sub,eq
index           sambaPrimaryGroupSID    eq
index           sambaDomainName         eq
index           default                 sub
index           certificateSign         eq
index           certificateRequest      pres
index           outOfOfficeActive       eq
index           exchangeserveraccess    eq
index           sendmailMTAKey          eq,sub
index           accountSuspended        eq
index           mailLocalAddress        eq,sub
index           sambaGroupType          eq
index           sambaSIDList            eq
index		sendmailMTAClassName    eq
index		sendmailMTACluster      eq
index		sendmailMTAHost         eq
index		sendmailMTAMapName      eq
index           sendmailMTAAliasGrouping eq
index           sendmailMTAAliasValue  eq
index           member                  pres,eq

__EOB__

  if ( -d "/etc/openldap/schema" ) {
    print SC<<__EOB__;
overlay refint
refint_attributes member
refint_nothing uid=admin,ou=Users

overlay unique
unique_base $vsuf
unique_attributes uid uidNumber mailLocalAddress
#unique_strict

overlay rwm
rwm-rewriteEngine on
rwm-rewriteContext defaulti
rwm-rewriteContext searchDN alias defaulti
rwm-rewriteContext bindDN alias defaulti
rwm-rewriteContext searchFilterAttrDN alias defaulti
rwm-rewriteContext compareDN alias defaulti
rwm-rewriteContext compareAttrDN alias defaulti
rwm-rewriteContext addDN alias defaulti
rwm-rewriteContext modifyDN alias defaulti
rwm-rewriteContext modrDN alias defaulti
rwm-rewriteContext newSuperiorDN alias defaulti
rwm-rewriteContext deleteDN alias defaulti
rwm-rewriteContext exopPasswdDN alias defaulti
#rwm-rewriteContext addAttrDN alias defaulti
#rwm-rewriteContext modifyAttrDN alias defaulti
#rwm-rewriteContext searchFilter alias defaulti
#rwm-rewriteContext referralAttrDN alias defaulti
rwm-rewriteRule "(.+),$vsuf\$" "\$1" ":@"
rwm-rewriteRule "^$vsuf\$" "" ":@"

rwm-rewriteContext defaulto
rwm-rewriteContext searchEntryDN alias defaulto
rwm-rewriteContext matchedDN alias defaulto
#rwm-rewriteContext searchAttrDN alias defaulto
#rwm-rewriteContext referralDN alias defaulto
rwm-rewriteRule "^dc=(.+)" "dc=\$1" ":@"
rwm-rewriteRule "^(.+),$vsuf\$" "\$1,$vsuf" ":@"
rwm-rewriteRule "(.+)" "\$1,$vsuf" ":@"

__EOB__
  }

    print SC<<__EOB__;
overlay syncprov
syncprov-checkpoint 100 10

__EOB__

#  if ($repurl eq "" ){
    print SC<<__EOB__;
overlay accesslog
logdb ou=Log
logops writes
logsuccess FALSE
logpurge 7+00:00 00+04:00

__EOB__
#  }


#              logfilter="(&(objectClass=auditWriteObject)(reqResult=0))"
#              logbase="cn=accesslog"
#              syncdata=accesslog 

  open(SR,">ldap.replica");
  if ($repurl ne "" ){
    print SR $syncreplsid  . "\n";
    print SC<<__EOB__;
syncrepl        rid=$syncreplsid
                provider=$repurl
                type=refreshAndPersist
                retry="60 +"
                searchbase=""
                schemachecking=on
                bindmethod=simple
                binddn="$ldapserv{'Login'}"
                credentials=$ldapserv{'Password'}
                logbase="ou=Log"
                logfilter="(&(objectClass=auditWriteObject)(reqResult=0))"
                syncdata=accesslog

updateref       $repurl
__EOB__
  }
  close(SR);
  close(SC);
}

sub printrcmail(){
  open(RM,">rc.mail");
  chmod(0600,"rc.mail");
  print RM "#!/bin/bash\n\n";
  $qm=lc($mailconf{'Delivery'});
  if ($qm eq "background") {
    $qm="queue";
  }

  open(PMRP,">procmailrc.pub");
  chmod(0600,"procmailrc.pub");


  print PMRP<<__EOB__;
MAILDIR=/var/spool/mail/shared/.Administrators/
DEFAULT=\$MAILDIR
UMASK=0007
__EOB__

  print RM<<__EOB__;
/usr/sbin/socktest 127.0.0.1 25 >/dev/null 2>&1
if [ \$? != 0 ];then
  /usr/bin/killall -9 sendmail
fi

DROPACL=0;

#Create Public Mail Folders
if [ ! -d /var/spool/mail/shared ] || [ "`ls -ld /var/spool/mail/shared |awk '{print \$3"."\$4}'`" != "bin.users" ];then
  if [ ! -d /var/spool/mail/shared ];then
    mkdir -m 2775 /var/spool/mail/shared
  fi;
  chown bin.users /var/spool/mail/shared
  touch /var/spool/mail/shared/dovecot-shared
  chown bin.users /var/spool/mail/shared/dovecot-shared
  chmod 660 /var/spool/mail/shared/dovecot-shared
fi;

if [ ! -d /var/spool/mail/shared/.Administrators ] || [ "`ls -ld /var/spool/mail/shared/.Administrators |awk '{print \$3"."\$4}'`" != "bin.smbadm" ];then
  if [ ! -d /var/spool/mail/shared/.Administrators ];then
    mkdir -m 2770 /var/spool/mail/shared/.Administrators
  fi;
  chown bin.smbadm /var/spool/mail/shared/.Administrators

  touch /var/spool/mail/shared/.Administrators/dovecot-shared
  chown bin.smbadm /var/spool/mail/shared/.Administrators/dovecot-shared
  chmod 660 /var/spool/mail/shared/.Administrators/dovecot-shared

  for mbox in cur new tmp;do
    if [ ! -d /var/spool/mail/shared/.Administrators/\${mbox} ];then
      mkdir -m 2770 /var/spool/mail/shared/.Administrators/\${mbox}
    fi;
    chown bin.smbadm /var/spool/mail/shared/.Administrators/\${mbox}
  done;
  if [ -e /var/spool/mail/shared/.Administrators/dovecot-acl ];then
    rm /var/spool/mail/shared/.Administrators/dovecot-acl
  fi;
fi;

if [ ! -e /var/spool/mail/shared/.Administrators/dovecot-acl ];then
  echo "group=smbadm lrwstipex" > /var/spool/mail/shared/.Administrators/dovecot-acl
  chown bin.smbadm /var/spool/mail/shared/.Administrators/dovecot-acl
  DROPACL=1
fi;

__EOB__

  if ($ldap ne "") {
    $ldap->bind($ldapserv{'Login'},password => $ldapserv{'Password'});
    $mesg = $ldap->search(base=>"ou=email",filter =>"(&(description=*)(sendmailMTAAliasValue=pubbox))",attrs=>['sendmailMTAKey','description']);
    while($entry = $mesg->shift_entry) {
      @mbdat=split(/:/,$entry->get_value("description"));
      $alptr=$entry->get_value("sendmailMTAKey");
      if (($alptr ne "root") && (@mbdat[1] ne "")) {
        print PMRP<<__EOB__;

:0 H
* (Envelope-To):.*\\<$alptr@.*
"/var/spool/mail/shared/.@mbdat[0]/"
__EOB__
      print RM<<__EOB__;
if [ ! -d "/var/spool/mail/shared/.@mbdat[0]" ] || [ "`ls -ld "/var/spool/mail/shared/.@mbdat[0]" |awk '{print \$3"."\$4}'`" != "bin.@mbdat[1]" ];then
  if [ ! -d "/var/spool/mail/shared/.@mbdat[0]" ];then
    mkdir -m 2770 "/var/spool/mail/shared/.@mbdat[0]"
  fi;
  chown bin.@mbdat[1] "/var/spool/mail/shared/.@mbdat[0]"

  touch "/var/spool/mail/shared/.@mbdat[0]/dovecot-shared"
  chown bin.@mbdat[1] "/var/spool/mail/shared/.@mbdat[0]/dovecot-shared"
  chmod 660 "/var/spool/mail/shared/.@mbdat[0]/dovecot-shared"

  for mbox in cur new tmp;do
    if [ ! -d "/var/spool/mail/shared/.@mbdat[0]/\${mbox}" ];then
      mkdir -m 2770 "/var/spool/mail/shared/.@mbdat[0]/\${mbox}"
    fi;
    chown bin.@mbdat[1] "/var/spool/mail/shared/.@mbdat[0]/\${mbox}"
  done;
  if [ -e "/var/spool/mail/shared/.@mbdat[0]/dovecot-acl" ];then
    rm "/var/spool/mail/shared/.@mbdat[0]/dovecot-acl"
  fi;
fi;

if [ ! -e "/var/spool/mail/shared/.@mbdat[0]/dovecot-acl" ];then
  echo "group=@mbdat[1] lrwstipex" > "/var/spool/mail/shared/.@mbdat[0]/dovecot-acl"
  chown bin.@mbdat[1] "/var/spool/mail/shared/.@mbdat[0]/dovecot-acl"
  DROPACL=1
fi;

__EOB__
      }
    }
    $ldap->unbind;
  }
print RM <<__EOB__;
if [ \${DROPACL} == 1 ] && [ -e /var/spool/mail/shared/dovecot-acl-list ];then
  rm /var/spool/mail/shared/dovecot-acl-list
fi;

if [ ! \"`/bin/pidof sendmail`\" ];then
  #Check Statistics File
  if [ ! -e /var/db/sendmail.statistics ];then
    mv /etc/mail/statistics /var/db/sendmail.statistics
    ln -s /var/db/sendmail.statistics /etc/mail/statistics
  fi;
__EOB__

  if ($mailconf{'AntiVirus'} eq "Trend") {
    print RM "  /etc/iscan/sendmail";
  } elsif (($mailconf{'AntiVirus'} eq "Sophos") || ($mailconf{'AntiVirus'} eq "Clam")) {
    print RM "  /usr/sbin/sendmail -bd -ODeliveryMode=$qm -OQueueDirectory=/var/spool/mqueue.in > /dev/null 2>&1 &";
__EOB__
  } else {
    if ($mailconf{'Redirect'} eq "") {
      print RM "  /usr/sbin/sendmail -bd -ODeliveryMode=$qm -OQueueDirectory=/var/spool/mqueue.in > /dev/null 2>&1 &";
    }
  }


  if ( -e "/usr/sbin/dovecot") {
    print RM "\n\nfi;\n\n#Startup POP3/IMAP Service\n";
    print RM "if [ ! -e /etc/dovecot.passwd ];then\n";
    print RM "  touch /etc/dovecot.passwd\n";
    print RM "fi\n\n";

    print RM "if [ ! -d /var/lib/dovecot/shared ];then\n";
    print RM "  mkdir -p /var/lib/dovecot/shared;\n";
    print RM "  chmod 777 /var/lib/dovecot/shared;\n";
    print RM "fi\n\n";

    print RM "if [ ! -e /var/lib/dovecot/shared/mailboxes.db ];then\n";
    print RM "  touch /var/lib/dovecot/shared/mailboxes.db;\n";
    print RM "  chown smmsp.mail /var/lib/dovecot/shared/mailboxes.db;\n";
    print RM "  chmod 660 /var/lib/dovecot/shared/mailboxes.db;\n";
    print RM "  setfacl -m g:users:rX /var/lib/dovecot\n";
    print RM "  setfacl -m g:users:rw /var/lib/dovecot/shared/mailboxes.db\n";
    print RM "  if [ \"\$?\" != 0 ];then\n";
    print RM "    sed -e \"s/ext3\\([\\t ]*\\)defaults\\([\\t ]\\)\\(.*\\)/ext3\\1defaults,acl\\2\\3/\" /etc/fstab > /tmp/fstab.acl\n";
    print RM "    if [ \"`diff -u /tmp/fstab.acl /etc/fstab`\" ];then\n";
    print RM "      grep -E \"ext3.*defaults,acl\" /tmp/fstab.acl |awk '{printf \"mount %s -o remount,acl\\n\",\$2}' |sh\n";
    print RM "      cp /tmp/fstab.acl /etc/fstab\n";
    print RM "      /usr/sbin/setmacl >/dev/null 2>&1\n";
    print RM "    fi;\n";
    print RM "  fi\n";
    print RM "fi\n\n";

    print RM "if [ /etc/dovecot.conf -nt /var/run/dovecot/master.pid ];then\n";
    print RM "  (killall dovecot;\n";
    print RM "  sleep 3;\n";
    print RM "  killall -9 dovecot) > /dev/null 2>&1\n";
    print RM "fi\n\n";

    print RM "if [ ! \"`/bin/pidof dovecot`\" ] && [ \"\$1\" != \"sendmail\" ];then\n";
    print RM "  if [ -e /var/run/dovecot/master.pid ];then\n";
    print RM "    rm /var/run/dovecot/master.pid\n";
    print RM "  fi;\n\n";
    print RM "  /usr/sbin/dovecot-wrap\n";
    print RM " else if  [ \"\$1\" != \"sendmail\" ] && [ /etc/dovecot-example.conf -nt /etc/dovecot.conf ];then\n";
    print RM "    kill `cat /var/run/dovecot/master.pid`;\n";
    print RM "    touch /etc/dovecot.conf;\n";
    print RM "    /usr/sbin/dovecot-wrap\n";
    print RM "  fi\n";
    print RM "fi;\n\n";

    print RM "if [ ! -e /etc/dovecot-sogo.conf ] || [ /etc/dovecot.conf -nt /etc/dovecot-sogo.conf ];then\n";
    print RM "  sed -e \"s/^[ \\t]*ssl_listen.*\$/#/\" \\\n";
    print RM "      -e \"s/^\\([ \\t]*listen = \\).*/\\1127.0.0.1:286/\" \\\n";
    print RM "      -e \"s/^\\([ \\t]*args = session=yes cache_key=\\\%u\\).*/\\1 sogo-\%Ls/\" \\\n";
    print RM "      -e \"s/^\\(protocols = imap\\).*\$/\\1/\" \\\n";
    print RM "      -e \"s/^\\(.*path = \\/var\\/run\\/dovecot\\)\\/auth-master\$/\\1-sogo\\/auth-master/\" \\\n";
    print RM "      -e \"s/^\\(base_dir.*\\)/\\1-sogo/\" /etc/dovecot.conf |grep -vE \"^#\" > /etc/dovecot-sogo.conf\n";
    print RM "  (killall dovecot-sogo;\n";
    print RM "  sleep 3;\n";
    print RM "  killall -9 dovecot-sogo) > /dev/null 2>&1\n";
    print RM "fi\n\n";

    print RM "if [ -e /etc/dovecot-sogo.conf ] && [ ! \"`/bin/pidof dovecot-sogo`\" ] && [ \"\$1\" != \"sendmail\" ];then\n";
    print RM "  if [ -e /var/run/dovecot-sogo/master.pid ];then\n";
    print RM "    rm /var/run/dovecot-sogo/master.pid\n";
    print RM "  fi;\n\n";
    print RM "  /usr/sbin/dovecot-wrap sogo\n";
    print RM "fi;\n";
  } else {
    print RM "\n\nfi;\n\n\nif [ ! \"`/bin/pidof popper`\" ] && [ \"\$1\" != \"sendmail\" ];then\n";
    if ($sysconfig{'Type'} ne "full") {
      @idata=split(/\|/,$interface{'eth0'});
      print RM "  #Startup POP 3 Service\n/usr/sbin/popper @idata[1]:110\n";
    } else {
      @idata=split(/\|/,$interface{$sysconf{'Internal'}});
      print RM "  #Startup POP 3 Service\n";
      print RM "  /usr/sbin/popper @idata[1]:995 -l 2 -f /etc/popper.conf\n";
      print RM "  /usr/sbin/popper @idata[1]:110 -l 1 -f /etc/popper.conf\n";
    }
    print RM "fi;\n";
  }
  print RM "\n/usr/sbin/safe_sogo\n";
  close(RM); 
}

sub printrcppp(){
  sub startexadsl(){
      $lcnt=0;
      foreach $alink (@vadsllink) {
        $lcnt++;
        @ldata=split(/\|/,$adsllink{$alink});
        $servname="";
        if (@ldata[7] ne "") {
          @ldata[7]=join(" ",split(/_/,@ldata[7]));
          ($server,$service)=split(/\//,@ldata[7]);
          if ($service eq "") {
            $servname=" rp_pppoe_service \"$server\"";
          } else {
            $servname=" rp_pppoe_service \"$service\" rp_pppoe_ac \"$server\"";
          }
        }
#        print RP<<__EOB__;
##Starting Up @ldata[0] Link
#PID_@ldata[0]=`/bin/ps axww |grep pppd |grep "linkname @ldata[0]" |awk '{print \$1}'`
#if [ ! "\$LTEST" ];then
#  SR=`/sbin/ip addr show ppp$lcnt |tail -1 |cut -d/ -f1 |awk '{print "ping -c 3 "\$4}' |sh |grep "packet loss" |awk '{print \$7}'`
# else
#  /sbin/ip route add $mdmconf{'LinkTest'} dev ppp$lcnt table local
#  if [ \$? != "0" ];then
#    SR="Err";
#   else
#    SR=`dig \$LTEST |grep -E "(^;;.*timed out)"`
#  fi;
#  /sbin/ip route del $mdmconf{'LinkTest'} table local
#  /sbin/ip route flush cache
#fi;
#if [ "\$SR" != "" ] && [ "\$SR" != "0%" ];then
#  if [ "\$PID_@ldata[0]" ];then
#    kill \$PID_@ldata[0];
#    sleep 10
#    kill -9 \$PID_@ldata[0];
#    sleep 10
#  fi;
#  if [ -e /var/run/ppp-@ldata[0].pid ];then
#    rm /var/run/ppp-@ldata[0].pid
#  fi;
#fi;

        open(PUE,">pppup.ppp$lcnt");
        chmod(0600,"pppup.ppp$lcnt");
	$pppdev="ppp" . $lcnt;
        print PUE "#!/bin/bash\n\n";
        print PUE "sleep 2\n";
        print PUE "if [ ! \"`/sbin/ip addr show ppp$lcnt |grep UP`\" ];then\n";
        chop $ppptun{$pppdev};
	@ppptdat=split(/ /,$ppptun{$pppdev});
        foreach $ppptdev (@ppptdat) {
          print PUE "  /sbin/ip tun del " . $ppptdev  . "\n";
        }
        print PUE "  if [ -e /var/run/ppp$lcnt.pid ];then\n";
        print PUE "    /usr/bin/kill -9 `cat /var/run/ppp$lcnt.pid`\n";
        print PUE "    /usr/bin/sleep 5\n";
        print PUE "  fi\n";
        print PUE "  /bin/ps axww |grep \"unit $lcnt\" |awk '{printf \"kill -9 %s;sleep 2\\n\",\$1}' |sh\n";
        print PUE "  rm /var/log/pppd.log.$lcnt\n";
        print PUE "  date > /var/log/pppd.log.$lcnt\n";
        print PUE "  /usr/sbin/pppd sync plugin rp-pppoe.so @ldata[6] unit $lcnt logfile /var/log/pppd.log.$lcnt mru $mdmconf{'MTU'} mtu $mdmconf{'MTU'} linkname @ldata[0] user @ldata[1] ipparam @ldata[0] nodefaultroute noauth persist nomultilink$servname nodetach";
        if (@ldata[8] ne "") {
          print PUE " endpoint IP:@ldata[8]";
        }
        print PUE " &\n";
        print PUE "fi;\n";
        close(PUE);

        print RP<<__EOB__;

#Wait For Default Gateway
while [ ! "`/sbin/ip route list 0/0 table 90 2> /dev/null`" ] && [ "\${GWCHK}" != "XXXXX" ];do
  sleep 5;
  GWCHK="\${GWCHK}X";
done;

if [ "\${GWCHK}" = "XXXXXXXXXX" ];then
__EOB__
#  if ($sysconf{'External'} eq "Dialup") {
#    print RP "  /usr/bin/killall -9 pppd\n";
#    print RP "  /usr/bin/killall -9 racoon\n";
#    print RP "  rm /var/racoon/racoon.sock\n";
#  }
print RP<<__EOB__;
  if [ -e /var/run/netsentry-pppup ];then
    rm /var/run/netsentry-pppup
  fi;
  exit;
fi;

#Starting Up @ldata[0] Link
if [ ! "`/sbin/ip addr show ppp$lcnt |grep UP`" ];then
  if [ ! -e /var/run/ppp-reroute ];then
    touch /var/run/ppp-reroute
  fi;
  /etc/ifconf/pppup.ppp$lcnt
 else
  #Become Default If There Is No Default
  DEST=`/sbin/ip addr show dev ppp$lcnt |tail -1 |awk '\$3 == "peer" {print \$4}' |cut -d/ -f1`
  ADDR=`/sbin/ip addr show dev ppp$lcnt |tail -1 |awk '\$1 == "inet" {print \$2}' |cut -d/ -f1`
  CURDEF=`/sbin/ip route list 0/0 table 90 |awk '{print \$3}'`
  if [ ! "\$CURDEF" ];then
    /etc/ppp/ip-up ppp$lcnt - - \$ADDR \$DEST;
    /sbin/ip route add 0/0 via \$DEST dev ppp$lcnt table 90;
    /sbin/ip route flush cache
  fi
fi;

__EOB__
    }
  }

  sub startlinktest(){
    local($defgw)=@_;
    if ($defgw eq "ppp0") {
      $defgwip="\`/sbin/ip addr show dev ethB |tail -1 |awk '\$3 == \"peer\" {print \$4}' |cut -d/ -f1\`";
    } else {
      $defgwip=$sysconf{'Nexthop'};
    }
    if (($defgw eq "ppp0") || ($defgw eq $sysconf{'External'})) {
      print RP <<__EOB__;
#Become Default If Possible
CURDEF=`/sbin/ip route list 0/0 table 90 |awk '{print \$5}'`
if [ "`/sbin/ip link show $defgw`" ] && [ "\$CURDEF" != "$defgw" ];then
  DEST=$defgwip
  if [ "\$DEST" ];then
    /sbin/ip route del 0/0 table 90;
    /sbin/ip route add 0/0 via \$DEST dev $defgw table 90;
    /sbin/ip route flush cache
  fi
fi;

__EOB__
#PID_main=`/bin/ps axww |grep pppd |grep "linkname main" |awk '{print \$1}'`
    }
#    print RP <<__EOB__;
#
##Test The Link
#if [ ! "\$LTEST" ];then
#  SR=`/sbin/ip addr show $defgw | grep -w inet |cut -d/ -f1 |awk '{print "ping -c 3 "\$2}' |sh |grep "packet loss" |awk '{print \$7}'`
# else
#  /sbin/ip route add $mdmconf{'LinkTest'} dev $defgw table local
#  if [ \$? != "0" ];then
#    SR="Err";
#   else
#    SR=`dig \$LTEST |grep -E "(^;;.*timed out)"`
#  fi;
#  /sbin/ip route del $mdmconf{'LinkTest'} table local> /dev/null 2>&1
#  /sbin/ip route flush cache
#fi;
#
#__EOB__

#    if ($defgw eq "ppp0") {
#      print RP <<__EOB__;
##Shut Down Primary Link If Error/Not Default
#if [ "\$SR" != "" ] && [ "\$SR" != "0%" ];then
#  if [ "\$PID_main" ];then
#    kill \$PID_main;
#    sleep 10
#    kill -9 \$PID_main;
#    sleep 10
#  fi;
#  if [ -e /var/run/ppp-main.pid ];then
#    rm /var/run/ppp-main.pid
#  fi;
#fi;
#__EOB__
#    } else {
#      print RP <<__EOB__;
##Remove Default If Error
#if [ "\$SR" != "" ] && [ "\$SR" != "0%" ] && [ "\$CURDEF" == "$defgw" ];then
#  ip route del 0/0
#  /sbin/ip route flush cache
#fi;
#__EOB__
#    }
  }

  open(RP,">rc.ppp");
  chmod(0600,"rc.ppp");
  print RP "#!/bin/bash\n\n";

      print RP<<__EOB__;
#Kill Any Zombie Dialup Links
CHATPID=`/bin/pidof chat`
if [ "\$CHATPID" ];then
  ps ax |grep chat |awk '\$3 == "Z" {print "killall pppd;sleep 5;killall -9 pppd"}' |sh
  exit
fi;

#Kill Any IP Up Scripts Still Running
#ps ax |grep "/etc/ppp/ip-up" |grep -v grep |awk '{printf "kill -9 %s\\n",\$1}' |sh

#Lock The Script
if [ -e /var/run/netsentry-pppup ];then
  PID=`tail -1 /var/run/netsentry-pppup`
  if [ -d /proc/\$PID ];then
    exit
   else
    echo \$\$ > /var/run/netsentry-pppup
  fi;
 else
  echo \$\$ > /var/run/netsentry-pppup
fi;

__EOB__
  
#  if ($mdmconf{'LinkTest'} ne "") {
#    @ipdat=split(/\./,$mdmconf{'LinkTest'});
#    print RP "LTEST=\"\@$mdmconf{'LinkTest'} @ipdat[3].@ipdat[2].@ipdat[1].@ipdat[0].in-addr.arpa PTR IN +tries=5 +short\"\n\n";
#  }


  if ($sysconf{'External'} eq "Dialup") {
    &startlinktest("ppp0");
    print RP<<__EOB__;
#Starting Primary Link
if [ ! "`/sbin/ip addr show ppp0 |grep UP`" ];then
  if [ ! -e /var/run/ppp-reroute ];then
    touch /var/run/ppp-reroute
  fi;
  /etc/ifconf/pppup.ppp0
  /usr/sbin/servconfig
 else
  /usr/sbin/servconfig
fi;

__EOB__
  } else {
    &startlinktest($sysconf{'External'});
  }

  open(PU3G,">pppup.ppp3g");
  chmod(0600,"pppup.ppp3g");

  print PU3G "#!/bin/bash\n\n";

  if (($mdmconf{'Connection'} eq "3G") && ($sysconf{'External'} eq "Dialup")) {
    print PU3G "exit\n";
  } else {
    print PU3G "sleep 2\n";
    print PU3G "if [ ! \"`/sbin/ip addr show ppp10 |grep UP`\" ] && [ -e /dev/tts/GSM0 ];then\n";
    print PU3G "  if [ -e /var/run/ppp10.pid ];then\n";
    print PU3G "    kill `cat /var/run/ppp10.pid`\n";
    print PU3G "    sleep 5\n";
    print PU3G "  fi;\n";
    print PU3G "  /bin/ps axww |grep \"unit 10\" |awk '{printf \"kill -9 %s;sleep 2\\n\",\$1}' |sh\n";
    print PU3G "  rm /var/log/pppd.log.3g\n";
    print PU3G "  date > /var/log/pppd.log.3g\n";
    print PU3G "  /usr/sbin/pppd /dev/tts/GSM0 connect \"/usr/sbin/chat -v -f /etc/ppp/diald.3g\" maxfail 5 unit 10 logfile /var/log/pppd.log.3g linkname 3g ipparam 3g nodefaultroute noauth persist nomultilink nodetach usepeerdns &\n";
    print PU3G "fi;\n";
  }
  close(PU3G);

  open(PU,">pppup.ppp0");
  chmod(0600,"pppup.ppp0");

  print PU "#!/bin/bash\n\n";
  print PU "sleep 2\n";
  print PU "if [ ! \"`/sbin/ip addr show ppp0 |grep UP`\" ];then\n";
  print PU "  if [ -e /var/run/ppp0.pid ];then\n";
  print PU "    /usr/bin/kill -9 `cat /var/run/ppp0.pid`\n";
  print PU "    /usr/bin/sleep 5\n";
  print PU "  fi\n";
  print PU "  /bin/ps axww |grep \"unit 0\" |awk '{printf \"kill -9 %s;sleep 2\\n\",\$1}' |sh\n";


  chop $ppptun{'ppp0'};
  @ppptdat=split(/ /,$ppptun{'ppp0'});
  foreach $ppptdev (@ppptdat) {
    print PU "  /sbin/ip tun del " . $ppptdev  . "\n";
  }

  if (($mdmconf{'Connection'} eq "ADSL") && ($sysconf{'External'} eq "Dialup")) {
    $servname="";
    if ($mdmconf{'Number'} ne "") {
      $mdmconf{'Number'}=join(" ",split(/_/,$mdmconf{'Number'}));
      ($server,$service)=split(/\//,$mdmconf{'Number'});
      if ($service eq "") {
        $servname=" rp_pppoe_service \"$server\"";
      } else {
        $servname=" rp_pppoe_service \"$service\" rp_pppoe_ac \"$server\"";
      }
    }
    print PU "  rm /var/log/pppd.log.0\n";
    print PU "  date > /var/log/pppd.log.0\n";
    print PU "  /usr/sbin/pppd sync plugin rp-pppoe.so $mdmconf{'ComPort'} unit 0 logfile /var/log/pppd.log.0 linkname main user $mdmconf{'Username'} nodefaultroute noauth persist nomultilink usepeerdns$servname nodetach &\n";
    &startexadsl();
  } elsif (($mdmconf{'Connection'} eq "3GIPW") && ($sysconf{'External'} eq "Dialup")) {
    $mdmconf{'ComPort'}="/dev/tts/IPW0";
    $usbport=0;
    while (( ! -e "/dev/tts/IPW$usbport") && ($usbport <= 64)) {
      $usbport++;
    }
    if ($usbport <= 64) {
      $mdmconf{'ComPort'}="/dev/tts/IPW" . $usbport;
    }

    print PU "  rm /var/log/pppd.log.0\n";
    print PU "  date > /var/log/pppd.log.0\n";
    print PU "  /usr/sbin/pppd $mdmconf{'ComPort'} connect \"/usr/sbin/chat -v -f /etc/ppp/diald.scr\" unit 0 logfile /var/log/pppd.log.0 mru $mdmconf{'MTU'} mtu $mdmconf{'MTU'} linkname main user $mdmconf{'Username'} defaultroute noauth persist nomultilink usepeerdns nodetach &\n";
    &startexadsl();
  } elsif (($mdmconf{'Connection'} eq "3G") && ($sysconf{'External'} eq "Dialup")) {
    $mdmconf{'ComPort'}="/dev/tts/GSM0";
    $usbport=0;
    while (( ! -e "/dev/tts/GSM$usbport") && ($usbport <= 64)) {
      $usbport++;
    }
    if ($usbport <= 64) {
      $mdmconf{'ComPort'}="/dev/tts/GSM" . $usbport;
    }

    print PU "  rm /var/log/pppd.log.0\n";
    print PU "  date > /var/log/pppd.log.0\n";
    print PU "  /usr/sbin/pppd $mdmconf{'ComPort'} connect \"/usr/sbin/chat -v -f /etc/ppp/diald.scr\" unit 0 logfile /var/log/pppd.log.0 mru $mdmconf{'MTU'} mtu $mdmconf{'MTU'} linkname main defaultroute noauth persist nomultilink usepeerdns nodetach &\n";
    &startexadsl();

  } elsif (($mdmconf{'Connection'} eq "Dialup") && ($sysconf{'External'} eq "Dialup")) {
    $cportmap{'Com1'}="/dev/tts/0";
    $cportmap{'Com2'}="/dev/tts/1";
    $cportmap{'Com3'}="/dev/tts/2";
    $cportmap{'Com4'}="/dev/tts/3";

    if ($cportmap{$mdmconf{'ComPort'}} eq "") {
      $mdmconf{'ComPort'}="/dev/tts/0";
    } else {
      $mdmconf{'ComPort'}=$cportmap{$mdmconf{'ComPort'}};
    }

    print PU "  rm /var/log/pppd.log.0\n";
    print PU "  date > /var/log/pppd.log.0\n";
    print PU "  /usr/sbin/pppd " . $mdmconf{'ComPort'} . " " . $mdmconf{'Speed'} . " " . $mdmconf{'Address'} . ":" . $mdmconf{'Gateway'} . " user $mdmconf{'Username'} $mdmconf{'FlowControl'} ipcp-accept-local passive demand idle $mdmconf{'IdleTimeout'} unit 0 logfile /var/log/pppd.log.0 mru $mdmconf{'MTU'} mtu $mdmconf{'MTU'} linkname main defaultroute noauth persist nomultilink usepeerdns nodetach &\n";


#    } elsif ($mdmconf{'ComPort'} eq "CAPI") {
#      print RP "\n#Starting Link\n";
#      print RP "/usr/sbin/pppd sync plugin capiplugin /dev/null number $mdmconf{'Number'} $mdmconf{'Address'}:$mdmconf{'Gateway'} ipcp-accept-local noauth defaultroute";
#    }
  } elsif ($sysconf{'External'} ne "Dialup") {
    &startexadsl();
    print RP "/usr/sbin/servconfig\n";
  } else {
    print RP "#PPP Not Required On This System\n";
    print RP "/usr/sbin/servconfig\n";
  }

  print PU "fi;\n";
  close(PU);

  print RP<<__EOF__;

#Status Changed
if [ -e /var/run/ppp-reroute ];then
  #Flush Routes And Conntrack
#  sleep 15
#  /sbin/ip route flush cache
#  /usr/sbin/conntrack -F
#  /usr/sbin/conntrack -F expectation
#  /usr/sbin/asterisk -rx "reload chan_sip.so" 
#  /sbin/ip route flush cache
#  /usr/bin/killall racoon
#  while [ "`pidof racoon`" ] && [ "\${RPIDCHK}" != "XXXXXX" ];do
#    /usr/bin/killall -9 racoon
#    RPIDCHK="\${RPIDCHK}X";
#    /usr/bin/sleep 5
#  done
#  /usr/sbin/setkey -FP
#  /usr/sbin/setkey -F
#  rm /var/racoon/racoon.sock
#  sleep 2
#  /usr/sbin/racoon
#  sleep 3
#  /sbin/ip tun ls |grep -E "gtun[0-9]+:" |awk -F: '{print "/sbin/ip tun del "\$1}' |sh
  rm /var/run/ppp-reroute
fi;

#Check And Restart GRE Tunnels
/etc/rc.d/rc.tunnels

if [ -e /var/run/netsentry-pppup ];then
  rm /var/run/netsentry-pppup
fi;


__EOF__


  print RP "\n";
  close(RP);
}

sub printcupsconf(){
  open(PC,">printcap");
  chmod(0600,"printcap");
  if ($printer{'LPT1'}) {
print PC<<__EOB__;
lp0:
  :sd=/var/spool/lpd/lp0
  :done_jobs=0
  :lp=/dev/printers/0
__EOB__
  }

  if ($printer{'LPT2'}) {
print PC<<__EOB__;
lp1:
  :sd=/var/spool/lpd/lp1
  :done_jobs=0
  :lp=/dev/printers/1
__EOB__
  }
  if (-e "/etc/printers") {
    open(NETP,"/etc/printers");
    while(<NETP>) {
      chop($_);
      @pdata=split(/:/,$_);
      open(PF,">lpd_filter.@pdata[0]");
      print PF<<__EOB__;
#!/bin/bash

/usr/bin/gs -sDEVICE=pxlmono -dNOPAUSE -dBATCH -q -sPAPERSIZE=a4 -sOutputFile=- -
__EOB__
      close(PF);
      print PC <<__EOB__;
@pdata[0]
  :lp=@pdata[2]%@pdata[3]
  :sd=/var/spool/lpd/@pdata[0]
  :if=/var/spool/lpd/lpd_filter.@pdata[0]

__EOB__
    }
    close(NETP);
  }

#  $usblp=0;
#  foreach $usbprint (@uprint) {
#print PC<<__EOB__;
#ulp$usblp:
#  :sd=/var/spool/lpd/ulp$usblp
#  :done_jobs=0
#  :lp=$usbprint
#__EOB__
#   $usblp++;
#  }

  close(PC);
}  

sub printgrelitetun() {
  open(TU,">tunnels");
  chmod(0600,"tunnels");
  print TU "#!/bin/bash\n\n";
  close(TU);
}

sub printgretun() {
  open(TU,">tunnels");
  chmod(0600,"tunnels");
  print TU "#!/bin/bash\n\n";
  @ipdat=split(/\|/,$interface{$sysconf{'Internal'}});
  $intip=@ipdat[1];

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

  foreach $gretuni (@gretunnels) {
    @tdat=split(/\|/,$gretun{$gretuni});
    $tnwaddr=getnw("30",@tdat[1]);
    @nw=split(/\./,$tnwaddr);
    @loc=split(/\./,@tdat[1]);
    @nw[3]++;
    if (@nw[3] eq @loc[3] ){
      @nw[3]++;
    }
    $remip=@loc[0] . "." . @loc[1] . "." . @loc[2] . "." . @nw[3];
    $gretunrem{@tdat[0]}=$remip;
    push(@tundnsint,$remip . "/32");
    print TU <<__EOB__;

#Configure Tunnel @tdat[0]

/sbin/ip link show @tdat[0] > /dev/null 2>&1
if [ \$? != 0 ] || [ -e /tmp/tun_@tdat[0] ];then 
  SR=1
 else
  ping -c 3 -l 3 -w 5 -q $remip > /dev/null 2>&1;
  SR=\$?
fi

if [ "\${SR}" == "1" ] && [ -d /proc/sys/net/ipv4/neigh/@tdat[3] ];then
  if [ -e /tmp/tun_@tdat[0] ];then
    rm /tmp/tun_@tdat[0]
  fi;
  LOCAL=`/sbin/ip addr show dev @tdat[3] |grep inet |head -1 |cut -d/ -f1 |awk '{print \$2}'`
  REMOTEIP=`dig +short "@tdat[2]" A IN +tries=1 |tail -1`
  if [ "\$LOCAL" ] && [ "\$REMOTEIP" != ";;" ] && [ "\$REMOTEIP" ];then
    #Flush SPD Entry
    (cat <<EOF
spddelete \$LOCAL/32 \$REMOTEIP/32 gre -P out;
spddelete \$REMOTEIP/32 \$LOCAL/32 gre -P in;
EOF
) |setkey -c
     
    #Restart Tunnel
    /sbin/ip tun del @tdat[0]
    /sbin/ip rule del from @tdat[1] table VPN prio 20
    /sbin/ip tunnel add @tdat[0] mode gre remote \$REMOTEIP local \$LOCAL ttl 255
    /sbin/ip rule add from @tdat[1] table VPN prio 20
    /sbin/ip addr add @tdat[1]/30 peer $remip dev @tdat[0]
__EOB__
    print TU <<__EOB__;
    /sbin/ip link set @tdat[0] multicast on
__EOB__
    print TU "    /sbin/ip link set @tdat[0] mtu @tdat[5]\n";
    print TU <<__EOB__;
    /sbin/ip link set @tdat[0] up
    REROUTE=1
__EOB__
    print TU "    #Tunnel Routes For @tdat[0]\n";
    print TU "    /sbin/ip route add " . $tnwaddr . "/30 src " . @tdat[1] . " dev " . @tdat[0] . " table Link\n";
    @tunsrcs=split(/;/,$tintsrc{@tdat[0]});
    foreach $srcnet (@tunsrcs) {
      print TU "    /sbin/ip route add $srcnet dev @tdat[0] scope link src $localip table VPN\n";
      print TU "    /sbin/ip route add $remip dev @tdat[0] scope link src @tdat[1] table VPN\n";
    }
    for($rtcnt=0;$rtcnt <= $grertcnt{@tdat[0]}-1;$rtcnt++) {
      print TU "    /sbin/ip route add $greroute{@tdat[0]}[$rtcnt] via @tdat[1] dev @tdat[0] table VPN\n";
    }
    print TU <<__EOB__;

    sleep 10;
    /sbin/ip link show @tdat[0] > /dev/null 2>&1
    if [ \$? != 0 ];then 
      SR=1;
     else
      ping -c 3 -l 3 -w 5 -q $remip > /dev/null 2>&1;
      SR=\$?
    fi

    if [ "\$SR" == "1" ];then
       touch /tmp/tun_@tdat[0]
     else
      #Attempt To Use IPSEC
__EOB__
    if (@tdat[4] eq "0") {
      print TU <<__EOB__;
      (cat <<EOF
spdadd \$LOCAL/32 \$REMOTEIP/32 gre -P out ipsec esp/transport//use;
spdadd \$REMOTEIP/32 \$LOCAL/32 gre -P in ipsec esp/transport//use;
EOF
) |setkey -c
__EOB__
    } elsif (@tdat[4] eq "2") {
      print TU <<__EOB__;
      (cat <<EOF
spdadd \$LOCAL/32 \$REMOTEIP/32 gre -P out ipsec esp/transport//require;
spdadd \$REMOTEIP/32 \$LOCAL/32 gre -P in ipsec esp/transport//require;
EOF
) |setkey -c
__EOB__
    } else {
      print TU <<__EOB__;
      (cat <<EOF
spdadd \$LOCAL/32 \$REMOTEIP/32 gre -P out none;
spdadd \$REMOTEIP/32 \$LOCAL/32 gre -P in none;
EOF
) |setkey -c
__EOB__
    }
    print TU "    fi;\n";
    print TU "  fi;\n";
    print TU "fi;\n";
  }

  @eidat=split(/\|/,$interface{$sysconf{'Internal'}});

  $vcnt=0;
  foreach $esptun (@esptunnels) {
    @espdata=split(/\|/,$esptun);
    if ((@espdata[2] ne "") && (@espdata[0] != "")) {
      @espintip=split(/\|/,$interface{@espdata[3]});

      $dmznw=getnw(@espintip[2],@espintip[1]);
      $dmznw.="/" . @espintip[2];

      if ($vcnt < 10) {
        $route="\n    /sbin/ip route add default dev @espdata[4] src @espintip[1] table VPN$vcnt";
      } else {
        $route="";
      }
      $vcnt++;
      print TU <<__EOB__;
#Configure ESP Tunnel $dmznw <-> @espdata[1]

/sbin/ip route add @espdata[2]/32 dev @espdata[4] src @espintip[1] table 80
/usr/bin/sleep 2;
/sbin/ip route flush cache @espdata[2]
/usr/bin/ping -q -l 2 -c 2 -w 2 @espdata[2] > /dev/null 2>&1

if [ "\$?" == "1" ];then
  LOCAL=`/sbin/ip addr show dev @espdata[4] |grep inet |head -1 |cut -d/ -f1 |awk '{print \$2}'`
  if [ "\${LOCAL}" != "" ];then
    /sbin/ip route del @espdata[0]/32 table 80
    /sbin/ip route add @espdata[0]/32 dev @espdata[4] src \${LOCAL} table 80$route
    (cat <<EOF
deleteall \${LOCAL} @espdata[0] esp;
deleteall @espdata[0] \${LOCAL} esp;
spddelete $dmznw $dmznw any -P in;
spddelete $dmznw $dmznw any -P out;
spddelete $dmznw @espdata[1] any -P out;
spddelete @espdata[1] $dmznw any -P in;
spdadd $dmznw @espdata[1] any -P out ipsec esp/tunnel/\${LOCAL}-@espdata[0]/use;
spdadd @espdata[1] $dmznw any -P in ipsec esp/tunnel/@espdata[0]-\${LOCAL}/use;
spdadd $dmznw $dmznw any -P in none;
spdadd $dmznw $dmznw any -P out none;
EOF
) |setkey -c
    /usr/bin/sleep 2
    /usr/bin/ping -q -l 2 -c 2 -w 2 @espdata[2] > /dev/null 2>&1
  fi;
fi;

/sbin/ip route del @espdata[2]/32 table 80

__EOB__
    }
  }

print TU <<__EOB__;
if [ "\$RESTART_FW" ];then
  DEFINT=`/sbin/ip route show 0.0.0.0/0 table 90 |awk '{print \$5}'`
  IPADDR=`/sbin/ip -f inet -o addr show \$DEFINT |awk '{print \$4}' |cut -d/ -f1`
  DEFGW=`/sbin/ip route show 0.0.0.0/0 table 90|awk '{print \$3}'`
  /etc/ppp/ip-up \$DEFINT - - \$IPADDR \$DEFGW
fi;

#if [ "\$REROUTE" = 1 ];then
#  killall -9 ospfd
#  sleep 3
#  ospfd -d
#  vtysh -b
#fi;
__EOB__

  close(TU);
}

sub printhosts() {
  open(EH,">hosts");
  chmod(0600,"hosts");
  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'}
  }

  if ($sysconfig{'Type'} eq "full") {
    $ethint=$sysconf{'Internal'};
    @idata=split(/\|/,$interface{$ethint});
#    foreach $web (@www) {
#      printf EH ("%-20s%s\n",@idata[1],$web);
#    }
    foreach $reweb (@rewww) {
      printf EH ("%-20s%s\n",$rewip{$reweb},$reweb);
    }
    if ($dnsconf{'DynZone'} ne "") {
      printf EH ("%-20s%s\n",@idata[1],$dnsconf{'DynZone'});
      foreach $alink (@vadsllink) {
        @ldata=split(/\|/,$adsllink{$alink});
        printf EH ("%-20s%s.%s\n",@idata[1],@ldata[0],$dnsconf{'DynZone'});;
      }
    }
    foreach $hstent (@hsts) {
      $hdata=$hosts{$hstent};
      @hstdata=split(/\|/,$hdata);
      if (index(@hstdata[0],".") eq -1) {
        @hstdata[0]="@hstdata[0].$dnsconf{'Domain'} @hstdata[0]";
      }
      printf EH ("%-20s%s\n",@hstdata[1],@hstdata[0]);      
    }
    printf EH ("%-20s%s.%s %s\n","127.255.255.253","dummy0",$dnsconf{'Domain'},"dummy0");
    printf EH ("%-20s%s\n",@idata[1],"$fqdn $dnsconf{'Hostname'}");  
#    if ($sysconf{'External'} ne "Dialup") {
#      $ethext=$sysconf{'External'};
#      @idata=split(/\|/,$interface{$ethext});
#      printf EH ("%-20s%s\n",@idata[1],"$fqdn $dnsconf{'Hostname'}");
#    }
    foreach $iface (@ints) {
      @lidata=split(/\|/,$interface{$iface});
      if ((index($iface,"gtun") eq -1) && ($iface ne $sysconf{'External'}) && ($iface ne $mdmconf{'ComPort'}) && ($iface ne $sysconf{'Internal'})){
        if (@lidata[1] ne "0.0.0.0") {
          printf EH ("%-20s%s.%s %s\n",@idata[1],@lidata[0],$dnsconf{'Domain'},@lidata[0]);
        }
      }
    }
  } else {
    @idata=split(/\|/,$interface{'eth0'});
    printf EH ("%-20s%s\n",@idata[1],"$fqdn $dnsconf{'Hostname'}");  
  }
  printf EH ("%-20s%s\n","127.0.0.1","localhost");  
  close(EH);
}

sub printatalkconf() {
  open(AC,">atalkd.conf");
  chmod(0600,"atalkd.conf");
  if ($sysconf{'ATalkNStart'} eq "") {
    $sysconf{'ATalkNStart'}="0";
    $sysconf{'ATalkNFin'}="65534";
  }
  if ($sysconf{'ATalkNFin'} ne "") {
    $tonet="-$sysconf{'ATalkNFin'}";
  }
  print AC "$sysconf{'Internal'} -phase $sysconf{'ATalkPhase'} -net $sysconf{'ATalkNStart'}$tonet -zone \"$smboption{'Domain'}\"\n";
  close(AC);

  open(AF,">afpd.conf");
  chmod(0600,"afpd.conf");
  if ($sysconf{'ATalkNFin'} ne "") {
    $tonet="-$sysconf{'ATalkNFin'}";
  }
  print AF "$dnsconf{'Hostname'} $dnsconf{'Hostname'} -uamlist uams_guest.so,uams_pam.so,uams_dhx_pam.so\n";
  close(AF);
}

sub printresolv() {
  open(RC,">resolv.conf");
  chmod(0600,"resolv.conf");

  if ($dnsconf{'Domain'} ne "") {
    print RC "domain $dnsconf{'Domain'}\n";
    print RC "search $dnsconf{'Domain'}";
    if ($smboption{'Security'} eq "ADS") {
      print RC " " . lc($smboption{'ADSRealm'});
    }
    if (($dnsconf{'DynZone'} ne "") && ($dnsconf{'Domain'} ne $dnsconf{'DynZone'})) {
      print RC " " . $dnsconf{'DynZone'};
    }
    if ($dnsconf{'Search'} ne "") {
      print RC " " . $dnsconf{'Search'};
    }
    $intint=$sysconf{'Internal'};
    @iipdat=split(/\|/,$interface{$intint});
    print RC "\nnameserver 127.0.0.1\n";
    if (($sysconf{'PrimaryDns'} ne "") && ($sysconf{'PrimaryDns'} ne @iipdat[1])){
      print RC "nameserver $sysconf{'PrimaryDns'}\n";
    }
    if ($sysconf{'SecondaryDns'} ne "") {
      print RC "nameserver $sysconf{'SecondaryDns'}\n";
    }
  }
  if ($mailconf{'DNS'} ne "") {
    print RC "nameserver $mailconf{'DNS'}\n";
  }

  close(RC);
  open(HN,">HOSTNAME");
  chmod(0600,"HOSTNAME");
  if ($sysconfig{'Type'} eq "full") {
    if ($dnsconf{'Hostname'} eq "") {
      print HN "$dnsconf{'Domain'}";
    } else {
      print HN "$dnsconf{'Hostname'}";
    }
  } else {
    print HN "netsentry-lite";
  }
  close(HN);
}

sub printedns(){
  open(ED,">ednszones");
  chmod(0600,"ednszones");
  foreach $zone (@ednszones) {
    print ED "$zone\n";
  }
  close(ED);
  open(ID,">idnszones");
  chmod(0600,"idnszones");
  foreach $zone (@idnszones) {
    print ID "$zone\n";
  }
  close(ID);
}

sub printespconf(){

  if (index($sysconf{'Internal'},":") ne "-1") {
    $ethint=substr($sysconf{'Internal'},0,index($sysconf{'Internal'},":"));
  } else {
    $ethint=$sysconf{'Internal'};
  }
  @idata=split(/\|/,$interface{$ethint});
  $locallan=getnw(@idata[2],@idata[1]);
  $broadcast=getbc(@idata[2],@idata[1]);
  $localname=join(" ",split(/_/,@idata[0]));

  if ($wirelessrange ne "") {
    @wrdat=split(/\//,$wirelessrange);
    $wnumip=getsncount(@wrdat[1])-3;
    @ipwqu=split(/\./,@wrdat[0]);
    @ipwqu[3]++;
    $wrstart=join(".",@ipwqu);
    @ipwqu[3]++;
  }

#  open (RP,">racoon.policy");
#  chmod(0600,"racoon.policy");
#print RP<<__EOB__;
#spdflush;
#
#spdadd $locallan/@idata[2] @idata[1]/32 any -P in ipsec esp/transport//use;
#spdadd @idata[1]/32 $locallan/@idata[2] any -P out ipsec esp/transport//use;
#__EOB__
#
#  if ($wirelessrange ne "") {
#print RP<<__EOB__;
#spdadd $wirelessrange $wrstart/32 any -P in ipsec esp/transport//use;
#spdadd $wrstart/32 $wirelessrange any -P out ipsec esp/transport//use;
#__EOB__
#  }
#close(RP);

  open (RC,">racoon.conf");
  chmod(0600,"racoon.conf");
  if ($dnsconf{'Hostname'} eq "") {
    $fqdn=$dnsconf{'Domain'};
  } else {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  }

  if ( -e "/etc/ipsec.d/cacerts/server_cacert.pem" ) {
    $cacert="/etc/ipsec.d/cacerts/server_cacert.pem";
  } else {
    $cacert="/etc/ipsec.d/cacerts/cacert.pem";
  }

#	doi ipsec_doi;

print RC<<__EOB__;
path certificate "/etc/ipsec.d/certs" ;
path pre_shared_key "/etc/ipsec.d/psk.txt";
listen {
	adminsock "/var/racoon/racoon.sock" "root" "root" 0660;
}
__EOB__

foreach $esptun (@esptunnels) {
  @vdata=split(/\|/,$esptun);
  if (@vdata[4] ne "") {
    if ((@vdata[5] eq "3des") || (@vdata[5] eq "des") || (@vdata[5] eq "aes") || (@vdata[5] eq "blowfish") || (@vdata[5] eq "cast128")){
      @vdata[5]="\n                encryption_algorithm @vdata[5];";
    } else {
      @vdata[5]="";
    }
    $clicerts="certificate_type x509 \"/etc/openssl/server.signed.pem\" \"/etc/openssl/serverkey.pem\";";
    $vpncacert="cacert.pem";
      $isakmpm="rsasig";
      if (-e "/etc/openssl/vpncert.pem") {
        $clicerts="certificate_type x509 \"/etc/openssl/vpncert.pem\" \"/etc/openssl/vpncert.key\";";
        $vpncacert="vpncert.pem";
      }
    print RC<<__EOB__;
remote @vdata[0]
{
	initial_contact on;
	lifetime time 86400 sec;
        exchange_mode main;
        verify_identifier off;
        $clicerts
        ca_type x509 "/etc/ipsec.d/cacerts/$vpncacert";
        generate_policy on;
        passive off;
        dpd_delay 30;
        dpd_maxfail 3;
        nat_traversal on;
        proposal_check obey;
        ike_frag on;
        mode_cfg on;
        proposal {@vdata[5]
                hash_algorithm @vdata[6];
                authentication_method $isakmpm;
                dh_group @vdata[7];
        }
}
__EOB__
  }
}

print RC<<__EOB__;
remote anonymous
{
	initial_contact on;
	lifetime time 86400 sec;
#	situation identity_only;
        exchange_mode main;
#        my_identifier asn1dn;
        my_identifier fqdn "$fqdn";
        verify_identifier off;
#        peers_identifier asn1dn "C=*,ST=*,L=*,O=*,OU=*,CN=*";	
#        peers_identifier asn1dn "C=*,ST=*,L=*,O=*,OU=*,CN=*,emailAddress=*";	
#        peers_identifier address;
        certificate_type x509 "/etc/openssl/server.signed.pem" "/etc/openssl/serverkey.pem";
#        ca_type x509 "$cacert";
        generate_policy on;
        passive off;
        dpd_delay 30;
        dpd_maxfail 3;
        nat_traversal on;
#        script "/etc/racoon/phase1-down.sh" phase1_down;
        proposal_check obey;
        ike_frag on;
        mode_cfg on;
        proposal {
                encryption_algorithm cast128;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm cast128;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm cast128;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm cast128;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm aes;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm aes;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm aes;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm aes;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm blowfish;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm blowfish;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm blowfish;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm blowfish;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 5;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm sha1;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm md5;
                authentication_method rsasig;
                dh_group 2;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm sha1;
                authentication_method hybrid_rsa_server;
                dh_group 2;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm sha1;
                authentication_method pre_shared_key;
                dh_group 5;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 5;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm sha1;
                authentication_method pre_shared_key;
                dh_group 2;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 2;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm sha1;
                authentication_method pre_shared_key;
                dh_group 1;
        }
        proposal {
                encryption_algorithm 3des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 1;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm sha1;
                authentication_method pre_shared_key;
                dh_group 5;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 5;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm sha1;
                authentication_method pre_shared_key;
                dh_group 2;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 2;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm sha1;
                authentication_method pre_shared_key;
                dh_group 1;
        }
        proposal {
                encryption_algorithm des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 1;
        }
}
__EOB__
#  foreach $gretuni (@gretunnels) {
#    @tdat=split(/\|/,$gretun{$gretuni});
#    @nw=split(/\./,getnw("30",@tdat[1]));
#    @loc=split(/\./,@tdat[1]);
#    @nw[3]++;
#    if (@nw[3] eq @loc[3] ){
#      @nw[3]++;
#    }
#    $remip=@loc[0] . "." . @loc[1] . "." . @loc[2] . "." . @nw[3];
#     print RC <<__EOB__;
#remote anonymous inherit anonymous
#{
#	peers_identifier fqdn "@tdat[0]";
#	passive off;
#}
#__EOB__
#  }
#  foreach $esptun (@esptunnels) {
#    @espdata=split(/\|/,$esptun);
#    print RC <<__EOB__;
#remote anonymous inherit anonymous
#{
#        exchange_mode @espdata[1];
#        my_identifier @espdata[2] "@espdata[3]";
#        peers_identifier @espdata[4] "@espdata[5]";
#        certificate_type x509 "/etc/ipsec.d/certs/@espdata[0]" "/etc/ipsec.d/private/@espdata[0]";
#	passive off;
#        proposal {
#                encryption_algorithm @espdata[6];
#                hash_algorithm @espdata[7];
#                authentication_method rsasig;
#                dh_group @espdata[8] ;
#        }
#}  
#__EOB__
#  }
#  foreach $esptun (@esptunnels) {
#    @espdata=split(/\|/,$esptun);
#    print RC <<__EOB__;
#sainfo @espdata[2] "@espdata[3]" @espdata[4] "@espdata[5]"
#{
#	lifetime time 5 min;
#        pfs_group @espdata[9];
#        encryption_algorithm  @espdata[6];
#        authentication_algorithm hmac_@espdata[7];
#        compression_algorithm deflate;
#}
#__EOB__
#  }
  if ($wirelessrange ne "") {
    @wrdat=split(/\//,$wirelessrange);
    $wnumip=getsncount(@wrdat[1])-3;
    $wrsn=getsn(@wrdat[1]);
    $intint=$sysconf{'Internal'};
    @iipdat=split(/\|/,$interface{$intint});

    print RC <<__EOB__;
mode_cfg {
        network4 @wrdat[0];
        pool_size $wnumip;
        netmask4 $wrsn;
        auth_source system;
        dns4 @iipdat[1];
        wins4 @iipdat[1];
        banner "/etc/racoon/motd";
}
__EOB__
  }
#             encryption_algorithm algorithms;
#                     des, 3des, des_iv64, des_iv32, rc5, rc4, idea, 3idea,
#                     cast128, blowfish, null_enc, twofish, rijndael, aes (used
#                     with ESP)
#             authentication_algorithm algorithms;
#                     des, 3des, des_iv64, des_iv32, hmac_md5, hmac_sha1,
#                     hmac_sha256, hmac_sha384, hmac_sha512, non_auth (used
#                     with ESP authentication and AH)

  print RC <<__EOB__;
sainfo anonymous
{
	lifetime time 3600 sec;
        encryption_algorithm  aes,3des,des,des_iv64,des_iv32,blowfish,null_enc,twofish,rijndael;
        authentication_algorithm hmac_sha1,hmac_md5,hmac_sha256,non_auth;
        compression_algorithm deflate;
}
__EOB__

  close(RC);
}

sub printcaconf() {
  if (($caconf{'Locked'}) || ( ! -e "ca.conf" )) {
    open(CC,">ca.conf");
    chmod(0600,"ca.conf");
    open(VCA,">voipca.conf");
    chmod(0600,"voipcaca.conf");
    open(SCC,">server.conf");
    chmod(0600,"server.conf");
    open(VCC,">voipssl.conf");
    chmod(0600,"voipssl.conf");
    if ($dnsconf{'Hostname'} eq "") {
      $fqdn=$dnsconf{'Domain'};
    } else {
      $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
    }

    $lint=$sysconf{'Internal'};
    @eidat=split(/\|/,$interface{$lint});
    $localip=@eidat[1];

print SCC<<__EOB__;
HOME                   = .
RANDFILE               = \$ENV::HOME/.rnd

[ req ]
default_bits           = 2048
distinguished_name     = req_dn
prompt                 = no
encrypt_key            = no
req_extensions         = v3_req
default_md             = sha1

[ req_dn ]
C                      = $caconf{'Country'}
ST                     = $caconf{'State'}
L                      = $caconf{'City'}
O                      = $caconf{'Company'}
OU                     = $caconf{'Division'}
CN                     = Network Sentry Firewall Of $caconf{'Company'}

[ v3_req ]
nsComment              = "Generated On Network Sentinel Solutions Firewall"
subjectAltName         = DNS:$fqdn,email:root\@$fqdn,IP:$localip
nsSslServerName        = $fqdn
extendedKeyUsage       = 1.3.6.1.5.5.7.3.2
extendedKeyUsage       = 1.3.6.1.5.5.7.3.1
__EOB__
  close(SCC);

print VCC<<__EOB__;
HOME                   = .
RANDFILE               = \$ENV::HOME/.rnd

[ req ]
default_bits           = 2048
distinguished_name     = req_dn
prompt                 = no
encrypt_key            = no
req_extensions         = v3_req
default_md             = sha1

[ req_dn ]
C                      = $caconf{'Country'}
ST                     = $caconf{'State'}
L                      = $caconf{'City'}
O                      = $caconf{'Company'}
OU                     = $caconf{'Division'}
CN                     = Network Sentry VOIP CA Of $caconf{'Company'}

[ v3_req ]
nsComment              = "Generated On Network Sentinel Solutions Firewall"
subjectAltName         = DNS:$fqdn,email:root\@$fqdn,IP:$localip
nsSslServerName        = $fqdn
extendedKeyUsage       = 1.3.6.1.5.5.7.3.2
extendedKeyUsage       = 1.3.6.1.5.5.7.3.1
__EOB__
  close(VCC);

    print CC<<__EOB__;
HOME                   = .
RANDFILE               = \$ENV::HOME/.rnd

oid_section            = new_oids

[ new_oids ]

[ req ]
default_bits           = 2048
distinguished_name     = req_distinguished_name
attributes             = req_attributes
prompt                 = no
encrypt_key            = no
req_extensions         = v3_req
default_md             = sha1

[ ca ]
default_ca             = ca_func

[ ca_func ]
unique_subject         = yes
default_days           = 1460
dir                    = /etc/openssl
certs                  = \$dir/certs
database               = \$dir/index.txt
new_certs_dir          = \$dir/newcerts
certificate            = /etc/ipsec.d/cacerts/cacert.pem
serial                 = \$dir/serial
crl                    = \$dir/crl.pem
private_key            = \$dir/private/cakey.pem
RANDFILE               = \$dir/private/.rand
default_crl_days       = 30
default_bits           = 2048
default_md             = sha1
preserve               = no
email_in_dn            = no
policy                 = policy_match
x509_extensions        = user_cert
crl_extensions         = crl_ext
copy_extensions        = copy

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req_distinguished_name ]
C                      = $caconf{'Country'}
ST                     = $caconf{'State'}
L                      = $caconf{'City'}
O                      = $caconf{'Company'}
OU                     = $caconf{'Division'}
CN                     = $caconf{'Name'}

[ req_attributes ]
#challengePassword      = A challenge password
#challengePassword_min  = 4
#challengePassword_max  = 20

[ v3_req ]
nsComment              = "Generated On Network Sentinel Solutions Firewall"
subjectAltName         = DNS:$fqdn,email:root\@$fqdn,IP:$localip
nsSslServerName        = $fqdn

[ user_cert ]
subjectKeyIdentifier   = hash
basicConstraints       = CA:FALSE
nsCertType             = client, email, server, objsign
keyUsage               = nonRepudiation, digitalSignature, keyEncipherment
authorityKeyIdentifier = keyid:always,issuer:always
nsCaRevocationUrl      = http://$fqdn/cert/crl.pem
issuerAltName          = DNS:$fqdn,email:root\@$fqdn,IP:$localip
nsBaseUrl              = http://$fqdn
nsRenewalUrl           = /cert/renew?cert=
nsCaRevocationUrl      = /cgi-perl/cert-rev.pl?certid=
nsRevocationUrl        = /cgi-perl/cert-rev.pl?certid=

[ ca_cert ]
subjectKeyIdentifier   = hash
basicConstraints       = CA:TRUE, pathlen:1
nsCertType             = client, email, server, objsign, sslCA, emailCA, objCA
keyUsage               = cRLSign,keyCertSign
authorityKeyIdentifier = keyid:always,issuer:always
issuerAltName          = DNS:$fqdn,email:root\@$fqdn,IP:$localip
nsBaseUrl              = http://$fqdn
nsRenewalUrl           = /cert/renew?cert=
nsCaRevocationUrl      = /cgi-perl/cert-rev.pl?certid=
nsRevocationUrl        = /cgi-perl/cert-rev.pl?certid=

[ v3_ca ]
#nsCaPolicyUrl
nsBaseUrl              = http://$fqdn
nsRenewalUrl           = /cert/renew?cert=
nsCaRevocationUrl      = /cgi-perl/cert-rev.pl?certid=
nsRevocationUrl        = /cgi-perl/cert-rev.pl?certid=
nsSslServerName        = $fqdn
subjectKeyIdentifier   = hash
basicConstraints       = CA:TRUE, pathlen:2
nsComment              = "Generated On Network Sentinel Solutions Firewall"
nsCertType             = client, email, server, objsign, sslCA, emailCA, objCA
keyUsage               = cRLSign,keyCertSign
subjectAltName         = DNS:$fqdn,email:root\@$fqdn,IP:$localip
authorityKeyIdentifier = keyid:always,issuer:always
issuerAltName          = DNS:$fqdn,email:root\@$fqdn,IP:$localip
extendedKeyUsage       = serverAuth,clientAuth,emailProtection

[ crl_ext ]
authorityKeyIdentifier = keyid:always,issuer:always
__EOB__
    close(CC);

    print VCA<<__EOB__;
HOME                   = .
RANDFILE               = \$ENV::HOME/.rnd

oid_section            = new_oids

[ new_oids ]

[ req ]
default_bits           = 512
distinguished_name     = req_distinguished_name
attributes             = req_attributes
prompt                 = no
encrypt_key            = no
req_extensions         = v3_req
default_md             = sha1

[ ca ]
default_ca             = ca_func

[ ca_func ]
unique_subject         = yes
default_days           = 1460
dir                    = /etc/openssl/voipca
certs                  = \$dir/certs
database               = \$dir/index.txt
new_certs_dir          = \$dir/newcerts
certificate            = \$dir/ca.pem
serial                 = \$dir/serial
crl                    = \$dir/crl.pem
private_key            = \$dir/private/cakey.pem
RANDFILE               = \$dir/private/.rand
default_crl_days       = 30
default_bits           = 1024
default_md             = sha1
preserve               = no
email_in_dn            = no
policy                 = policy_match
x509_extensions        = user_cert
crl_extensions         = crl_ext
copy_extensions        = copy

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req_distinguished_name ]
C                      = $caconf{'Country'}
ST                     = $caconf{'State'}
L                      = $caconf{'City'}
O                      = $caconf{'Company'}
OU                     = $caconf{'Division'}
CN                     = $caconf{'Name'} (VOIP)

[ req_attributes ]
#challengePassword      = A challenge password
#challengePassword_min  = 4
#challengePassword_max  = 20

[ v3_req ]
nsComment              = "Generated On Network Sentinel Solutions Firewall"
subjectAltName         = DNS:$fqdn,email:root\@$fqdn,IP:$localip
nsSslServerName        = $fqdn

[ user_cert ]
subjectKeyIdentifier   = hash
basicConstraints       = CA:FALSE
nsCertType             = client, email, server, objsign
keyUsage               = nonRepudiation, digitalSignature, keyEncipherment
authorityKeyIdentifier = keyid:always,issuer:always
issuerAltName          = DNS:$fqdn,email:root\@$fqdn,IP:$localip

[ ca_cert ]
subjectKeyIdentifier   = hash
basicConstraints       = CA:TRUE, pathlen:1
nsCertType             = client, email, server, objsign, sslCA, emailCA, objCA
keyUsage               = cRLSign,keyCertSign
authorityKeyIdentifier = keyid:always,issuer:always
issuerAltName          = DNS:$fqdn,email:root\@$fqdn,IP:$localip

[ v3_ca ]
#nsCaPolicyUrl
nsSslServerName        = $fqdn
subjectKeyIdentifier   = hash
basicConstraints       = CA:TRUE, pathlen:2
nsComment              = "Generated On Network Sentinel Solutions Firewall"
nsCertType             = client, email, server, objsign, sslCA, emailCA, objCA
keyUsage               = cRLSign,keyCertSign
subjectAltName         = DNS:$fqdn,email:root\@$fqdn,IP:$localip
authorityKeyIdentifier = keyid:always,issuer:always
issuerAltName          = DNS:$fqdn,email:root\@$fqdn,IP:$localip
extendedKeyUsage       = serverAuth,clientAuth,emailProtection

[ crl_ext ]
authorityKeyIdentifier = keyid:always,issuer:always
__EOB__
    close(VCA);
  }
}

sub printlitetables() {
  open(FW,">iptables");
  open(IF,">rc.interface");
  chmod(0600,"iptables");

  open(FWP,">iptables2");
  chmod(0600,"iptables2");

  open(FWD,">ipdown");
  chmod(0600,"ipdown");

  print FWD "#!/bin/bash\n\n";
  close(FWD);

  print FW "#!/bin/bash\n\n";
  print FWP "#!/bin/bash\n\n";
  print IF "#!/bin/bash\n\n";

  @idata=split(/\|/,$interface{$sysconf{'Internal'}});
  @idata[0]=join(" ",split(/_/,@idata[0]));
  $snm=getsn(@idata[2]);
  $bcaddr=getbc(@idata[2],@idata[1]);
  $nw=getnw(@idata[2],@idata[1]);

  open(IFUP,">ifup.@idata[3]");
  chmod(0600,"ifup.@idata[3]");
  print IFUP <<__EOI__;
IFNAME=@idata[3];
ADDRESS="@idata[1]";
NETMASK="@idata[2]";
BROADCAST="$bcaddr";
NETWORK="$nw";
FIREWALL=INTERNAL;
__EOI__

  if ($wificard{'lite'} ne "") {
    @wifidat=split(/\|/,$wificard{'lite'});
    if (@wifidat[3] eq "") {
      @wifidat[3]="off";
    }
    print IFUP<<__EOI__;
ESSID="@wifidat[1]";
NAME="Netsentry Lite";
KEY=@wifidat[2];
AP=any;
MODE=Managed;
CHANNEL=@wifidat[3];
POWER=auto;
RATE=auto;
__EOI__
  }
  close(IFUP);


  print IF "#Using Dynamic Addressing\n";
  print IF "echo 1 > /proc/sys/net/ipv4/ip_dynaddr\n\n";

  print IF "#Enable IP Forwarding\n";
  print IF "echo 1 > /proc/sys/net/ipv4/ip_forward\n\n";

  if (($mdmconf{'Connection'} eq "ADSL") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW")){
    $suint="lo";
    $mdmconf{'Address'}="127.0.0.1";
  } else {
    $suint="ppp0";
  }

  print FW<<__EOB__;

#Flush Tables And Chains
/sbin/iptables -F
/sbin/iptables -X
/sbin/iptables -t nat -F
/sbin/iptables -t nat -X
/sbin/iptables -t mangle -F
/sbin/iptables -t mangle -X

/sbin/iptables -P INPUT ACCEPT
/sbin/iptables -P OUTPUT ACCEPT
/sbin/iptables -P FORWARD ACCEPT

__EOB__

  print FWP<<__EOB__;

#Flush NAT rules
/sbin/iptables -t nat -F PREROUTING
/sbin/iptables -t nat -F POSTROUTING

if [ "\$1" == "startup" ];then
  EXT_IP="$mdmconf{'Address'}";
  INT_NAME="ppp0";
 else
  if [ ! "\$1" ] || [ ! "\$4" ];then
   exit
  fi
fi; 

if [ "\$4" ];then
  EXT_IP="\$4";
  INT_NAME="\$1";
fi;

__EOB__

  print FWP "#NAT All Connections\n\n";

  if ($mailconf{'Redirect'} ne "") {
    print FWP "\n#Redirect Mail\n\n";
    print FWP "/sbin/iptables -A PREROUTING -j DNAT -t nat -p tcp  --to-destination $mailconf{'Redirect'}:25 -s 0/0 -d \$EXT_IP/32 --dport  25\n";
  }

  print FWP "\n#Masquerade The Network\n";
  print FWP "/sbin/iptables -A POSTROUTING -j SNAT --to-source \$EXT_IP -o \$INT_NAME -t nat -s $nw/@idata[2] -d 0/0\n";


  print FWP "\n###Send And Recive Mail\n";
  print FWP "if [ \"\$0\" == \"/etc/ppp/ip-up\" ] && [ \"\$4\" != \"hotplug\" ];then\n";
  print FWP "  (/usr/bin/fetchmail;sendmail -q;sendmail -q -Ac) > /dev/null 2>&1 &\n";
  print FWP "fi;\n";

 
  print FW "if [ \"\$1\" == \"startup\" ];then\n";
  print FW "  /etc/rc.d/rc.firewall2 startup\n";
  print FW "  if [ -e /tmp/pppup/ext.ip-up ];then\n";
  print FW "    for link in /tmp/pppup/ext.ip-up /tmp/pppup/ppp*.ip-up ;do\n";
  print FW "      if [ -x \$link ];then\n";
  print FW "        \$link\n";
  print FW "      fi;\n";
  print FW "    done;\n";
  print FW "  fi;\n";
  print FW "fi;\n\n";

  print FW "if [ -x /etc/firewall.local ];then\n";
  print FW "  /etc/firewall.local\n";
  print FW "fi;\n";

  close(IF);
  close(FW);
  close(FWP);
}

sub printtables() {
  open(FW,">iptables");
  chmod(0600,"iptables");

  open(IF,">rc.interface");
  chmod(0600,"rc.interface");

  open(FWP,">iptables2");
  chmod(0600,"iptables2");

  open(FWD,">ipdown");
  chmod(0600,"ipdown");

  $smartkey=encode_base64($dnsconf{'SmartKey'});
  chop $smartkey;
  $nat="\$NATCMD";

  print FW "#!/bin/bash\n\n";
  print FWP "#!/bin/bash\n\n";
  print IF "#!/bin/bash\n\n";


  if ($sysconf{'Bridge'} ne "") {
    print IF "#Configure Bridge\n";
    print IF "/usr/sbin/brctl addbr $sysconf{'Internal'} > /dev/null 2>&1\n\n#Add Members\n(";
    @brint=split(/ /,$sysconf{'Bridge'});
    $brcnt=0;
    foreach $bint (@brint) {
      if ($brcnt > 0) {
        print IF "\n";
      }
      print IF "/sbin/ip link set $bint up\n";
      print IF "/usr/sbin/brctl addif $sysconf{'Internal'} $bint";
      $brcnt++;
    }
    print IF ") > /dev/null 2>&1\n";
    print IF "/usr/sbin/brctl stp $sysconf{'Internal'} on > /dev/null 2>&1\n\n";
  }

  foreach $vlan (@vlanids) {
    ($vint,$vid)=split(/\./,$vlan);
    if (index($vid,":") eq -1) {
      $ifvlan{$vint} .="$vid ";
    }
  }
  foreach $route (@genroute) {
    @idata=split(/\|/,$groutes{$route});
    @idata[0]=join(" ",split(/_/,@idata[0]));

    foreach $iface (@ints) {
      @ifdata=split(/\|/,$interface{$iface});
      $nw=getnw(@ifdata[2],@ifdata[1]);
      $rnw=getnw(@ifdata[2],@idata[3]);
      if (index(@ifdata[3],":") eq -1) {
        $ifnme=@ifdata[3];
      } else {
        ($ifnme)=split(/:/,@ifdata[3]);
      }
      if ($nw == $rnw) {
        $sroutes{$ifnme} .="@idata[1]/@idata[2]:@idata[3] ";
        break;
      }
    }
  }


  $sfnew="-m state --state ESTABLISHED,NEW ";
  $sfnre="-m state --state ESTABLISHED,NEW,RELATED ";
  $sfrel="-m state --state ESTABLISHED,RELATED ";
  $sfnrel="-m state --state NEW,RELATED ";
  $sfold="-m state --state ESTABLISHED ";
	
  $imqcnt=6;
  foreach $iface (@ints) {    
    @idata=split(/\|/,$interface{$iface});
    @idata[0]=join(" ",split(/_/,@idata[0]));
    $snm=getsn(@idata[2]);
    $bcaddr=getbc(@idata[2],@idata[1]);
    $nw=getnw(@idata[2],@idata[1]);
    if ((index(@idata[3],"gtun") eq -1) &&
        (index(@idata[3],":") eq -1)) {
      open(BWM,">ifbw.$iface");
      chmod(0600,"ifbw.$iface");
      open(IFUP,">ifup.$iface");
      chmod(0600,"ifup.$iface");

      if (index(@idata[3],":") eq -1) {
        print IFUP "IFNAME=\"@idata[3]\";\n";
        $ifnme=@idata[3];
      } else {
        ($ifnme)=split(/:/,@idata[3]);
        print IFUP "IFNAME=\"$ifnme\";\n";
      }
      print IFUP <<__EOI__;
MADDR=@idata[8];
ADDRESS="@idata[1]";
NETMASK="@idata[2]";
BROADCAST="$bcaddr";
NETWORK="$nw";
__EOI__
      if ($sysconf{'External'} eq $ifnme) {
        print IFUP "DEFAULT=\"$sysconf{'Nexthop'}\";\n";
      }
      if ($sroutes{$ifnme} ne "") {
        chop $sroutes{$ifnme};
        print IFUP "ROUTES=\"$sroutes{$ifnme}\";\n";
      }
      if (($ifvlan{$ifnme} ne "") && (index($ifnme,":") eq "-1")) {
        chop $ifvlan{$ifnme};
        print IFUP "VLANS=\"$ifvlan{$ifnme}\";\n";
      }
      if ($ifalias{$ifnme} ne "") {
        chop $ifalias{$ifnme};
        print IFUP "ALIASES=\"$ifalias{$ifnme}\";\n";
      }
      if ($sysconf{'Internal'} ne $sysconf{'External'}) {
        if ($ifnme eq $sysconf{'Internal'}) {
          print IFUP "FIREWALL=\"INTERNAL\";\n";
          print IFUP "FORWARD=1;\n";
        }
        if ($ifnme eq $sysconf{'External'}) {
          print IFUP "FIREWALL=\"EXTERNAL\";\n";
        }
      } else {
          print IFUP "FIREWALL=\"INTERNAL\";\n";
          print IFUP "FORWARD=0;\n";
      }
      if ($wificard{@idata[3]} ne "") {
        @wifidat=split(/\|/,$wificard{@idata[3]});
        if (@wifidat[3] eq "") {
          @wifidat[3]="off";
        }
        if (@wifidat[4] eq "") {
          @wifidat[4]="any";
          $mode="Master";
        } else {
          $mode="Managed";
        }
        if (@wifidat[6] eq "") {
          @wifidat[6]="auto";
        } else {
          @wifidat[6] .="mW";
        }
        if (@wifidat[7] eq "") {
          @wifidat[7]="auto";
        } else {
          @wifidat[7] .="M auto";
        }
        print IFUP <<__EOI__;
ESSID="@wifidat[1]";
NAME="@wifidat[2]";
KEY=@wifidat[3];
AP=@wifidat[4];
MODE=$mode;
CHANNEL=@wifidat[5];
POWER=@wifidat[6];
RATE="@wifidat[7]";
__EOI__
      }

      if (($iface eq $mdmconf{'ComPort'}) && ($mdmconf{'Connection'} eq "ADSL") && ($sysconf{'External'} eq "Dialup")) {
        $ppplink{$iface}.="0 ";
      }

      if ($ppplink{$iface} ne "") {
        $lmtu=$mdmconf{'MTU'};
        $vmtu=$lmtu-4;
        chop $ppplink{$ifnme};
        print IFUP "PPPLINKS=" . $ppplink{$ifnme} . "\n";
      } else {
        $lmtu=1500;
        $vmtu=1496;
      }

      if ($ifvlan{$ifnme} ne "") {
        print IFUP "VMTU=" . $vmtu .";\n";
      }
      print IFUP "MTU=" . $lmtu . ";\n";
      if ((index(@idata[3],":") eq "-1") && ($iface ne $sysconf{'External'}) &&
          (index(@idata[3],"gtun") eq -1)){
        print IFUP "RP_FIL=1;\n";

      } elsif ($iface eq $sysconf{'External'}) {
        print IFUP "RP_FIL=0;\n";
      }
      if (($iface ne $sysconf{'External'}) && ($iface ne $sysconf{'Internal'})) {
        print IFUP "OLIMIT=@idata[6]\n";
        print IFUP "OLIMITK=" . (@idata[6]/8)*1024 . "\n";
        print IFUP "OLIMIT50=" . @idata[6]*0.5 . "\n";
        print IFUP "OLIMIT30=" . @idata[6]*0.3 . "\n";
        print IFUP "OLIMIT20=" . @idata[6]*0.2 . "\n";
        print IFUP "ILIMIT=@idata[7]\n";
        print IFUP "ILIMITK=" . (@idata[7]/8)*1024 . "\n";
        print IFUP "ILIMIT50=" . @idata[7]*0.5 . "\n";
        print IFUP "ILIMIT30=" . @idata[7]*0.3 . "\n";
        print IFUP "ILIMIT20=" . @idata[7]*0.2 . "\n";
      }
      close(IFUP);
    }

    $inlan=getnw(@idata[2],@idata[1]);

    if ((@idata[7] ne "") && (index(@idata[3],":") eq -1)){
      if ($sysconf{'External'} eq @idata[3]) {
        $imqcnti=0;
      } else {
        $imqcnti=$imqcnt;
      }
      if (($imqcnti <= 15) && ($imqcnti > 0)){
        print BWM<<__EOB__;

#Bring up imq Interface
/sbin/ip link set imq$imqcnti up
/sbin/tc qdisc del dev imq$imqcnti root > /dev/null 2>&1

#Apply ingress limit
/sbin/tc qdisc add dev imq$imqcnti root handle 1: htb default 50
/sbin/tc class add dev imq$imqcnti parent 1: classid 1:1 htb rate @idata[6]Kbit
/sbin/tc class add dev imq$imqcnti parent 1:1 classid 1:50 htb rate @idata[6]Kbit ceil @idata[6]Kbit
/sbin/tc qdisc add dev imq$imqcnti parent 1:50 handle 50: sfq perturb 10

__EOB__
      } elsif ($imqcnti != 0) {
        print BWM<<__EOB__;
#Apply ingress limit
#/sbin/tc qdisc del dev @idata[3] handle ffff: ingress
#/sbin/tc qdisc add dev @idata[3] handle ffff: ingress
#/sbin/tc filter add dev @idata[3] parent ffff: protocol ip u32 match ip dst $inlan/@idata[2] police rate @idata[7]bit burst 1500 drop flowid :50

__EOB__
      }
      if ($imqcnti != 0){
        print BWM<<__EOB__;
#delete egress class
/sbin/tc qdisc del dev @idata[3] root > /dev/null 2>&1

#Apply egress limit
/sbin/tc qdisc add dev @idata[3] root handle 1: htb default 50
/sbin/tc class add dev @idata[3] parent 1: classid 1:1 htb rate @idata[7]Kbit
/sbin/tc class add dev @idata[3] parent 1:1 classid 1:50 htb rate @idata[7]Kbit ceil @idata[7]Kbit
/sbin/tc qdisc add dev @idata[3] parent 1:50 handle 50: sfq perturb 10

__EOB__
        for($sncnt=1;$sncnt <= $fwbwcnt{@idata[3]};$sncnt++) {
          $classcnt=50+$sncnt;
          @bwdata=split(/\|/,$fwbwsrc{@idata[3]}[$sncnt-1]);
          print BWM <<__EOB__;
#Limit Data For @bwdata[0] to @bwdata[4]/@bwdata[5]kbs
/sbin/tc class add dev @idata[3] parent 1:1 classid 1:$classcnt htb rate @bwdata[4]Kbit ceil @idata[7]Kbit
/sbin/tc qdisc add dev @idata[3] parent 1:$classcnt handle $classcnt: sfq perturb 10
/sbin/tc filter add dev @idata[3] parent 1: protocol ip prio $sncnt u32 match ip dst @bwdata[1]/@bwdata[2] flowid 1:$classcnt
__EOB__
      }

      if (($imqcnti <= 15) && ($imqcnti >0)){
        print BWM<<__EOB__;
/sbin/tc class add dev imq$imqcnti parent 1:1 classid 1:$classcnt htb rate @bwdata[4]Kbit ceil @idata[6]Kbit
/sbin/tc qdisc add dev imq$imqcnti parent 1:$classcnt handle $classcnt: sfq perturb 10
/sbin/tc filter add dev imq$imqcnti parent 1: protocol ip prio $sncnt u32 match ip src @bwdata[1]/@bwdata[2] flowid 1:$classcnt
__EOB__
      } elsif ($imqcnti != 0){
        print BWM<<__EOB__;
/sbin/tc filter add dev @idata[3] parent ffff: protocol ip prio $sncnt u32 match ip src @bwdata[1]/@bwdata[2] flowid 1:$classcnt
__EOB__
      }


#/sbin/tc filter add dev @idata[3] parent 1: protocol ip prio $sncnt u32 match ip dst @bwdata[1]/@bwdata[2] match ip src @idata[1]/32 flowid 1:50
#/sbin/tc filter add dev imq$imqcnti parent 1: protocol ip prio $sncnt u32 match ip src @bwdata[1]/@bwdata[2] match ip dst @idata[1]/32 flowid 1:50

      }
      $imqcnt++;
      close(BWM);
    }
  }

  if ($sysconf{'External'} eq "Dialup") {
    if (($mdmconf{'Connection'} eq "ADSL") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW")) {
      $suint="lo";
      $mdmconf{'Address'}="127.0.0.1";
    } else {
      $suint="ppp0";
    }
  } else {
    $suint=$sysconf{'External'};
    @eipdat=split(/\|/,$interface{$extint});
    $mdmconf{'Address'}=@eipdat[1];
  }

  $imqmax=($tcctl{'Ingress'}/8)*1024;
  $imqmaxo=($tcctl{'Egress'}/8)*1024;


  print IF "#Enable IP Forwarding\n";
  print IF "echo 1 > /proc/sys/net/ipv4/ip_forward\n\n";

  if (($mdmconf{'Connection'} eq "ADSL") || ($sysconf{'External'} eq "Dialup") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW")) {
    print IF "#Using Dynamic Addressing\n";
    print IF "echo 1 > /proc/sys/net/ipv4/ip_dynaddr\n\n";
  }

  if ($wirelessrange ne "") {
    @wrdat=split(/\//,$wirelessrange);
    $wnumip=getsncount(@wrdat[1]);
    @ipwqu=split(/\./,@wrdat[0]);
    @ipwqu[3]++;
    $wrstart=join(".",@ipwqu);

    @ipwqu[3]++;
    $wrfirst=join(".",@ipwqu);

    $wrfirst=getnw(@wrdat[1],@wrdat[0]);

    $intintname=$sysconf{'Internal'};
    @idata=split(/\|/,$interface{$intintname});

    print IF <<__EOF__;
PPPoESERVPID=`/bin/pidof pppoe-server`

if [ "\$PPPoESERVPID" ];then
  kill \$PPPoESERVPID
  sleep 5
fi;

#Start PPPoE Server
/usr/sbin/pppoe-server -sru -o 20 -I $wirelessint -L @idata[1] -R $wrfirst -N $wnumip -S $dnsconf{'Domain'}
__EOF__
#/sbin/ip addr add $wrstart/@wrdat[1] dev $sysconf{'Internal'}

  } elsif (($sysconf{'Internal'} ne $sysconf{'External'}) && ($mdmconf{'Connection'} eq "ADSL")) {
    print IF <<__EOF__;
PPPoESERVPID=`/bin/pidof pppoe-relay`

if [ "\$PPPoESERVPID" ];then
  kill \$PPPoESERVPID
  sleep 5
fi;

#Start PPPoE Relay
/usr/sbin/pppoe-relay -C $wirelessint -S $mdmconf{'ComPort'}
__EOF__
  } elsif (($sysconf{'Internal'} ne $sysconf{'External'}) && ($mdmconf{'Connection'} eq "ADSL")) {
    print IF <<__EOF__;
PPPoESERVPID=`/bin/pidof pppoe-relay`

if [ "\$PPPoESERVPID" ];then
  kill \$PPPoESERVPID
  sleep 5
fi;

#Start PPPoE Relay
/usr/sbin/pppoe-relay -C $wirelessint -S $sysconf{'External'}
__EOF__
  }

  if (index($sysconf{'Internal'},":") ne "-1") {
    $ethint=substr($sysconf{'Internal'},0,4);
  } else {
    $ethint=$sysconf{'Internal'};
  }
  @idata=split(/\|/,$interface{$ethint});
  $localip=@idata[1];

print FWP<<__EOB__;
#Configure PPP Addresses

#Exit if not called as ip-up or ip-down

if [ "\$1" == "startup" ];then
  DEST_IP="$sysconf{'Nexthop'}";
  EXT_IP="$mdmconf{'Address'}/32";
  EXT_IP_ADDR="$mdmconf{'Address'}";
  INT_IN="-i $suint ";
  INT_NAME="$suint";
  INT_OUT="-o $suint ";
 else
  if [ ! "\$1" ] || [ ! "\$4" ];then
   exit
  fi
fi; 

if [ "\$1" ] && [ "\$1" != "startup" ];then
  INT_IN="-i \$1 ";
  INT_OUT="-o \$1 ";
  INT_NAME="\$1";
fi;

if [ "\$4" ];then
  if [ "\$4" == "hotplug" ];then
    EXT_IP="\$2/32";
    EXT_IP_ADDR="\$2";
    DEST_IP="\$3";
   else
    EXT_IP="\$4/32";
    EXT_IP_ADDR="\$4";
    DEST_IP="\$5";
  fi;
fi;

if [ "\$0" == "/etc/ppp/ip-up" ];then
  if [ "\$6" == "" ];then
    if [ ! -d /tmp/pppup ];then
      mkdir /tmp/pppup
    fi;
    if [ "\${1}" == "ppp0" ];then
      (echo "#\!/bin/bash";echo;echo "\$0 \$\@") > /tmp/pppup/ext.ip-up
      chmod 700 /tmp/pppup/ext.ip-up
    fi;
  fi;
  NATCMD="SNAT --to-source \$EXT_IP_ADDR";
  /usr/bin/hostaddr \$EXT_IP_ADDR \$INT_NAME
  if [ ! "\$6" ] && [ "\${1}" == "ppp0" ];then
    /sbin/ip route del 0/0 table 90
    /sbin/ip route add \$DEST_IP src \$EXT_IP_ADDR dev \$INT_NAME scope link table 90
    /sbin/ip route add 0/0 via \$DEST_IP src \$EXT_IP_ADDR dev \$INT_NAME table 90
  fi;
 else
  NATCMD="SNAT --to-source \$EXT_IP_ADDR";
fi;

if [ "\$6" == "3g" ];then
  (cat <<EOF
server $dnsconf{'DynServ'}
key $dnsconf{'DynZone'} $smartkey
zone $dnsconf{'DynZone'}
update delete \$6.$dnsconf{'DynZone'}. A
update add \$6.$dnsconf{'DynZone'}. 180 A \$EXT_IP_ADDR
send
EOF
)>/tmp/dnsup.\$6.ppp

  chmod 640 /tmp/dnsup.\$6.ppp
  echo \$1 > /tmp/ppp.\$6.int
  /usr/bin/nsupdate /tmp/dnsup.\$6.ppp
  /sbin/ip route add \$DEST_IP/32 dev \$INT_NAME src \$EXT_IP_ADDR table 80;
  /sbin/ip route add 0/0 via \$DEST_IP dev \$INT_NAME src \$EXT_IP_ADDR table 95;
  /sbin/iptables -F 3GIN
  /sbin/iptables -F 3GOUT
  /sbin/iptables -t nat -F 3GNAT

  /sbin/iptables -A 3GIN -j ACCEPT -i \$INT_NAME
  /sbin/iptables -I 3GOUT -j ACCEPT -o \$INT_NAME
  /sbin/iptables -t nat -A 3GNAT -j SNAT -o \$INT_NAME --to-source \$EXT_IP_ADDR

  if [ "\$USEPEERDNS" == "1" ] && [ "\$DNS1" ];then
    if [ "\$DNS2" ];then
       FWD="\${DNS1};\${DNS2}";
     else
      FWD=\${DNS1}
    fi;
    echo "FWD=\\\"\${FWD}\\\";" > /etc/named.fwd
    sed -e "s/^#FWD/       forwarders \\{\$FWD;\\};/" /etc/named.conf.orig > /etc/named.conf
  fi;

__EOB__

if ($sysconf{'External'} eq $sysconf{'Internal'}) {
  print FWP "fi;\n";

  print FW<<__EOB__;

#Flush Tables And Chains And Exit 
/sbin/iptables -F
/sbin/iptables -X
/sbin/iptables -t nat -F
/sbin/iptables -t nat -X
/sbin/iptables -t mangle -F
/sbin/iptables -t mangle -X

/sbin/iptables -P INPUT ACCEPT
/sbin/iptables -P OUTPUT ACCEPT
/sbin/iptables -P FORWARD ACCEPT

/sbin/iptables -N 3GOUT
/sbin/iptables -N 3GIN
/sbin/iptables -t nat -N SIPMAP
/sbin/iptables -t nat -N SIPNAT
/sbin/iptables -t nat -N 3GNAT
/sbin/iptables -t nat -N NATMAPI
/sbin/iptables -t nat -N NATMAPO
/sbin/iptables -t nat -N MANGLE

/sbin/iptables -t nat -A PREROUTING -j SIPMAP
/sbin/iptables -t nat -A PREROUTING -j NATMAPI
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 5000 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 5060 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 4569 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p tcp -s $localip --sport 5060:5061 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 1718:1720 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j MANGLE -o ppp+
/sbin/iptables -t nat -A POSTROUTING -j NATMAPO

__EOB__

  print FW <<_EOB_;
/sbin/iptables -t nat -N DEFPROXY
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p tcp --to-destination $localip --sport 1024:65535 --dport 80
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 4569
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 5000
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 5060
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p tcp --to-destination $localip --sport 1024:65535 --dport 5060:5061
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 10000:20000
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 1718:1720

_EOB_

  foreach $iface (@ints) {
    if (($iface ne $sysconf{'Internal'}) && ($iface ne $sysconf{'External'})) {
      @idata=split(/\|/,$interface{$iface});
      $linkip=@idata[1];
      if (index($iface,":") ne -1) {
        $iface=substr($iface,0,index($iface,":"));
      }
      if ((@idata[1] ne "0.0.0.0") || (@idata[2] ne "32")) {
        $linknw=getnw(@idata[2],@idata[1]);
        print FW "#SIP/RTP Proxy For $iface @idata[1]\n";
        print FW "/sbin/iptables -t nat -A SIPMAP -j DEFPROXY -i $iface -d $linkip/32\n";
        print FW "/sbin/iptables -t nat -I SIPNAT -j SNAT -o $iface -d $linknw/@idata[2] --to-source @idata[1]\n\n";
      }
    }
  }

  print FW "\nif [ -x /etc/firewall.local ];then\n";
  print FW "  /etc/firewall.local\n";
  print FW "fi;\n";

  close(FW);
  return;
} else {
  print FWP<<__EOB__;
 elif [ ! "\$6" ];then
  #Set Bandwidth Rate

  #Delete Existing Classes
  /sbin/tc qdisc del dev \$INT_NAME root > /dev/null 2>&1
  /sbin/tc qdisc del dev imq0 root > /dev/null 2>&1

  if [ "$tcctl{'Ingress'}" != "" ];then
    #Apply ingress limit
    if [ ! -e /var/spool/apache/htdocs/mrtg/bw-imq0.rrd ];then
      /usr/bin/rrdtc $sysconf{'External'}
    fi;
    rrdtool tune /var/spool/apache/htdocs/mrtg/bw-imq0.rrd -a high:$imqmax -a med:$imqmax -a low:$imqmax -i high:0 -i med:0 -i low:0
    /sbin/ip link set imq0 up
    /sbin/tc qdisc add dev imq0 root handle 1: htb default 20 r2q 1
    /sbin/tc class add dev imq0 parent 1: classid 1:1 htb rate $tcctl{'Ingress'}Kbit
    /sbin/tc class add dev imq0 parent 1:1 classid 1:10 htb rate $tcctl{'Ingress50'}Kbit ceil $tcctl{'Ingress'}Kbit
    /sbin/tc class add dev imq0 parent 1:1 classid 1:20 htb rate $tcctl{'Ingress30'}Kbit ceil $tcctl{'Ingress'}Kbit
    /sbin/tc class add dev imq0 parent 1:1 classid 1:30 htb rate $tcctl{'Ingress20'}Kbit ceil $tcctl{'Ingress'}Kbit
    /sbin/tc qdisc add dev imq0 parent 1:10 handle 10: sfq perturb 10
    /sbin/tc qdisc add dev imq0 parent 1:20 handle 20: sfq perturb 10
    /sbin/tc qdisc add dev imq0 parent 1:30 handle 30: sfq perturb 10
    /sbin/tc filter add dev imq0 parent 1: protocol ip handle 0x101 fw flowid 1:10
    /sbin/tc filter add dev imq0 parent 1: protocol ip handle 0x102 fw flowid 1:20
    /sbin/tc filter add dev imq0 parent 1: protocol ip handle 0x103 fw flowid 1:30
  fi;

  if [ "$tcctl{'Egress'}" != "" ] && [ "\$INT_NAME" != "lo" ];then
    #Apply egress limit
    if [ ! -e /var/spool/apache/htdocs/mrtg/bw-\${INT_NAME}.rrd ];then
      /usr/bin/rrdtc $sysconf{'External'}
    fi;
    rrdtool tune /var/spool/apache/htdocs/mrtg/bw-\${INT_NAME}.rrd -a high:$imqmaxo -a med:$imqmaxo -a low:$imqmaxo -i high:0 -i med:0 -i low:0
    /sbin/tc qdisc add dev \$INT_NAME root handle 1: htb default 20 r2q 1
    /sbin/tc class add dev \$INT_NAME parent 1: classid 1:1 htb rate $tcctl{'Egress'}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:10 htb rate $tcctl{'Egress50'}Kbit ceil $tcctl{'Egress'}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:20 htb rate $tcctl{'Egress30'}Kbit ceil $tcctl{'Egress'}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:30 htb rate $tcctl{'Egress20'}Kbit ceil $tcctl{'Egress'}Kbit
    /sbin/tc qdisc add dev \$INT_NAME parent 1:10 handle 10: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:20 handle 20: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:30 handle 30: sfq perturb 10
  fi; 

  #Flush Tables
  /sbin/iptables -F EXTIN
  /sbin/iptables -F EXTOUT
  /sbin/iptables -t nat -F EXTNAT
  /sbin/iptables -t mangle -F SYSTOS
  /sbin/iptables -t mangle -F NOSYSTOS
  /sbin/iptables -t mangle -F LOCALTOS
#  /sbin/iptables -t mangle -F VPN
#  /sbin/iptables -F VPNLIN
#  /sbin/iptables -F VPNLOUT
  /sbin/iptables -F LOCALIN
  /sbin/iptables -F LOCALOUT
  /sbin/iptables -F SBSRULESI
  /sbin/iptables -F SBSRULESO
  /sbin/iptables -F LOCALFWD
  /sbin/iptables -t nat -F LOCALPROXY
  /sbin/iptables -t nat -F NOFWDNAT
  /sbin/iptables -t nat -F NOPPPNAT
  /sbin/iptables -t nat -F EXTPROXY
  /sbin/iptables -t mangle -F LOCALIN
  /sbin/iptables -t mangle -F LOCALOUT
#  /sbin/iptables -F PROXYFWD

__EOB__

  print FW<<__EOB__;
#
#Firewall Startup
#

#Add Access For DHCP On Wan/DMZ
#Add Access For Web Redirects

if [ \"\$1\" == "startup" ];then
  /sbin/iptables -F
  /sbin/iptables -X
  /sbin/iptables -t nat -F
  /sbin/iptables -t nat -X
  /sbin/iptables -t mangle -F
  /sbin/iptables -t mangle -X

  /sbin/iptables -N DENY
  /sbin/iptables -N ICMP
  /sbin/iptables -N ACCT
  /sbin/iptables -N 3GIN
  /sbin/iptables -N 3GOUT
  /sbin/iptables -N MANGLEFWD
  /sbin/iptables -N MANGLEIN
  /sbin/iptables -N MANGLEOUT
  /sbin/iptables -N LOOPIN
  /sbin/iptables -N LOOPOUT
#  /sbin/iptables -N PROXYIN
#  /sbin/iptables -N PROXYOUT
  /sbin/iptables -N SMBIN
  /sbin/iptables -N SMBOUT
  /sbin/iptables -N NFSIN
  /sbin/iptables -N NFSOUT
  /sbin/iptables -N SMBNFSIN
  /sbin/iptables -N SMBNFSOUT
  /sbin/iptables -N SYSIN
  /sbin/iptables -N DNSIN
  /sbin/iptables -N DHCPIN
  /sbin/iptables -N DHCPOUT
  /sbin/iptables -N VOIPIN
  /sbin/iptables -N VOIPOUT
  /sbin/iptables -N MCASTIN
  /sbin/iptables -N SYSOUT
  /sbin/iptables -N SIPOUT
  /sbin/iptables -N SIPIN
  /sbin/iptables -N DNSOUT
  /sbin/iptables -N MCASTOUT
  /sbin/iptables -N VPNCIN
  /sbin/iptables -N VPNCOUT
  /sbin/iptables -N OVPNIN
  /sbin/iptables -N OVPNOUT
  /sbin/iptables -N VPNFWD
  /sbin/iptables -N OVPNFWD
  /sbin/iptables -N DNSFWD
  /sbin/iptables -N EXTIN
  /sbin/iptables -N TARPIT
  /sbin/iptables -N EXTOUT
  /sbin/iptables -N DEFIN
  /sbin/iptables -N DEFOUT
#  /sbin/iptables -N VPNLIN
#  /sbin/iptables -N VPNLOUT
  /sbin/iptables -N SBSRULESI
  /sbin/iptables -N LOCALIN
  /sbin/iptables -N LOCALOUT
  /sbin/iptables -N SBSRULESO
  /sbin/iptables -N LOCALFWD
  /sbin/iptables -N WANFWD
  /sbin/iptables -N PPPIN
  /sbin/iptables -N PPPOUT
  /sbin/iptables -N PPPFWD
#  /sbin/iptables -N PROXYFWD

  /sbin/iptables -t nat -N SIPLB
  /sbin/iptables -t nat -N SIPMAP
  /sbin/iptables -t nat -N SIPNAT
  /sbin/iptables -t nat -N 3GNAT
  /sbin/iptables -t nat -N NATMAPI
  /sbin/iptables -t nat -N NATMAPO
  /sbin/iptables -t nat -N WEBACCESS
  /sbin/iptables -N WEBACCESSI
  /sbin/iptables -N WEBACCESSO
  /sbin/iptables -t nat -N PROXYBYPASS
  /sbin/iptables -t nat -N TXPROXY
  /sbin/iptables -t nat -N NONAT
  /sbin/iptables -t nat -N NOFWDNAT
  /sbin/iptables -t nat -N NOPPPNAT
  /sbin/iptables -t nat -N VPNNAT
  /sbin/iptables -t nat -N DMZNAT
  /sbin/iptables -t nat -N VPNWEB
  /sbin/iptables -t nat -N EXTNAT
  /sbin/iptables -t nat -N MANGLE
  /sbin/iptables -t nat -N DEFPROXY
  /sbin/iptables -t nat -N MANGLEPROXY
  /sbin/iptables -t nat -N LOCALPROXY
  /sbin/iptables -t nat -N EXTPROXY

  /sbin/iptables -t mangle -N SIPLB -m mark --mark 0
  /sbin/iptables -t mangle -N DMZ0
  /sbin/iptables -t mangle -N DMZ1
  /sbin/iptables -t mangle -N DMZ2
  /sbin/iptables -t mangle -N DMZ3
  /sbin/iptables -t mangle -N DMZ4
  /sbin/iptables -t mangle -N DMZ5
  /sbin/iptables -t mangle -N DMZ6
  /sbin/iptables -t mangle -N DMZ7
  /sbin/iptables -t mangle -N DMZ8
  /sbin/iptables -t mangle -N DMZ9

  /sbin/iptables -t mangle -N SYSTOS
  /sbin/iptables -t mangle -N NOSYSTOS
  /sbin/iptables -t mangle -N LOCALTOS
  /sbin/iptables -t mangle -N LOADBIN
  /sbin/iptables -t mangle -N LOADBOUT
  /sbin/iptables -t mangle -N SYSINGRESS
  /sbin/iptables -t mangle -N LOCALIN
  /sbin/iptables -t mangle -N LOCALOUT
  /sbin/iptables -t mangle -N SYSEGRESS
  /sbin/iptables -t mangle -N PPPOECLAS
  /sbin/iptables -t mangle -N IMQTBL
  /sbin/iptables -t mangle -N CMARK
  /sbin/iptables -t mangle -N VPN
  /sbin/iptables -t mangle -N MANGLEP1
  /sbin/iptables -t mangle -N MANGLEP2
  /sbin/iptables -t mangle -N MANGLEP3
  /sbin/iptables -t mangle -N MANGLEP4
  /sbin/iptables -t mangle -N MANGLEP5
  /sbin/iptables -t mangle -N MANGLEO1
  /sbin/iptables -t mangle -N MANGLEO2
  /sbin/iptables -t mangle -N MANGLEO3
  /sbin/iptables -t mangle -N MANGLEO4
  /sbin/iptables -t mangle -N MANGLEO5
#  /sbin/iptables -t mangle -N MANGLEF1
#  /sbin/iptables -t mangle -N MANGLEF2
#  /sbin/iptables -t mangle -N MANGLEF3
#  /sbin/iptables -t mangle -N MANGLEF4
#  /sbin/iptables -t mangle -N MANGLEF5

fi;

#Flush Tables And Chains
/sbin/iptables -P INPUT DROP
/sbin/iptables -P OUTPUT DROP
/sbin/iptables -P FORWARD DROP

/sbin/iptables -F INPUT
/sbin/iptables -F OUTPUT
/sbin/iptables -F FORWARD

/sbin/iptables -F DENY
/sbin/iptables -F ICMP
/sbin/iptables -F ACCT
/sbin/iptables -F LOOPIN
/sbin/iptables -F LOOPOUT
#/sbin/iptables -F PROXYIN
#/sbin/iptables -F PROXYOUT
/sbin/iptables -F SMBIN
/sbin/iptables -F SMBOUT
/sbin/iptables -F NFSIN
/sbin/iptables -F NFSOUT
/sbin/iptables -F SMBNFSIN
/sbin/iptables -F SMBNFSOUT
/sbin/iptables -F SYSIN
/sbin/iptables -F DNSIN
/sbin/iptables -F DHCPIN
/sbin/iptables -F DHCPOUT
/sbin/iptables -F MANGLEIN
/sbin/iptables -F MANGLEOUT
/sbin/iptables -F VOIPIN
/sbin/iptables -F VOIPOUT
/sbin/iptables -F MCASTIN
/sbin/iptables -F SYSOUT
/sbin/iptables -F SIPOUT
/sbin/iptables -F SIPIN
/sbin/iptables -F DNSOUT
/sbin/iptables -F MCASTOUT
/sbin/iptables -F VPNCIN
/sbin/iptables -F VPNCOUT
/sbin/iptables -F OVPNIN
/sbin/iptables -F OVPNOUT
/sbin/iptables -F VPNFWD
/sbin/iptables -F OVPNFWD
/sbin/iptables -F DNSFWD
/sbin/iptables -F PPPIN
/sbin/iptables -F PPPOUT
/sbin/iptables -F PPPFWD
/sbin/iptables -F TARPIT
/sbin/iptables -F DEFIN
/sbin/iptables -F DEFOUT

/sbin/iptables -t nat -F PREROUTING
/sbin/iptables -t nat -F POSTROUTING
/sbin/iptables -t nat -F OUTPUT
/sbin/iptables -t nat -F PROXYBYPASS
/sbin/iptables -t nat -F WEBACCESS
/sbin/iptables -F WEBACCESSI
/sbin/iptables -F WEBACCESSO
/sbin/iptables -t nat -F TXPROXY
/sbin/iptables -t nat -F NONAT
/sbin/iptables -t nat -F VPNNAT
/sbin/iptables -t nat -F DMZNAT
/sbin/iptables -t nat -F VPNWEB
/sbin/iptables -t nat -F SIPMAP
/sbin/iptables -t nat -F SIPNAT
/sbin/iptables -t nat -F SIPLB
/sbin/iptables -t mangle -F SIPLB
/sbin/iptables -t mangle -F CMARK
/sbin/iptables -t mangle -F VPN
/sbin/iptables -t mangle -F DMZ0
/sbin/iptables -t mangle -F DMZ1
/sbin/iptables -t mangle -F DMZ2
/sbin/iptables -t mangle -F DMZ3
/sbin/iptables -t mangle -F DMZ4
/sbin/iptables -t mangle -F DMZ5
/sbin/iptables -t mangle -F DMZ6
/sbin/iptables -t mangle -F DMZ7
/sbin/iptables -t mangle -F DMZ8
/sbin/iptables -t mangle -F DMZ9

#
#Firewall Configuration
#


#Configure A Deny Policy To Log And Send Appropriate Reply

/sbin/iptables -A DENY -j ACCEPT -p tcp -m state --state RELATED  --tcp-flags SYN,ACK,RST ACK,RST
/sbin/iptables -A DENY -j ACCEPT -p tcp --tcp-flags SYN,PSH PSH -m length --length 40
/sbin/iptables -A DENY -j ACCEPT -p tcp --tcp-flags SYN,RST RST -m length --length 40
/sbin/iptables -A DENY -j ACCEPT -p tcp --tcp-flags SYN,FIN FIN -m length --length 40
/sbin/iptables -A DENY -j DROP -d 255.255.255.255/32
__EOB__

  foreach $int (@ints) {
    @idata=split(/\|/,$interface{$int});
    if ((@idata[1] eq "0.0.0.0") || (@idata[2] eq "32")) {
      next;
    }
    if (index(@idata[3],":") ne -1) {
        @idata[3]=substr(@idata[3],0,index(@idata[3],":"));
    }
    $nwaddr=getnw(@idata[2],@idata[1]);
    $bcaddr=getbc(@idata[2],@idata[1]);

    print FW "/sbin/iptables -A DENY -j DROP -i @idata[3] -s $nwaddr/@idata[2] -d $bcaddr\n";
    print FW "/sbin/iptables -A DENY -j DROP -i @idata[3] -d $bcaddr -p udp --sport 137 --dport 137\n";
    print FW "/sbin/iptables -A DENY -j DROP -i @idata[3] -s $nwaddr/@idata[2] -d 255.255.255.255\n";
    print FW "/sbin/iptables -A DENY -j DROP -i @idata[3] -s $nwaddr/@idata[2] -d 224.0.0.0/3\n";
  }

  print FW<<__EOB__;
/sbin/iptables -A DENY -j ULOG 
#/sbin/iptables -A DENY -j LOG -p ! tcp --log-level info --log-ip-options --log-prefix "rejected packet "
#/sbin/iptables -A DENY -j LOG -p tcp --log-level info --log-ip-options --log-tcp-options --log-tcp-sequence --log-prefix "rejected packet "
/sbin/iptables -A DENY -j REJECT -p tcp --reject-with tcp-reset
/sbin/iptables -A DENY -j REJECT

#Activate ACCT Chain
/sbin/iptables -A INPUT -j ACCT 
/sbin/iptables -A OUTPUT -j ACCT
/sbin/iptables -A FORWARD -j ACCT

#Activate ICMP Chain
/sbin/iptables -A INPUT -j ICMP -p icmp
/sbin/iptables -A OUTPUT -j ICMP -p icmp

/sbin/iptables -A VOIPIN -j ACCEPT -p udp $sfnew --dport 5000
/sbin/iptables -A VOIPIN -j ACCEPT -p udp $sfnew --dport 5060
/sbin/iptables -A VOIPIN -j ACCEPT -p tcp $sfnew --dport 5060:5061
/sbin/iptables -A VOIPIN -j ACCEPT -p udp $sfnew --dport 4569
/sbin/iptables -A VOIPIN -j ACCEPT -p udp $sfnew --dport 1719:1722
/sbin/iptables -A VOIPIN -j ACCEPT -p udp $sfnew --dport 10000:20000

/sbin/iptables -A VOIPOUT -j ACCEPT -p udp $sfnew --sport 5000
/sbin/iptables -A VOIPOUT -j ACCEPT -p udp $sfnew --sport 5060
/sbin/iptables -A VOIPOUT -j ACCEPT -p tcp $sfnew --sport 5060:5061
/sbin/iptables -A VOIPOUT -j ACCEPT -p udp $sfnew --sport 4569
/sbin/iptables -A VOIPOUT -j ACCEPT -p udp $sfnew --sport 1719:1722
/sbin/iptables -A VOIPOUT -j ACCEPT -p udp $sfnew --sport 10000:20000

#Allow DHCP Packets
/sbin/iptables -A INPUT -j ACCEPT -p udp -s 0.0.0.0/0 --sport 68 -d 255.255.255.255 --dport 67

#Far South comma-ls
#/sbin/iptables -A INPUT -j ACCEPT -p udp -s 0.0.0.0/0 --sport 17409 -d 255.255.255.255 --dport 1024:65535

/sbin/iptables -A DHCPIN -j ACCEPT -p udp --sport 68 --dport 67
/sbin/iptables -A DHCPIN -j ACCEPT -p udp --sport 69 --dport 69
/sbin/iptables -A DHCPIN -j ACCEPT -p udp --sport 1024:65535 --dport 69

/sbin/iptables -A DHCPOUT -j ACCEPT -p udp --dport 68 --sport 67
/sbin/iptables -A DHCPOUT -j ACCEPT -p udp --dport 69 --sport 69
/sbin/iptables -A DHCPOUT -j ACCEPT -p udp --dport 1024:65535 --sport 69
#/sbin/iptables -A DHCPOUT -j ACCEPT -p udp --sport 1024:65535 --dport 1024:65535 -m state --state ESTABLISHED,NEW
/sbin/iptables -A DHCPOUT -j ACCEPT -p udp --sport 67 --dport 67 -m state --state NEW
#/sbin/iptables -A DHCPOUT -j ACCEPT -p udp --sport 1024:65535 --dport 17409

#Allow ESP/GRE Traffic
/sbin/iptables -A INPUT -j ACCEPT -p esp
/sbin/iptables -A OUTPUT -j ACCEPT -p esp
/sbin/iptables -A INPUT -j ACCEPT -p ah
/sbin/iptables -A OUTPUT -j ACCEPT -p ah
__EOB__

  foreach $iface (@ints) {
    @idata=split(/\|/,$interface{$iface});
    if ((@idata[1] eq "0.0.0.0") || (@idata[2] eq "32"))  {
      next;
    }
    $ifnw=getnw(@idata[2],@idata[1]);

    if (index(@idata[3],":") ne "-1") {
      $dhcpint=substr(@idata[3],0,index(@idata[3],":"));
    } else {
      $dhcpint=@idata[3];
    }
#    print FW "\n#Bypass VOIP Rules\n";
#    print FW "/sbin/iptables -A ACCT -j RETURN -i $dhcpint -p udp -d @idata[1]/32 --dport 1024:65535\n";
#    print FW "/sbin/iptables -A ACCT -j RETURN -o $dhcpint -p udp -s @idata[1]/32 --sport 1024:65535\n";
    for($sncnt=1;$sncnt <= $fwbwcnt{@idata[3]};$sncnt++) {
      $classcnt=50+$sncnt;
      @bwdata=split(/\|/,$fwbwsrc{@idata[3]}[$sncnt-1]);
#      print "@bwdata\n";
#--gn bwacct

      print FW "\n#ACCT Rules For @bwdata[0] (@bwdata[1]/@bwdata[2]) Subnet\n";
      print FW "/sbin/iptables -A ACCT -j RETURN ! -i $dhcpint -o $dhcpint -d @bwdata[1]/@bwdata[2] ! -s @idata[1]/32\n";
      print FW "/sbin/iptables -A ACCT -j RETURN -i $dhcpint ! -o $dhcpint -s @bwdata[1]/@bwdata[2] ! -d @idata[1]/32\n";
      print FW "/sbin/iptables -A ACCT -j RETURN -i $dhcpint -s @bwdata[1]/@bwdata[2] -d @idata[1]/32\n";
      print FW "/sbin/iptables -A ACCT -j RETURN -o $dhcpint -d @bwdata[1]/@bwdata[2] -s @idata[1]/32\n";
      if ((@bwdata[1] eq $ifnw) && (@bwdata[2] eq @idata[2])) {
        $donesn{$dhcpint}=1;
      }
    }

    if ($donesn{$dhcpint} ne "1") {
      print FW "\n#ACCT Rules For @idata[3] ($ifnw/@idata[2]) Network\n";
      print FW "/sbin/iptables -A ACCT -j RETURN ! -i $dhcpint -o $dhcpint -d $ifnw/@idata[2] ! -s @idata[1]/32\n";
      print FW "/sbin/iptables -A ACCT -j RETURN -i $dhcpint ! -o $dhcpint -s $ifnw/@idata[2] ! -d @idata[1]/32\n";
      print FW "/sbin/iptables -A ACCT -j RETURN -i $dhcpint -s $ifnw/@idata[2] -d @idata[1]/32\n";
      print FW "/sbin/iptables -A ACCT -j RETURN -o $dhcpint -d $ifnw/@idata[2] -s @idata[1]/32\n";
    }

    print FW "\n#Activate BOOTP/DHCPD\n";
    print FW "/sbin/iptables -A INPUT -j DHCPIN -p udp --dport 67:69 -i $dhcpint -s $ifnw/@idata[2] -d @idata[1]/32\n";
    print FW "/sbin/iptables -A OUTPUT -j DHCPOUT -p udp --sport 67:69 -o $dhcpint -d $ifnw/@idata[2] -s @idata[1]/32\n";
  }
  foreach $wan (@wans) {
    @wdat=split(/\|/,$routes{$wan});
    print FW "/sbin/iptables -A INPUT -j DHCPIN -i $ethint -s @wdat[1]/@wdat[2] -d $localip/32\n";
    print FW "/sbin/iptables -A OUTPUT -j DHCPOUT -o $ethint -d @wdat[1]/@wdat[2] -s $localip/32\n";
  }

  foreach $gtuni (@gretunnels) {
    @tdat=split(/\|/,$gretun{$gtuni});
    if ( ! $intgre{@tdat[3]}) {
      print FW "#Allow Point To Point GRE Data Flow For Interface @tdat[3]\n";
      print FW "/sbin/iptables -A INPUT -j ACCEPT -p gre -i @tdat[3]\n";
      print FW "/sbin/iptables -A OUTPUT -j ACCEPT -p gre -o @tdat[3]\n\n";
      $intgre{@tdat[3]}=1;
    }
  }

print FW <<__EOB__;
#Activate Loopback Chain's
/sbin/iptables -A INPUT -j LOOPIN -i lo
/sbin/iptables -A LOOPIN -j ACCEPT -i lo -s 127.0.0.1 -d 127.0.0.1
/sbin/iptables -A LOOPIN -j ACCEPT -i lo -s 127.0.0.2 -d 127.0.0.2
/sbin/iptables -A LOOPIN -j ACCEPT -i lo -s 127.0.0.1 -d 127.255.255.255
/sbin/iptables -A LOOPIN -j ACCEPT -i lo -s 127.0.0.2 -d 127.255.255.255
/sbin/iptables -A LOOPIN -j ACCEPT -i lo -d 127.0.0.1 -s 127.255.255.255
/sbin/iptables -A LOOPIN -j ACCEPT -i lo -d 127.0.0.2 -s 127.255.255.255
/sbin/iptables -A OUTPUT -j LOOPOUT -o lo
/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -s 127.0.0.1 -d 127.0.0.1
/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -s 127.0.0.2 -d 127.0.0.2
/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -s 127.255.255.255 -d 127.0.0.1
/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -s 127.255.255.255 -d 127.0.0.2
/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -d 127.255.255.255 -s 127.0.0.1
/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -d 127.255.255.255 -s 127.0.0.2

#Activate NAT Chains
/sbin/iptables -t nat -A PREROUTING -j NATMAPI
/sbin/iptables -t nat -A PREROUTING -j WEBACCESS -p tcp --dport 80
/sbin/iptables -t nat -A WEBACCESS -j VPNWEB -p tcp --dport 80
/sbin/iptables -t nat -A PREROUTING -j PROXYBYPASS -p tcp --dport 80
/sbin/iptables -t nat -A PREROUTING -j PROXYBYPASS -p tcp --dport 21
/sbin/iptables -t nat -A PREROUTING -j TXPROXY -p tcp --dport 80 --sport 1024:65535 -m state --state NEW,ESTABLISHED
/sbin/iptables -t nat -A PREROUTING -j SIPMAP
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 5000 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 4569 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 5060 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p tcp -s $localip --sport 5060:5061 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j SIPNAT -p udp -s $localip --sport 1718:1720 --dport 1024:65535
/sbin/iptables -t nat -A POSTROUTING -j MANGLE -o ppp+
/sbin/iptables -t nat -A POSTROUTING -j 3GNAT
/sbin/iptables -t nat -A POSTROUTING -j NATMAPO
/sbin/iptables -t nat -A POSTROUTING -j NONAT
/sbin/iptables -t nat -A POSTROUTING -j VPNNAT
/sbin/iptables -t nat -A POSTROUTING -j DMZNAT
/sbin/iptables -t nat -A POSTROUTING -j EXTNAT
/sbin/iptables -t nat -A OUTPUT -j SIPLB

#Activate Mangle Prerouting Chains
/sbin/iptables -t mangle -F PREROUTING
/sbin/iptables -t mangle -A PREROUTING -j CONNMARK --restore-mark -m state ! --state NEW
/sbin/iptables -t mangle -A PREROUTING -j CMARK -m state --state NEW,RELATED
/sbin/iptables -t mangle -A PREROUTING -j RETURN -m mark ! --mark 0
/sbin/iptables -t mangle -A PREROUTING -j LOADBIN
/sbin/iptables -t mangle -A PREROUTING -j IMQTBL
/sbin/iptables -t mangle -A PREROUTING -j VPN
/sbin/iptables -t mangle -A PREROUTING -j SYSTOS
/sbin/iptables -t mangle -A PREROUTING -j LOCALTOS
/sbin/iptables -t mangle -A PREROUTING -j MANGLEP1 -m mark --mark 0
/sbin/iptables -t mangle -A PREROUTING -j MANGLEP2 -m mark --mark 0
/sbin/iptables -t mangle -A PREROUTING -j MANGLEP3 -m mark --mark 0
/sbin/iptables -t mangle -A PREROUTING -j MANGLEP4 -m mark --mark 0
/sbin/iptables -t mangle -A PREROUTING -j MANGLEP5 -m mark --mark 0

#/sbin/iptables -t mangle -A FORWARD -j VPN
#/sbin/iptables -t mangle -A FORWARD -j MANGLEF1 
#/sbin/iptables -t mangle -A FORWARD -j RETURN -m mark ! --mark 0
#/sbin/iptables -t mangle -A FORWARD -j MANGLEF2
#/sbin/iptables -t mangle -A FORWARD -j RETURN -m mark ! --mark 0
#/sbin/iptables -t mangle -A FORWARD -j MANGLEF3
#/sbin/iptables -t mangle -A FORWARD -j RETURN -m mark ! --mark 0
#/sbin/iptables -t mangle -A FORWARD -j MANGLEF4
#/sbin/iptables -t mangle -A FORWARD -j RETURN -m mark ! --mark 0
#/sbin/iptables -t mangle -A FORWARD -j MANGLEF5
#/sbin/iptables -t mangle -A FORWARD -j RETURN -m mark ! --mark 0

#/sbin/iptables -t mangle -A PREROUTING -j VPN
#/sbin/iptables -t mangle -A PREROUTING -j LOCALTOS
#/sbin/iptables -t mangle -A PREROUTING -j NOSYSTOS
#/sbin/iptables -t mangle -A PREROUTING -j SYSTOS
/sbin/iptables -t mangle -F OUTPUT
/sbin/iptables -t mangle -I OUTPUT -j CONNMARK --restore-mark -m mark --mark 0 -m state ! --state NEW
/sbin/iptables -t mangle -A OUTPUT -j SIPLB -m mark --mark 0
/sbin/iptables -t mangle -A OUTPUT -j LOADBOUT
/sbin/iptables -t mangle -A OUTPUT -j VPN
__EOB__

$dmzmark=20;
$dmzcnt=0;
foreach $esptun (@esptunnels) {
  @espdata=split(/\|/,$esptun);
  if (@espdata[4] ne "") {
    @espintip=split(/\|/,$interface{@espdata[3]});
    $dmznw=getnw(@espintip[2],@espintip[1]);
    $dmznw.="/" . @espintip[2];

    print FW "/sbin/iptables -t mangle -A OUTPUT -j DMZ" . $dmzcnt . " ! -o @espdata[4] ! -s $dmznw -d @espdata[1] -m state --state NEW\n";
    print FW "/sbin/iptables -t mangle -A OUTPUT -j RETURN -m mark --mark " . ($dmzmark + $dmzcnt) . "\n";
    $dmzcnt++;
  }
}

print FW <<__EOB__;
/sbin/iptables -t mangle -A OUTPUT -j NOSYSTOS
/sbin/iptables -t mangle -A OUTPUT -j SYSTOS
/sbin/iptables -t mangle -A OUTPUT -j MANGLEO1
/sbin/iptables -t mangle -A OUTPUT -j RETURN -m mark ! --mark 0
/sbin/iptables -t mangle -A OUTPUT -j MANGLEO2
/sbin/iptables -t mangle -A OUTPUT -j RETURN -m mark ! --mark 0
/sbin/iptables -t mangle -A OUTPUT -j MANGLEO3
/sbin/iptables -t mangle -A OUTPUT -j RETURN -m mark ! --mark 0
/sbin/iptables -t mangle -A OUTPUT -j MANGLEO4
/sbin/iptables -t mangle -A OUTPUT -j RETURN -m mark ! --mark 0
/sbin/iptables -t mangle -A OUTPUT -j MANGLEO5
/sbin/iptables -t mangle -A OUTPUT -j RETURN -m mark ! --mark 0


#Activate IMQ Chain
/sbin/iptables -t mangle -F SYSINGRESS
/sbin/iptables -t mangle -F IMQTBL
__EOB__
if ($sysconf{'External'} ne "Dialup") {
  print FW "/sbin/iptables -t mangle -A IMQTBL -j IMQ -i $sysconf{'External'} --todev 0\n";
} else {
  print FW "/sbin/iptables -t mangle -A IMQTBL -j IMQ -i ppp0 --todev 0\n";
}
  print FW<<__EOB__;
/sbin/iptables -t mangle -A IMQTBL -j IMQ -i ppp1 --todev 1
/sbin/iptables -t mangle -A IMQTBL -j IMQ -i ppp2 --todev 2
/sbin/iptables -t mangle -A IMQTBL -j IMQ -i ppp3 --todev 3
/sbin/iptables -t mangle -A IMQTBL -j IMQ -i ppp4 --todev 4
/sbin/iptables -t mangle -A IMQTBL -j IMQ -i ppp5 --todev 5
__EOB__

  $imqcnt=6;
  foreach $iface (@ints) {
    @idata=split(/\|/,$interface{$iface});
    if (@idata[7] ne "") {
      if ((index(@idata[3],":") eq "-1") && ($sysconf{'External'} ne @idata[3])){
        print FW "/sbin/iptables -t mangle -A IMQTBL -j IMQ -i @idata[3] --todev $imqcnt\n";
        $imqcnt++;
      }
    }
  }

  print FW "\n#Allow Higer Speed To Local Network From Wireless Range\n";
  foreach $iface (@ints) {
    @idata=split(/\|/,$interface{$iface});
    $locallan=getnw(@idata[2],@idata[1]);
    print FW "/sbin/iptables -t mangle -A PPPOECLAS -j CLASSIFY -s $locallan/@idata[2] --set-class 1:5\n";
  }
  print FW<<__EOB__;

#Activate Classify Chains
/sbin/iptables -t mangle -F POSTROUTING
/sbin/iptables -t mangle -A POSTROUTING -j MARK --set-mark 0x102
/sbin/iptables -t mangle -A POSTROUTING -j SYSEGRESS
/sbin/iptables -t mangle -A POSTROUTING -j LOCALOUT
/sbin/iptables -t mangle -A POSTROUTING -j SYSINGRESS
/sbin/iptables -t mangle -A POSTROUTING -j LOCALIN
/sbin/iptables -t mangle -A POSTROUTING -j LOCALOUT -m mark --mark 0x102
/sbin/iptables -t mangle -A POSTROUTING -j CLASSIFY -m mark --mark 0x101 --set-class 1:10
/sbin/iptables -t mangle -A POSTROUTING -j CLASSIFY -m mark --mark 0x102 --set-class 1:20
/sbin/iptables -t mangle -A POSTROUTING -j CLASSIFY -m mark --mark 0x103 --set-class 1:30
__EOB__
  if ($wirelessrange ne "") {
    print FW "/sbin/iptables -t mangle -A POSTROUTING -j PPPOECLAS -o ppp+ -d $wirelessrange\n";
  }
  print FW<<__EOB__;

#Activate Local Proxy Chain
/sbin/iptables -t nat -A PREROUTING -j LOCALPROXY
/sbin/iptables -t nat -A PREROUTING -j MANGLEPROXY

#Dont Allow ICMP Fragments
/sbin/iptables -A ICMP -j DENY -p icmp -f

#Allow ICMP redirect
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type redirect

#Allow ICMP destination-unreachable
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type destination-unreachable
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type port-unreachable

#Allow ICMP Ping
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type echo-reply
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type echo-request
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type 11
/sbin/iptables -A ICMP -j ACCEPT -p icmp --icmp-type 4


#Deny Other ICMP Packets
/sbin/iptables -A ICMP -j DENY -p icmp

#Configure Connection Marking
__EOB__

  $dmzmark=20;
  foreach $esplink (@esptunnels) {
    @espdat=split(/\|/,$esplink);
    if (@espdat[4] ne "") {
      if (@espdat[2] == "") {
        @espdat[2]=$sysconf{'Internal'};
      }

      @espidata=split(/\|/,$interface{@espdat[3]});
      $espintip="@espidata[1]/32";
      $dmznw=getnw(@espidata[2],@espidata[1]);
      $dmznw.="/" . @espidata[2];
      print FW "/sbin/iptables -t mangle -A CMARK -j MARK -i @espdat[4] -s @espdat[1] -d $dmznw --set-mark $dmzmark\n";
      $dmzmark++;
    }
  }
  print FW<<__EOB__;
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp1 --set-mark 1
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp2 --set-mark 2
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp3 --set-mark 3
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp4 --set-mark 4
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp5 --set-mark 5
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp6 --set-mark 6
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp7 --set-mark 7
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp8 --set-mark 8
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp9 --set-mark 9
/sbin/iptables -t mangle -A CMARK -j MARK -i ppp10 --set-mark 10

/sbin/iptables -t mangle -A CMARK -j CONNMARK --save-mark -m mark ! --mark 0


/sbin/iptables -A VPNCIN -j RETURN
/sbin/iptables -A VPNCOUT -j RETURN

#/sbin/iptables -A INPUT -j VPNLIN
#/sbin/iptables -A OUTPUT -j VPNLOUT
/sbin/iptables -A INPUT -j VPNCIN
/sbin/iptables -A OUTPUT -j VPNCOUT

__EOB__
  if (index($sysconf{'Internal'},":") ne "-1") {
    $ethint=substr($sysconf{'Internal'},0,4);
  } else {
    $ethint=$sysconf{'Internal'};
  }
  @idata=split(/\|/,$interface{$ethint});
  $locallnm=@idata[2];
  $localip=@idata[1];
  $locallan=getnw(@idata[2],@idata[1]);
  $broadcast=getbc(@idata[2],@idata[1]);
  $localname=join(" ",split(/_/,@idata[0]));


  print FW "#Open VPN Tables\n";
  print FW "/sbin/iptables -I VPNCIN -j OVPNIN -i vpn0 -d $localip/32 -m state --state NEW,RELATED,ESTABLISHED\n";
  print FW "/sbin/iptables -I VPNCOUT -j OVPNOUT -o vpn0 -s $localip/32 -m state --state NEW,RELATED,ESTABLISHED\n";
  print FW "/sbin/iptables -I VPNFWD -j ACCEPT -i $sysconf{'Internal'} -p gre -m state --state RELATED -s $locallan/$locallnm\n";
  print FW "/sbin/iptables -I VPNFWD -j OVPNFWD -i vpn0 -o $sysconf{'Internal'} -d $locallan/$locallnm\n";
  print FW "/sbin/iptables -I VPNFWD -j OVPNFWD -o vpn0 -i $sysconf{'Internal'} -s $locallan/$locallnm\n";
  print FW "/sbin/iptables -I OVPNFWD -j ACCEPT\n";
  if ($sysconf{'OVPNNet'} ne "") {
    print FW "/sbin/iptables -I VPNFWD -j OVPNFWD -i vpn0 -s $sysconf{'OVPNNet'}\n";
    print FW "/sbin/iptables -I VPNFWD -j OVPNFWD -o vpn0 -d $sysconf{'OVPNNet'}\n";
    print FW "/sbin/iptables -t nat -I VPNNAT -j MASQUERADE -i vpn0 -s $sysconf{'OVPNNet'}\n";
  }
  print FW "\n";

  if ($sysconf{'VPNNet'} ne ""){
    print FW "/sbin/iptables -I VPNCIN -j SYSIN -s $sysconf{'VPNNet'} -d $locallan/$locallnm\n";
    print FW "/sbin/iptables -I VPNCOUT -j SYSOUT -d $sysconf{'VPNNet'} -s $locallan/$locallnm\n";
    print FW "/sbin/iptables -I VPNFWD -j ACCEPT -i $sysconf{'Internal'} -d $sysconf{'VPNNet'} -s $locallan/$locallnm -m state --state NEW,RELATED,ESTABLISHED\n";
    print FW "/sbin/iptables -I VPNFWD -j ACCEPT -o $sysconf{'Internal'} -s $sysconf{'VPNNet'} -d $locallan/$locallnm -m state --state NEW,RELATED,ESTABLISHED\n";
    print FW "/sbin/iptables -t nat -A VPNNAT -j ACCEPT -m state --state NEW,ESTABLISHED,RELATED -s $sysconf{'VPNNet'} -d $locallan/$locallnm\n";
    print FW "/sbin/iptables -t nat -A VPNNAT -j ACCEPT -m state --state NEW,ESTABLISHED,RELATED -d $sysconf{'VPNNet'} -s $locallan/$locallnm\n";
    print FW "/sbin/iptables -I TXPROXY -t nat -j ACCEPT -s $sysconf{'VPNNet'}\n\n";
    print FW "/sbin/ip route add $sysconf{'VPNNet'} src $localip dev $ethint table Ipsec\n";

    foreach $iface (@ints) {
      @idata=split(/\|/,$interface{$iface});
      $ifnw=getnw(@idata[2],@idata[1]);
      if (index($iface,":") ne -1) {
        $int=substr($iface,0,index($iface,":"));
      } else {
        $int=$iface;
      }
      print FW "/sbin/iptables -I VPNFWD -j ACCEPT -i $int -p gre -m state --state RELATED -s $ifnw/@idata[2]\n";
      print FW "/sbin/iptables -A VPNFWD -j ACCEPT -o $int -d $ifnw/@idata[2] -s $sysconf{'VPNNet'}\n";
      print FW "/sbin/iptables -A VPNFWD -j ACCEPT -i $int -s $ifnw/@idata[2] -d $sysconf{'VPNNet'}\n";
    }
  }

  foreach $rlink (@radlink) {
    @lidata=split(/\|/,$rlink);
    print FW "#PPP Link @lidata[0]\n";
    print FW "/sbin/iptables -I VPNCIN -j SYSIN -i ppp+ -s @lidata[1] -d 0/0 -m state --state NEW,ESTABLISHED\n";
    print FW "/sbin/iptables -I VPNCOUT -j SYSOUT -o ppp+ -d @lidata[1] -s 0/0 -m state --state ESTABLISHED\n";
    print FW "/sbin/iptables -A TXPROXY -t nat -j REDIRECT -p tcp --to-port 3129 -i ppp+ -s @lidata[1]\n\n";
  }

if ($wirelessrange ne "") {
    print FW<<__EOB__;
#PPPoE Connections
/sbin/iptables -A TXPROXY -p tcp -t nat -j REDIRECT --to-port 3129 -i ppp+ -s $wirelessrange

__EOB__
}

if ($sysconf{'L2TPNet'} ne "") {
    print FW<<__EOB__;
#L2TP Connections
/sbin/iptables -A TXPROXY -p tcp -t nat -j REDIRECT --to-port 3129 -i ppp+ -s $sysconf{'L2TPNet'}

__EOB__
}

if ($hspotrange ne "") {
    print FW<<__EOB__;
#Hotspot Connections
/sbin/iptables -A TXPROXY -p tcp -t nat -j REDIRECT --to-port 3129 -i tun0 -s $hspotrange

__EOB__
}

  print FW<<__EOB__;
#Protect The Loopback Interface
/sbin/iptables -A INPUT -j DENY -i lo -s ! 127.0.0.0/8
/sbin/iptables -A INPUT -j DENY -i ! lo -s 127.0.0.0/8
/sbin/iptables -A OUTPUT -j DENY -o lo -d ! 127.0.0.0/8
/sbin/iptables -A OUTPUT -j DENY -o ! lo -d 127.0.0.0/8

#Protect All Interface's
__EOB__
  if ($sysconf{'External'} ne "Dialup") {
    $ethext=$sysconf{'External'};
    @idata=split(/\|/,$interface{$ethext});
    $extip="\$EXT_IP";
#    $extip="@idata[1]/32";
    if (index($sysconf{'External'},"\:") ne "-1") {
      $ethext=substr($sysconf{'External'},0,4);
    } else {
      $ethext=$sysconf{'External'};
    }
    $rin="\$INT_IN";
    $rout="\$INT_OUT";
#   $rin="-i $ethext ";
#   $rout="-o $ethext ";
  } else {
    $extip="\$EXT_IP";
    $rin="\$INT_IN";
    $rout="\$INT_OUT";
  }

   if ($sysconf{'Bridge'} ne "") {
     print FW "/sbin/iptables -A FORWARD -j ACCEPT -i " . $sysconf{'Internal'} . " -o " . $sysconf{'Internal'}  . "\n";
   }

   print FW "#add MSS CLAMP\n";
   print FW "/sbin/iptables -A FORWARD -j TCPMSS -o ppp+ -p tcp --tcp-flags SYN,RST SYN --clamp-mss-to-pmtu\n";

   if ($sysconf{'External'} ne "Dialup") {
     print FW "/sbin/iptables -A FORWARD -j TCPMSS -o $sysconf{'External'} -p tcp --tcp-flags SYN,RST SYN --clamp-mss-to-pmtu\n\n";
   }

   print FW "#NAT ICMP Ping And Errors (Type 3/11)\n";
   print FW "/sbin/iptables -A FORWARD -j ICMP -p icmp\n\n";

   print FW "#Returning Traffic\n";
   print FW "/sbin/iptables -A FORWARD -j ACCEPT -m state --state ESTABLISHED,RELATED\n";
#   print FW "/sbin/iptables -A FORWARD -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED,RELATED\n";
#   print FW "/sbin/iptables -A FORWARD -j ACCEPT -p tcp --tcp-flags SYN,PSH PSH -m length --length 40\n";
#   print FW "/sbin/iptables -A FORWARD -j ACCEPT -p tcp --tcp-flags SYN,RST RST -m length --length 40\n";
#   print FW "/sbin/iptables -A FORWARD -j ACCEPT -p tcp --tcp-flags SYN,FIN FIN -m length --length 40\n";
#   print FW "/sbin/iptables -A FORWARD -j ACCEPT -p tcp -m length --length 40\n";
   print FW "/sbin/iptables -A FORWARD -j LOCALFWD\n";
   print FW "/sbin/iptables -A FORWARD -j VPNFWD -m state --state NEW\n\n";

   print FWP "  #NAT ICMP Ping And Errors / Redirect (Type 3/11/5)\n";
   print FWP "  /sbin/iptables -A EXTNAT -t nat -j $nat -p icmp --icmp-type echo-reply -m state --state NEW,ESTABLISHED\n";
   print FWP "  /sbin/iptables -A EXTNAT -t nat -j $nat -p icmp --icmp-type echo-request -m state --state NEW,ESTABLISHED\n\n";
   print FWP "  /sbin/iptables -A EXTNAT -t nat -j $nat -p icmp --icmp-type redirect -m state --state NEW,ESTABLISHED\n\n";

   if ($sysconf{'PrimaryDns'} ne "" ) { 
     print FWP "  #NAT Access To Specified Primary Domain Server\n";
     print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p udp $sfnew --sport 1024:65535 -d $sysconf{'PrimaryDns'} --dport 53\n";
     print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p udp $sfnew --sport 53 -d $sysconf{'PrimaryDns'} --dport 53\n";
     print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew --sport 1024:65535 -d $sysconf{'PrimaryDns'} --dport 53\n\n";
  }

   if ($sysconf{'SecondaryDns'} ne "" ) { 
     print FWP "  #NAT Access To Specified Primary Domain Server\n";
     print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p udp $sfnew --sport 1024:65535 -d $sysconf{'SecondaryDns'} --dport 53\n";
     print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p udp $sfnew --sport 53 -d $sysconf{'SecondaryDns'} --dport 53\n";
     print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew --sport 1024:65535 -d $sysconf{'SecondaryDns'} --dport 53\n\n";
  }

  print FWP "#Allow SIP Out From Server\n";
  print FWP "/sbin/iptables -A EXTNAT -j $nat -t nat $rout-p udp $sfnew -s $localip/32 -d 0/0 --sport 5000 --dport 1024:65535\n\n";
  print FWP "/sbin/iptables -A EXTNAT -j $nat -t nat $rout-p udp $sfnew -s $localip/32 -d 0/0 --sport 5060 --dport 1024:65535\n\n";
  print FWP "/sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $localip/32 -d 0/0 --sport 5060:5061 --dport 1024:65535\n\n";

#  $locallan=getnw(@idata[2],@idata[1]);
#  $localname=join(" ",split(/_/,@idata[0]));

  foreach $iface (@ints) {
    @ipdat=split(/\|/,$interface{$iface});
    if (index(@ipdat[3],":") ne "-1") {
      $denint=substr(@ipdat[3],0,index(@ipdat[3],":"));
    } else {
      $denint=@ipdat[3];
    }
    if (@ipdat[1] ne "0.0.0.0") {
      print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -d @ipdat[1]/32  -s  @ipdat[1]/32\n";
      print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp --tcp-flags RST,SYN RST -m length --length 40 -d @ipdat[1]/32 -s @ipdat[1]/@ipdat[2]\n";
      print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -s @ipdat[1]/32  -d @ipdat[1]/32\n";
      if (@ipdat[2] ne "32") {
        @ipdat[1]=getnw(@ipdat[2],@ipdat[1]);
        print FW "/sbin/iptables -A INPUT -j DENY -i ! $denint -s @ipdat[1]/@ipdat[2]\n";
        print FW "/sbin/iptables -A OUTPUT -j DENY -o ! $denint -d @ipdat[1]/@ipdat[2]\n";
      }
    }
  }
#  foreach $wan (@wans) {
#    @wdat=split(/\|/,$routes{$wan});
#    print FW "/sbin/iptables -A INPUT -j DENY -i ! $ethint  -s @wdat[1]/@wdat[2]\n";
#    print FW "/sbin/iptables -A OUTPUT -j DENY -o ! $ethint  -d @wdat[1]/@wdat[2]\n";
#  }

#/sbin/iptables -A INPUT -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED,RELATED
#/sbin/iptables -A INPUT -j ACCEPT -p tcp --tcp-flags SYN,ACK,PSH ACK,PSH -m state --state ESTABLISHED,RELATED
#/sbin/iptables -A INPUT -j ACCEPT -p tcp --tcp-flags SYN,ACK,RST RST -m state --state ESTABLISHED,RELATED
#/sbin/iptables -A INPUT -j ACCEPT ! -p tcp -m state --state ESTABLISHED,RELATED
#/sbin/iptables -A OUTPUT -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED,RELATED
#/sbin/iptables -A OUTPUT -j ACCEPT -p tcp --tcp-flags SYN,ACK,PSH ACK,PSH -m state --state ESTABLISHED,RELATED
#/sbin/iptables -A OUTPUT -j ACCEPT ! -p tcp -m state --state ESTABLISHED,RELATED
  print FW<<_EOB_;
#Allow All Established Connections

/sbin/iptables -A INPUT -j ACCEPT -m state --state ESTABLISHED,RELATED
/sbin/iptables -A OUTPUT -j ACCEPT -m state --state ESTABLISHED,RELATED

_EOB_

  print FW "#Allow SCTP Traffic For Media Gateway\n";
  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p sctp\n";
  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p sctp\n\n";

  foreach $iface (@ints) {
    if (((index($iface,"gtun") < 0) && ($iface ne $sysconf{'External'}) && ($iface ne $mdmconf{'ComPort'})) || ($sysconf{'External'} eq $sysconf{'Internal'}) || ($sysconf{'Internal'} eq $mdmconf{'ComPort'})){
      @idata=split(/\|/,$interface{$iface});
      if ((@idata[1] ne "0.0.0.0") && (@idata[2] ne  "32")) {
        @idata[0]=join(" ",split(/_/,@idata[0]));
        $linkip=@idata[1];
        $linksn=@idata[2];
        $linknw=getnw(@idata[2],@idata[1]);
        $linkbc=getbc(@idata[2],@idata[1]);

        print FW "#Allow Nmb/Wins Requests For " . @idata[0] . " (" . @idata[3] . ")\n";
        print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $iface -p udp -s $linknw/@idata[2] --sport 137:138 -d $linkbc/32 --dport 137:138\n";
        print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $iface -p udp -s $linknw/@idata[2] --sport 1024:65535 -d $linkbc/32 --dport 137:138\n";
        print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $iface -p udp -s $linknw/@idata[2] --dport 1024:65535 -d $linkbc/32 --sport 137:138\n";
        print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $iface -p udp --sport 137:138 -d $linkbc/32 --dport 137:138\n";
        print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $iface -p udp --sport 1024:65535 -d $linkbc/32 --dport 137:138\n";
        print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $iface -p udp --dport 1024:65535 -d $linkbc/32 --sport 137:138\n";
        print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $iface -p udp --sport 137:138 -d $linkbc/32 --dport 137:138\n\n";
        print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $iface -p udp --sport 1024:65535 -d $linkbc/32 --dport 137:138\n";
        print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $iface -p udp --dport 1024:65535 -d $linkbc/32 --sport 137:138\n";
      }
    }
  }

  if ($smboption{'Security'} eq "ADS") {
    @adsservs=split(/ /,$smboption{'ADSServer'});
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p tcp --sport 88\n";
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p udp --sport 389\n";
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p udp --sport 464\n";
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p tcp --sport 139\n";
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p tcp --sport 389\n";
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p tcp --sport 445\n";
    print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p udp --sport 500\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p tcp --dport 88\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p udp --dport 389\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p udp --dport 464\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p tcp --dport 139\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p tcp --dport 389\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p tcp --dport 445\n";
    print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p udp --dport 500\n";

    foreach $adsdc (@adsservs) {
      $adsdc=lc($adsdc);
      $dcfqdn=$adsdc . "." . lc($smboption{'ADSRealm'});

      if ($hosts{$adsdc} ne "") {
        ($dcnme,$dcipaddr)=split(/\|/,$hosts{$adsdc});
      } elsif ($hosts{$dcfqdn} ne "") {
        ($dcnme,$dcipaddr)=split(/\|/,$hosts{$dcfqdn});
      }

      if ($dcipaddr ne "") {
        $adsdc=$dcipaddr . "/32";
      } else {
        $dcnme=$adsdc;
        $adsdc=$adsdc . "." . $smboption{'ADSRealm'};
      }

      print FW "#Allow Connections To ADS Server $dcnme\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p tcp -m state --state ESTABLISHED -d $localip/32 --sport 389 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -m state --state ESTABLISHED -d $localip/32 --sport 389 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p tcp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 88\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -m state --state ESTABLISHED -d $localip/32 --sport 464 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -m state --state ESTABLISHED -d $localip/32 --sport 500 -s $adsdc --dport 1024:65535\n";


      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p tcp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 389 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 389 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p tcp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 88\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 464 -d $adsdc --sport 1024:65535\n\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 500 -d $adsdc --sport 1024:65535\n\n";

      print FW "#Allow Connections To ADS Server $dcnme\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p tcp -m state --state ESTABLISHED -d $localip/32 --sport 389 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 389 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p tcp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 88\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 464 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i gtun+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 500 -s $adsdc --dport 1024:65535\n";


      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p tcp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 389 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 389 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p tcp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 88\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 464 -d $adsdc --sport 1024:65535\n\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o gtun+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 500 -d $adsdc --sport 1024:65535\n\n";


      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p tcp -m state --state ESTABLISHED -d $localip/32 --sport 389 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 389 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p tcp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 88 -s $adsdc --dport 88\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 464 -s $adsdc --dport 1024:65535\n";
      print FW "/sbin/iptables -A SMBIN -j ACCEPT -i vpn+ -p udp -m state --state ESTABLISHED -d $localip/32 --sport 500 -s $adsdc --dport 1024:65535\n";


      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p tcp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 389 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 389 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p tcp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 1024:65535\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 88 -d $adsdc --sport 88\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 464 -d $adsdc --sport 1024:65535\n\n";
      print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o vpn+ -p udp -m state --state NEW,ESTABLISHED -s $localip/32 --dport 500 -d $adsdc --sport 1024:65535\n\n";
    }
  }

  if ($wirelessrange ne "") {
    @wrdat=split(/\//,$wirelessrange);
    $bcaddr=getbc(@wrdat[1],@wrdat[0]);
    print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -s $wirelessrange --sport 137:138 -d $localip/32 --dport 137:138\n";
    print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -s $wirelessrange --sport 137:138 -d $bcaddr/32 --dport 137:138\n";
    print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -s $wirelessrange --sport 1024:65535 -d $bcaddr/32 --dport 137:138\n";
    print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -s $wirelessrange --sport 137:138 -d $bcaddr/32 --dport 137:138\n";
  }

  if ($hspotrange ne "") {
    @wrdat=split(/\//,$hspotrange);
    $bcaddr=getbc(@wrdat[1],@wrdat[0]);
    print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -s $hspotrange --sport 137:138 -d $localip/32 --dport 137:138\n";
    print FW "/sbin/iptables -A SMBIN -j ACCEPT -i $ethint -p udp -s $hspotrange --sport 137:138 -d $bcaddr/32 --dport 137:138\n";
    print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -s $hspotrange --sport 1024:65535 -d $bcaddr/32 --dport 137:138\n";
    print FW "/sbin/iptables -A SMBOUT -j ACCEPT -o $ethint -p udp -s $hspotrange --sport 137:138 -d $bcaddr/32 --dport 137:138\n";
  }

  $intint=$sysconf{'Internal'};
  @iipdat=split(/\|/,$interface{$intint});
  if (($sysconf{'PrimaryWins'} ne "") && ($sysconf{'PrimaryWins'} ne @iipdat[1])){
    print FW "/sbin/iptables -A SMBOUT -j ACCEPT -p udp -o $intint  -s @iipdat[1] -d $sysconf{'PrimaryWins'} --sport 1024:65535 --dport 137:138 -m state --state NEW,ESTABLISHED\n";
  }
  if ($sysconf{'SecondaryWins'} ne "") {
    print FW "/sbin/iptables -A SMBOUT -j ACCEPT -p udp -o $intint  -s @iipdat[1] -d $sysconf{'SecondaryWins'} --sport 1024:65535 --dport 137:138 -m state --state NEW,ESTABLISHED\n";
  }


  print FW "#STUN Loopback\n";
  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -p udp $sfnew --sport 3478:3479 --dport 10000:65535\n";
  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -p udp $sfnew --sport 3478:3479 --dport 10000:65535\n\n";

#  print FW "#Allow Remote H.323 Registrations\n";
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p udp --sport 1024:65535 --dport 1718:1722\n";
#  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p udp --sport 1718:1722 --dport 1024:65535\n";
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p udp --dport 1024:65535 --sport 1718:1722\n";
#  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p udp --dport 1718:1722 --sport 1024:65535\n\n";

#  print FW "#Allow IAX Outbound\n";
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p udp --sport 4569 --dport 1718:1722\n\n";

  if ($wirelessrange ne "") {
    @wrdat=split(/\//,$wirelessrange);
    @ipwqu=split(/\./,@wrdat[0]);
    @ipwqu[3]++;
    $wrstart=join(".",@ipwqu);

    print FW "#Allow Access Control For Wireless Range\n";
    print FW "/sbin/iptables -A INPUT -j PPPIN -i ppp+ -s $wirelessrange\n";
    print FW "/sbin/iptables -A OUTPUT -j PPPOUT -o ppp+ -d $wirelessrange\n\n";
  }

  if ($hspotrange ne "") {
    @wrdat=split(/\//,$hspotrange);
    @ipwqu=split(/\./,@wrdat[0]);
    @ipwqu[3]++;
    $wrstart=join(".",@ipwqu);

    print FW "#Allow Access On Internal Hotspot\n";
    print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -d $wrstart/32 -s $wrstart/32\n";
    print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -s $wrstart/32 -d $wrstart/32\n";

    print FW "#Allow Access Control For Hotspot Range\n";
    print FW "/sbin/iptables -A INPUT -j PPPIN -i tun0 -s $hspotrange\n";
    print FW "/sbin/iptables -A INPUT -j PPPIN -i $hspotint -s $hspotrange\n";
    print FW "/sbin/iptables -A OUTPUT -j PPPOUT -o tun0 -d $hspotrange\n";
    print FW "/sbin/iptables -A PPPIN -j ACCEPT -i tun0 -s $hspotrange\n";
    print FW "/sbin/iptables -A PPPIN -j ACCEPT -i $hspotint -s $hspotrange\n";
    print FW "/sbin/iptables -A PPPOUT -j ACCEPT -o tun0 -d $hspotrange\n\n";
    print FW "/sbin/iptables -A PPPOUT -j ACCEPT -o $hspotint -d $hspotrange\n\n";
    print FW "/sbin/iptables -A PPPFWD -j ACCEPT -i tun0 -s $hspotrange\n";
    print FW "/sbin/iptables -A PPPFWD -j ACCEPT -o tun0 -d $hspotrange\n\n";
    print FW "/sbin/iptables -A PPPFWD -j ACCEPT -i $hspotint -s $hspotrange\n";
    print FW "/sbin/iptables -A PPPFWD -j ACCEPT -o $hspotint -d $hspotrange\n\n";

#    if ($wrstart ne "") {
#      print FW "/sbin/iptables -A PPPIN -j SYSIN -i tun0 -s $wrstart/32\n";
#      print FW "/sbin/iptables -A PPPOUT -j SYSOUT -o tun0 -d $wrstart/32\n\n";
#    }
  }

  if ($sysconf{'L2TPNet'} ne "") {
    print FW "\n#Allow Access Control For L2TP Range\n";
    print FW "/sbin/iptables -A INPUT -j PPPIN -i ppp+ -s $sysconf{'L2TPNet'}\n";
    print FW "/sbin/iptables -A OUTPUT -j PPPOUT -o ppp+ -d $sysconf{'L2TPNet'}\n";
    print FW "/sbin/iptables -A OUTPUT -j PPPOUT -o ppp+ -d 224.0.0.0/3\n";
    print FW "\n";
  }

  print FW "#Access From Interfaces For Web Proxy\n";
  print FW "/sbin/iptables -A INPUT -j WEBACCESSI  -p tcp -d $localip/32 --dport 80\n";
  print FW "/sbin/iptables -A OUTPUT -j WEBACCESSO  -p tcp -s $localip/32 --sport 80\n\n";

  print FW "#Allow SMB Broadcasts\n";
  print FW "/sbin/iptables -A INPUT -j SMBNFSIN\n";
  print FW "/sbin/iptables -A OUTPUT -j SMBNFSOUT\n";
  print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p udp --sport 137:138\n";
  print FW "/sbin/iptables -A SMBNFSIN -j SMBIN -p udp --dport 137:138\n";
  print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p udp --dport 137:138\n";
  print FW "/sbin/iptables -A SMBNFSOUT -j SMBOUT -p udp --dport 137:138\n";

  foreach $nfsmnt (@nfsmount) {
    @nfsdat=split(/\|/,$nfsmnt);
    if (index(@nfsdat[2],"//") ne 0) {
      ($server)=split(/:/,@nfsdat[2]);
      print FW "#Allowing NFS For @nfsdat[0] (@nfsdat[1])\n";
      print FW "/sbin/iptables -A NFSIN -j ACCEPT -s $server\n";
      print FW "/sbin/iptables -A NFSOUT -j ACCEPT -s $server\n";
      print FW "/sbin/iptables -A NFSIN -j ACCEPT -d $server\n";
      print FW "/sbin/iptables -A NFSOUT -j ACCEPT -d $server\n\n";
    }
  }

  foreach $nfssh (@nfsshare) {
    @nfsdat=split(/\|/,$nfssh);
    print FW "#Allowing NFS For @nfsdat[0] (@nfsdat[1])\n";
    print FW "/sbin/iptables -A NFSIN -j ACCEPT -s @nfsdat[0]\n";
    print FW "/sbin/iptables -A NFSOUT -j ACCEPT -s @nfsdat[0]\n";
    print FW "/sbin/iptables -A NFSIN -j ACCEPT -d @nfsdat[0]\n";
    print FW "/sbin/iptables -A NFSOUT -j ACCEPT -d @nfsdat[0]\n\n";
  }

#Deny All Other NFS
#/sbin/iptables -A NFSIN -j DENY
#/sbin/iptables -A NFSOUT -j DENY

print FW <<__EOB__;

#Allow NFS/RPC
for port in "111" "2049" "32765:32769";do
  for proto in "udp" "tcp";do
    for direc in "IN" "OUT";do
      if [ "\$direc" == "IN" ];then
        direc2="SMBNFSIN"
        iface="-i"
       else
        direc2="SMBNFSOUT"
        iface="-o"
      fi;
      for pflag in "--sport" "--dport";do
        iptables -A \$direc2 -j NFS\$direc \$iface $ethint -p \$proto \$pflag \$port
      done;
    done;
  done;
done;

__EOB__


  print FW <<__EOR__;
/sbin/iptables -A SYSIN -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED
/sbin/iptables -A SYSIN -j ACCEPT -p tcp --tcp-flags SYN,ACK,PSH ACK,PSH -m state --state ESTABLISHED
/sbin/iptables -A SYSIN -j ACCEPT ! -p tcp -m state --state ESTABLISHED
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED
/sbin/iptables -A SYSOUT -j ACCEPT ! -p tcp -m state --state ESTABLISHED

#Allow Related Traffic
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW,RELATED --sport 1024:65535 --dport 1024:65535
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state RELATED --sport 1024:65535 --dport 1024:65535
/sbin/iptables -A SYSOUT -j ACCEPT -p udp -m state --state RELATED --dport 1024:65535 --sport 1024:65535

#RIP
/sbin/iptables -A SYSIN -j ACCEPT -m state --state NEW  -p udp --sport 520 --dport 520
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW  -p udp --dport 520 --sport 520
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW,INVALID  -p udp --dport 520 --sport 520

#BGP
/sbin/iptables -A SYSIN -j ACCEPT -m state --state NEW  -p tcp --sport 1024:65535 --dport 179
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW,INVALID  -p tcp --dport 1024:65535 --sport 179
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW  -p tcp --dport 179 --sport 1024:65535

#OSPF
/sbin/iptables -A SYSIN -j ACCEPT -m state --state NEW -p ospf
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW,INVALID -p ospf

#HylaFax
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 4559
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW,INVALID --dport 1024:65535 --sport 4559
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW  --dport 1024:65535 --sport 4558

#FTP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 21
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW,INVALID  --dport 1024:65535 --sport 21
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state RELATED,NEW --sport 20 --dport 1024:65535
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state RELATED,NEW --sport 1024:65535 --dport 1024:65535

#FTPS
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 990
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW,INVALID  --dport 1024:65535 --sport 990
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW --sport 989 --dport 1024:65535

#DNS
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW  --sport 1024:65535 --dport 53
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW  --sport 53 --dport 53
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 53

#LDAP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 389
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 636

#NTP
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW  --sport 1024:65535 --dport 123
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW  --sport 123 --dport 123

#MySQL
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 3306

#PGSQL
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 5432

#Orb
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 2809
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW,INVALID --dport 1024:65535 --sport 2809

#E4L
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 1024:65535

#SMTP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 25

#POP3
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 110

#POP3S
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 995

#SSH
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 0:65535 --dport 22

#IDENT
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW  --dport 113 --sport 1024:65535
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW,INVALID  --dport 113 --sport 1024:65535

#IMAP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 143
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 993

#Trend
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 1812

#Asterisk FOP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 4445

#HTTP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 80
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW --dport 80 --sport 1024:65535

#HTTPS
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 443

#HTTPS Management
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 666

#Proxy Server
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 3128
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 3129
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 8080

#NFS TCP/UDP
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 2049 
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 2049

#LPD
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 515

#IPSEC
/sbin/iptables -A SYSIN -j ACCEPT -m state --state NEW  -p udp --sport 500 --dport 500
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW  -p udp --dport 500 --sport 500
/sbin/iptables -A SYSIN -j ACCEPT -m state --state NEW  -p udp --sport 1024:65535 --dport 500
/sbin/iptables -A SYSOUT -j ACCEPT -m state --state NEW  -p udp --dport 1024:65535 --sport 500

#SMB
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 137:138 --dport 137:138
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 137:138
/sbin/iptables -A SYSOUT -j ACCEPT -p udp -m state --state NEW --sport 137:138 --dport 137:138
/sbin/iptables -A SYSOUT -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 137:138
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW  --sport 1024:65535 --dport 139
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 139
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 445
/sbin/iptables -A SYSOUT -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 445
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 548

#SIP
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 5000
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 5060
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 5060:5061

#H323
/sbin/iptables -A SYSIN -j ACCEPT -p tcp -m state --state NEW --sport 1024:65535 --dport 1720:1722
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 1718:1729
/sbin/iptables -A SYSOUT -j ACCEPT -p udp -m state --state NEW --dport 1024:65535 --sport 1718:1722
/sbin/iptables -A SYSOUT -j ACCEPT -p udp -m state --state NEW --dport 1024:65535 --sport 1718:1722
/sbin/iptables -A SYSIN -j ACCEPT -p udp --sport 1719 --dport 1719 -m state --state NEW
/sbin/iptables -A SYSOUT -j ACCEPT -p udp --dport 1719 --sport 1719 -m state --state NEW

#MGCP
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 2727

#IAX
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 4569

#IAX2
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state NEW --sport 1024:65535 --dport 5036

#STUN
/sbin/iptables -A SYSIN -j ACCEPT -p udp -m state --state ESTABLISHED,NEW --sport 3478:3479 --dport 1024:65535
/sbin/iptables -A SYSOUT -j ACCEPT -p udp -m state --state NEW,INVALID --dport 3478:3479 --sport 1024:65535

__EOR__

  push(@bludp,"67");
  push(@bludp,"68");
  push(@bludp,"53");
  push(@bltcp,"53");
  push(@bltcp,"389");
  push(@bltcp,"636");
  push(@bludp,"123");
  push(@bltcp,"3306");
  push(@bltcp,"5432");
  push(@bltcp,"2809");
  push(@bludp,"520");
  push(@bltcp,"179");
  push(@bltcp,"25");
  push(@bltcp,"113");
  push(@bltcp,"21");
  push(@bltcp,"20");
  push(@bltcp,"990");
  push(@bltcp,"989");
  push(@bltcp,"110");
  push(@bltcp,"995");
  push(@bltcp,"143");
  push(@bltcp,"993");
  push(@bltcp,"4558");
  push(@bltcp,"4559");
  push(@bltcp,"1812");
  push(@bltcp,"80");
  push(@bltcp,"443");
  push(@bltcp,"666");
  push(@bltcp,"3128");
  push(@bltcp,"3129");
  push(@bltcp,"139");
  push(@bltcp,"2049");
  push(@bludp,"2049");
  push(@bltcp,"515");

  #atalk
  push(@bltcp,"548");
  #smb wins/nmb
  push(@bludp,"137:138");
  #snmpd
  push(@bludp,"161");
  #radius
  push(@bludp,"1645:1647");
  #squid smp 
  push(@bludp,"3401");

  #unknown
  push(@bltcp,"587");
  push(@bludp,"1030");
  push(@bludp,"1900");
  push(@bludp,"3130");
  push(@bludp,"4827");

  #biff
  push(@bludp,"512");

  #portmap
  push(@bltcp,"111");
  push(@bludp,"111");
  push(@bltcp,"32765");
  push(@bltcp,"32766");
  push(@bltcp,"32767");
  push(@bltcp,"32768");
  push(@bltcp,"32769");
  push(@bludp,"32765");
  push(@bludp,"32766");
  push(@bludp,"32767");
  push(@bludp,"32768");
  push(@bludp,"32769");

  print FW "#Allow Access To Specified Primary Domain Server\n";
  print FW "/sbin/iptables -A DNSIN -j ACCEPT -p udp $sfnew --sport 1024:65535 --dport 53\n";
  print FW "/sbin/iptables -A DNSOUT -j ACCEPT -p udp $sfold --dport 1024:65535 --sport 53\n";
  print FW "/sbin/iptables -A DNSOUT -j ACCEPT -p udp $sfnrel --dport 1024:65535 --sport 53\n";

  print FW "/sbin/iptables -A DNSIN -j ACCEPT -p udp $sfnew --sport 53 --dport 53\n";
  print FW "/sbin/iptables -A DNSOUT -j ACCEPT -p udp $sfold --dport 53 --sport 53\n";
  print FW "/sbin/iptables -A DNSOUT -j ACCEPT -p udp $sfnrel --dport 53 --sport 53\n";

  print FW "/sbin/iptables -A DNSIN -j ACCEPT -p tcp $sfnew --sport 1024:65535 --dport 53\n";
  print FW "/sbin/iptables -A DNSOUT -j ACCEPT -p tcp $sfold ! --syn --dport 1024:65535 --sport 53\n";
  print FW "/sbin/iptables -A DNSOUT -j ACCEPT -p tcp $sfnrel --dport 1024:65535 --sport 53\n\n";

  print FW "#IGMP Multi Cast Packets\n";
  print FW "/sbin/iptables -A MCASTOUT -j ACCEPT $sfnew -p igmp -d 224.0.0.22\n";
  print FW "/sbin/iptables -A MCASTIN -j ACCEPT $sfnew -p igmp -d 224.0.0.22\n";

  print FW "#OSPF Multi Cast Packets\n";
  print FW "/sbin/iptables -A MCASTOUT -j ACCEPT $sfnew -p ospf -d 224.0.0.5\n";
  print FW "/sbin/iptables -A MCASTIN -j ACCEPT $sfnew -p ospf -d 224.0.0.5\n";

  print FW "#OSPF Multi Cast Packets\n";
  print FW "/sbin/iptables -A MCASTOUT -j ACCEPT $sfnew -p ospf -d 224.0.0.6\n";
  print FW "/sbin/iptables -A MCASTIN -j ACCEPT $sfnew -p ospf -d 224.0.0.6\n\n";

  print FW "#RIP Multi Cast Packets\n";
  print FW "/sbin/iptables -A MCASTOUT -j ACCEPT $sfnew -p udp --sport 520 --dport 520 -d 224.0.0.9\n";
  print FW "/sbin/iptables -A MCASTIN -j ACCEPT $sfnew -p udp --sport 520 --dport 520 -d 224.0.0.9\n\n";

  print FWP "  /sbin/iptables -A EXTIN -j DEFIN $rin -d $extip\n";
  print FWP "  /sbin/iptables -A EXTIN -j VOIPIN $rin -d $localip -p udp --sport 1024:65535\n\n";

  print FWP "  /sbin/iptables -A EXTOUT -j DEFOUT $rout -s $extip\n";
  print FWP "  /sbin/iptables -A EXTOUT -j VOIPOUT $rout -s $localip -p udp $sfnew --dport 1024:65535\n\n";

  print FW "#Allow Access To STUN Remotely\n";
  print FWP "  /sbin/iptables -A EXTIN -j ACCEPT $rin-p udp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d $extip --dport 3478:3479\n";
  print FWP "  /sbin/iptables -A EXTOUT -j ACCEPT $rout-p udp $sfnew -s $extip --sport 3478:3479 -d $extip --dport 10000:65535\n";
#  print FWP "  /sbin/iptables -A EXTIN -j ACCEPT $rin-p udp $sfold -s $extip --dport 3478:3479 -d $extip --sport 10000:65535\n";
#  print FWP "  /sbin/iptables -A EXTOUT -j ACCEPT -o $ethint -p udp $sfold -d $locallan/$locallnm --dport 10000:65535 -s $extip --sport 3478:3479\n";
#  print FWP "  /sbin/iptables -A EXTOUT -j ACCEPT -p udp $sfold -d $extip  --dport 1024:65535 -s $extip --sport 3478:3479\n\n";

#  print FW "#Allow All Established Connections\n";
#  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED,RELATED\n";
#  print FW "/sbin/iptables -A DEFIN -j ACCEPT ! -p tcp -m state --state ESTABLISHED,RELATED\n";
#  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED,RELATED\n";
#  print FW "/sbin/iptables -A DEFOUT -j ACCEPT ! -p tcp -m state --state ESTABLISHED,RELATED\n\n";

  print FW "#Allow Access To External Nameservers For DNS ServerIP UDP Mode\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d 0/0 --dport 53 --sport 53\n\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d 0/0 --dport 53 --sport 1024:65535\n\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0/0 --dport 53 --sport 1024:65535\n\n";

  if ($dnsconf{'ExtServ'} eq true) {
    print FW "#Allow Access To Nameserver Externaly UDP Mode\n";
    print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 53 --dport 53\n";
    print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 53\n";
    print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 53\n";
  }

  print FW "#SSH Access\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0/0 --dport 22 --sport 1024:65535\n\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --dport 22 --sport 1024:65535\n";

  print FW "#OVPN Access\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --dport 1194 --sport 1024:65535\n";

  print FW "#L2TP Access\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --dport 1701 --sport 1024:65535\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p esp -m state --state RELATED\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp -m state --state NEW --dport 1024:65535 --sport 1024:65535\n";

  $tserv="0.0.0.0/0";
  print FW "#Allow Access To Time Server\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d $tserv --dport 123 --sport 123\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d $tserv --dport 123 --sport 1024:65535\n\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -d $tserv --dport 123 --sport 123\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -d $tserv --dport 123 --sport 1024:65535\n\n";

  print FW "#Allow Access To IMAP/POP3 Remotely\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 143\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 110\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 993\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 995\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 143\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 110\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 993\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 995\n\n";

  print FW "#Allow Access To STUN Remotely\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 3478:3479\n";

  print FW "#Allow Remote SIP/IAX2/FOP\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 4445\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 5000\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 5060\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 5060:5061\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 4569\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d 0/0 --sport 5000 --dport 1024:65535\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d 0/0 --sport 5060 --dport 1024:65535\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0/0 --sport 5060:5061 --dport 1024:65535\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d 0/0 --dport 4569 --sport 1024:65535\n\n";

  print FW "#Allow Remote H.323 Registrations\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 1719:1722\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew -d 0/0 --dport 1719:1722 --sport 1024:65535\n\n";

#  print FW "#Allow Remote Google Talk Connections\n";
#  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnew -s 0/0 --sport 1024:65535 --dport 5222\n";

  print FW "#Allow Remote H.323 Signaling\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 10000:20000\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0/0 --sport 10000:12999 --dport 1024:65535\n\n";

  print FW "#Allow Access To LDAP/TLS Remotely\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp -m state --state ESTABLISHED,NEW,INVALID -s 0/0 --sport 1024:65535 --dport 636\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp -m state --state ESTABLISHED,NEW,INVALID -d 0/0 --dport 1024:65535 --sport 636\n\n";

  print FW "#Allow Remote SMTP Connections\n";
  $mailconf{'Delivery'}=lc($mailconf{'Delivery'});
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0/0 --dport 25 --sport 1024:65535\n\n";
  if ($mailconf{'Delivery'} ne "deffered") {
    print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --dport 25 --sport 1024:65535\n";
  }

  print FW "#Allow Remote ident Connections\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0/0 --dport 113 --sport 1024:65535\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0/0 --sport 1024:65535 --dport 113\n";

  print FW "#Accept External Access To Web Server/FTP\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0.0.0.0/0 --sport 1024:65535 --dport 80\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfrel -s 0.0.0.0/0 --sport 20 --dport 1024:65535\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -s 0.0.0.0/0 --sport 989 --dport 1024:65535\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 443 --sport 1024:65535\n\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 666 --sport 1024:65535\n\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p tcp --dport 8080 -m state --state ESTABLISHED,NEW\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 80 --sport 1024:65535\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 21 --sport 1024:65535\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 990 --sport 1024:65535\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 443 --sport 1024:65535\n\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d 0.0.0.0/0 --dport 666 --sport 1024:65535\n\n";

  print FW "#Allow IKE Negotiation / NAT-T\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp -s 0/0 --sport 500 --dport 500\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp -s 0/0 --sport 1024:65535 --dport 500\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp -s 0/0 --sport 1024:65535 --dport 4500\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp -d 0/0 --dport 500 --sport 500\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp -d 0/0 --dport 1024:65535 --sport 500\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp -d 0/0 --dport 1024:65535 --sport 4500\n\n";

  print FW "#Allow FTP Data\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfrel -d 0.0.0.0/0 --dport 1024:65535 --sport 1024:65535\n"; 

  print FW "#Allow Remote RTP\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp $sfnew --dport 1024:65535 --sport 10000:20000\n";
  print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p udp -s 0/0 --sport 10000:20000 --dport 1024:65535\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp $sfnre --sport 1024:65535 --dport 10000:20000\n";
  print FW "/sbin/iptables -A DEFIN -j ACCEPT -p udp -s 0/0 --sport 1024:65535 --dport 10000:20000\n\n";

#  foreach $mdrop (@emailmdrop) {
#    @mdata=split(/\|/,$mdrop);
#    if ((@mdata[7] eq "false") || (@mdata[7] eq "pop3")) {
#      if (@mdata[8] eq "true") {
#        if ($pop3mds{@mdata[0]} ne "1") {
#          print FWP "  #Allow Access To Multidrop Box On @mdata[0] For @mdat[7]\n";
#          print FWP "  if [ \"\$1\" != \"startup\" ];then\n";
#          print FWP "    /sbin/iptables -A EXTOUT -j ACCEPT $rout-p tcp $sfnew -d @mdata[0] --dport 995 -s $extip --sport 1024:65535 &\n";
#          print FWP "    /sbin/iptables -A EXTIN -j ACCEPT $rin-p tcp ! --syn $sfold -s @mdata[0] --sport 995 -d $extip --dport 1024:65535 &\n";
#          print FWP "  fi\n\n";
#          $pop3mds{@mdata[0]}=1;
#        }
#      } else {
#        if ($pop3md{@mdata[0]} ne "1") {
#          print FWP "  #Allow Access To Multidrop Box On @mdata[0] For @mdata[7]\n";
#          print FWP "  if [ \"\$1\" != \"startup\" ];then\n";
#          print FWP "    /sbin/iptables -A EXTOUT -j ACCEPT $rout-p tcp $sfnew -d @mdata[0] --dport 110 -s $extip --sport 1024:65535 &\n";
#          print FWP "    /sbin/iptables -A EXTIN -j ACCEPT $rin-p tcp ! --syn $sfold -s @mdata[0] --sport 110 -d $extip --dport 1024:65535 &\n";
#          print FWP "  fi\n\n";
#          $pop3md{@mdata[0]}=1;
#        }
#      }
#    } elsif ((@mdata[7] eq "true") || (@mdata[7] eq "imap")) {
#      if (@mdata[8] eq "true") {
#        if ($imap4mds{@mdata[0]} ne "1") {
#          print FWP "  #Allow Access To Multidrop Box On @mdata[0] For @mdata[7]\n";
#          print FWP "  if [ \"\$1\" != \"startup\" ];then\n";
#          print FWP "    /sbin/iptables -A EXTOUT -j ACCEPT $rout-p tcp $sfnew -d @mdata[0] --dport 143 -s $extip --sport 1024:65535 &\n";
#          print FWP "    /sbin/iptables -A EXTIN -j ACCEPT $rin-p tcp ! --syn $sfold -s @mdata[0] --sport 143 -d $extip --dport 1024:65535 &\n";
#          print FWP "  fi\n\n";
#          $imap4mds{@mdata[0]}=1;
#        }
#      } else {
#        if ($imap4mds{@mdata[0]} ne "1") {
#          print FWP "  #Allow Access To Multidrop Box On @mdata[0] For @mdata[7]\n";
#          print FWP "  if [ \"\$1\" != \"startup\" ];then\n";
#          print FWP "    /sbin/iptables -A EXTOUT -j ACCEPT $rout-p tcp $sfnew -d @mdata[0] --dport 993 -s $extip --sport 1024:65535 &\n";
#          print FWP "    /sbin/iptables -A EXTIN -j ACCEPT $rin-p tcp ! --syn $sfold -s @mdata[0] --sport 993 -d $extip --dport 1024:65535 &\n";
#          print FWP "  fi\n\n";
#          $imap4mds{@mdata[0]}=1;
#        }
#      }
#    }
#  }

  print FW "#Dont NAT Local/Tunnel Traffic And Allow Webserver On All Interfaces\n";
  print FW "/sbin/iptables -A NONAT -t nat -j NOFWDNAT\n";
  print FW "/sbin/iptables -A NONAT -t nat -j NOPPPNAT -o ppp+\n";
  print FW "/sbin/iptables -A NONAT -t nat -j ACCEPT -o gtun+\n";
  print FW "/sbin/iptables -A NONAT -t nat -j ACCEPT -o vpn+\n";
  foreach $iface (@ints) {
    @idata=split(/\|/,$interface{$iface});
    @idata[0]=join(" ",split(/_/,@idata[0]));
    $linkip=@idata[1];
    $linksn=@idata[2];
    if (($linkip eq "0.0.0.0") && ($linksn eq "32")) {
      next;
    }
    $linknw=getnw(@idata[2],@idata[1]);
    if (index(@idata[3],":") ne "-1") {
      $nonat=substr(@idata[3],0,index(@idata[3],":"));
    } else {
      $nonat=@idata[3];
    }
    if (index($sysconf{'Internal'},":") ne "-1") {
      $ethint=substr($sysconf{'Internal'},0,4);
    } else {
      $ethint=$sysconf{'Internal'};
    }
    @idata=split(/\|/,$interface{$ethint});

    print FW "/sbin/iptables -A NONAT -t nat -j ACCEPT -o $nonat -s $linknw/$linksn -d $linknw/$linksn\n";
    if (($sysconf{'Internal'} ne $iface) && ($iface ne $sysconf{'External'}) && ($iface ne $mdmconf{'ComPort'})) {
       @idata2=split(/\|/,$interface{$iface});
       $netaddr=getnw(@idata2[2],@idata2[1]);
       if ((@idata2[1] ne "0.0.0.0") && (@idata2[2] ne  "32")) {
         print FW "#Web Proxy For @idata2[3]\n";
         print FW "/sbin/iptables -t nat -A WEBACCESS -j DNAT -p tcp --to-destination @idata[1]:80 --dport 80 --sport 1024:65535 -d $linkip/32 -s $netaddr/@idata2[2]\n";
         print FW "/sbin/iptables -A WEBACCESSI -j ACCEPT -p tcp --dport 80 --sport 1024:65535 -d $localip/32 -s $netaddr/@idata2[2]\n";
         print FW "/sbin/iptables -A WEBACCESSO -j ACCEPT -p tcp --sport 80 --dport 1024:65535 -s $localip/32 -d $netaddr/@idata2[2]\n\n";

         if (index($iface,":") ne -1) {
           $iface=substr($iface,0,index($iface,":"));
         }

         print FW "#SIP/RTP Proxy For @idata2[3]\n";
         print FW "/sbin/iptables -t nat -A SIPMAP -j DEFPROXY -i $iface -d $linkip/32\n\n";
         $linknw=getnw(@idata2[2],@idata2[1]);
         print FW "/sbin/iptables -t nat -I SIPNAT -j SNAT -o $iface -d $linknw/@idata[2] --to-source $linkip\n\n";
      }
    }
  }

  foreach $wann (@wans) {
    @wdata=split(/\|/,$routes{$wann});
    $lnknme=join(" ",split(/_/,@wdata[0]));
    $lnknm=@wdata[2];
    $lnksn=@wdata[1];  

    print FW "/sbin/iptables -A NONAT -t nat -j ACCEPT -i $ethint -s $lnksn/$lnknm -d $localip/32\n";
    print FW "/sbin/iptables -A NONAT -t nat -j ACCEPT -o $ethint -d $lnksn/$lnknm -s $localip/32\n";
  }

  print FW "#Allow Local Lan Access To Local Web Server\n";
  print FW "/sbin/iptables -A PROXYBYPASS -j ACCEPT -t nat -p tcp $sfnew -i $ethint -s $locallan/$locallnm --sport 1024:65535 -d $localip/32\n";

  foreach $wann (@wans) {
    @wdata=split(/\|/,$routes{$wann});
    $lnknme=join(" ",split(/_/,@wdata[0]));
    $lnknm=@wdata[2];
    $lnksn=@wdata[1];  

    print FW "#Allow $lnknme Wan Access To Local Web Server Port $webport\n";
    print FW "/sbin/iptables -A PROXYBYPASS -j ACCEPT -t nat -p tcp $sfnew -i $ethint -s $lnksn/$lnknm --sport 1024:65535 -d $localip/32\n";
  }


#  print FW "#Allow Proxy To Respond Via Any Ethernet Interface\n";
#  print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o eth+ -p tcp $sfnew -s $localip/32 --sport 3128 -d 0/0 --dport 1024:65535\n\n";

#  print FW "#Loopback Access For DMZ\n";
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p tcp -m state --state RELATED -d 0/0 --dport 1024:65535 -s $localip/32 --sport 3128\n"; 
#  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp -m state --state RELATED -s 0/0 --sport 1024:65535 -d $localip/32 --dport 3128\n"; 
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p tcp -m state --state RELATED -s 0/0 --sport 1024:65535 -d $localip/32 --dport 3128\n"; 
#  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp -m state --state RELATED -d 0/0 --dport 1024:65535 -s $localip/32 --sport 3128\n\n"; 
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p tcp -m state --state RELATED -d 0/0 --dport 1024:65535 -s $localip/32 --sport 3129\n"; 
#  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp -m state --state RELATED -s 0/0 --sport 1024:65535 -d $localip/32 --dport 3129\n"; 
#  print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p tcp -m state --state RELATED -s 0/0 --sport 1024:65535 -d $localip/32 --dport 3129\n"; 
#  print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp -m state --state RELATED -d 0/0 --dport 1024:65535 -s $localip/32 --sport 3129\n\n"; 

  foreach $rewfw (@rewww) {
    $rewfint=$rewint{$rewfw};
    if ($rewfint ne "-") {
      @rewidata=split(/\|/,$interface{$rewfint});
      print FW "#Allow Redirect For $rewfw To $rewip{$rewfw}/32\n";
      print FW "/sbin/iptables -A PROXYOUT -j ACCEPT -o $rewint{$rewfw}  -p tcp -s @rewidata[1]/32 --sport 1024:65535 -d $rewip{$rewfw}/32 --dport 80 $sfnew\n\n";
    }
  }

  foreach $int (@ints) {
    @idata=split(/\|/,$interface{$int});
    if (@idata[1] eq "0.0.0.0") {
      next;
    }
    $ifnw=getnw(@idata[2],@idata[1]);
    if (index($int,":") ne -1) {
      $fint=substr($int,0,index($int,":"));
    } else {
      $fint=$int;
    }

    if ((@idata[1] ne "0.0.0.0") && ($sysconf{'External'} ne $fint)) {
      print FW "#SIP For @idata[1]\n";
#      print FW "/sbin/iptables -I SIPOUT -j ACCEPT -p udp -o $fint -m state --state NEW,ESTABLISHED --sport 10000:20000 -s @idata[1]/32 --dport 1024:65535\n";
#      print FW "/sbin/iptables -I SIPIN -j ACCEPT -p udp -i $fint -m state --state NEW,ESTABLISHED --dport 10000:20000 -d @idata[1]/32 --sport 1024:65535\n";
      print FW "/sbin/iptables -I SIPOUT -j ACCEPT -p udp -o $fint -m state --state NEW,RELATED,ESTABLISHED --sport 10000:20000 -s $localip/32 --dport 1024:65535\n";
      print FW "/sbin/iptables -I SIPOUT -j ACCEPT -p udp -o $fint -m state --state NEW,ESTABLISHED --sport 5000 -s $localip/32 --dport 1024:65535\n";
      print FW "/sbin/iptables -I SIPOUT -j ACCEPT -p udp -o $fint -m state --state NEW,ESTABLISHED --sport 5060 -s $localip/32 --dport 1024:65535\n";
      print FW "/sbin/iptables -I SIPOUT -j ACCEPT -p tcp -o $fint -m state --state NEW,ESTABLISHED --sport 5060:5061 -s $localip/32 --dport 1024:65535\n";
      print FW "/sbin/iptables -I SIPIN -j VOIPIN -p udp -i $fint --sport 1024:65535 -d $localip/32\n";
    }
#    print FW "#Flush VPN Table\n";
#    print FW "/sbin/ip route del table VPN\n\n";

    if (index($int,"gtun") ne -1) {
      $tintsrc{$int}.=$gretunrem{$int} . "/32";
      @tunsrcs=split(/;/,$tintsrc{$int});
      foreach $srcnet (@tunsrcs) {
        print FW "#Tunnel Rules For $int $srcnet\n";
        print FW "/sbin/iptables -A INPUT -j SYSIN -i $fint -s $srcnet -d @idata[1]/32\n";
        print FW "/sbin/iptables -A INPUT -j SYSOUT -i $fint -s $srcnet -d @idata[1]/32\n";
        print FW "/sbin/iptables -A OUTPUT -j SYSIN -o $fint -d $srcnet -s @idata[1]/32\n";
        print FW "/sbin/iptables -A OUTPUT -j SYSOUT -o $fint -d $srcnet -s @idata[1]/32\n";

        print FW "/sbin/iptables -A INPUT -j SYSIN -i $fint -s $srcnet -d $locallan/$locallnm\n";
        print FW "/sbin/iptables -A INPUT -j SYSOUT -i $fint -s $srcnet -d $locallan/$locallnm\n";
        print FW "/sbin/iptables -A OUTPUT -j SYSOUT -o $fint -d $srcnet -s $locallan/$locallnm\n";
        print FW "/sbin/iptables -A OUTPUT -j SYSIN -o $fint -d $srcnet -s $locallan/$locallnm\n";

        print FW "/sbin/ip route add $srcnet dev $int scope link src $localip table VPN\n";

        print FW "/sbin/iptables -A FORWARD -j ACCEPT -i $fint -o gtun+\n";
        print FW "/sbin/iptables -A FORWARD -j ACCEPT -o $fint -i gtun+\n";
        print FW "/sbin/iptables -A FORWARD -j ACCEPT -i $fint -o $sysconf{'Internal'} -s $srcnet -d $locallan/$locallnm\n";
        print FW "/sbin/iptables -A FORWARD -j ACCEPT -o $fint -i $sysconf{'Internal'} -d $srcnet -s $locallan/$locallnm\n\n";
#        print "Tunnel @idata $extip $srcnet " . $gretunrem{$int} . "\n";
#        print FW "/sbin/iptables -t nat -A VPNNAT -j SNAT --to-source @idata[1] -o $fint -s $locallan/$locallnm -d $srcnet\n";
      }

    } else {
      print FW "/sbin/iptables -A INPUT -j SYSIN -i $fint -s $ifnw/@idata[2] -d @idata[1]/32\n";
      print FW "/sbin/iptables -A OUTPUT -j SYSOUT -o $fint -d $ifnw/@idata[2] -s @idata[1]/32\n";
      if ($localip ne @idata[1]) {
        print FW "/sbin/iptables -A INPUT -j SYSIN -i $fint -s $ifnw/@idata[2] -d $localip/32\n";
#        print FW "/sbin/iptables -A OUTPUT -j SYSOUT -o $fint -d $ifnw/@idata[2] -s $localip/32\n";
      }    
    }

    if ($sysconf{'PrimaryDns'} ne "" ) { 
      print FW "/sbin/iptables -A INPUT -j DNSIN -i $fint -s $ifnw/@idata[2] -d $sysconf{'PrimaryDns'}\n";
      print FW "/sbin/iptables -A OUTPUT -j DNSOUT -o $fint -d $ifnw/@idata[2] -s $sysconf{'PrimaryDns'}\n";
      print FW "/sbin/iptables -A FORWARD -j DNSFWD -i $fint -s $ifnw/@idata[2] -d $sysconf{'PrimaryDns'}\n";
#      print FW "/sbin/iptables -A FORWARD -j DNSFWD -o $fint -d $ifnw/@idata[2] -s $sysconf{'PrimaryDns'}\n";
    }
    if ($sysconf{'SecondaryDns'} ne "" ) { 
      print FW "/sbin/iptables -A INPUT -j DNSIN -i $fint -s $ifnw/@idata[2] -d $sysconf{'SecondaryDns'}\n";
      print FW "/sbin/iptables -A OUTPUT -j DNSOUT -o $fint -d $ifnw/@idata[2] -s $sysconf{'SecondaryDns'}\n";
      print FW "/sbin/iptables -A FORWARD -j DNSFWD -i $fint -s $ifnw/@idata[2] -d $sysconf{'SecondaryDns'}\n";
#      print FW "/sbin/iptables -A FORWARD -j DNSFWD -o $fint -d $ifnw/@idata[2] -s $sysconf{'SecondaryDns'}\n";
    }
    print FW "/sbin/iptables -A INPUT -j MCASTIN -i $fint -s $ifnw/@idata[2]\n";
    print FW "/sbin/iptables -A OUTPUT -j MCASTOUT -o $fint -s $ifnw/@idata[2]\n";
  }

  foreach $wan (@wans) {
    @wdat=split(/\|/,$routes{$wan});
    print FW "/sbin/iptables -A INPUT -j SYSIN -i $ethint -s @wdat[1]/@wdat[2] -d $localip/32\n";
    print FW "/sbin/iptables -A OUTPUT -j SYSOUT -o $ethint -d @wdat[1]/@wdat[2] -s $localip/32\n";
    print FW "/sbin/iptables -I WANFWD -j ACCEPT -i $ethint -o $ethint -s $locallan/$locallnm -d @wdat[1]/@wdat[2] -m state --state NEW,INVALID\n";
    print FW "/sbin/iptables -I WANFWD -j ACCEPT -i $ethint -o $ethint -d $locallan/$locallnm -s @wdat[1]/@wdat[2] -m state --state NEW,ESTABLISHED\n";
    print FW "/sbin/iptables -I WANFWD -j ACCEPT -i $ethint -o $ethint -s $locallan/$locallnm -d @wdat[1]/@wdat[2] -m state --state NEW,ESTABLISHED\n";

    if ($sysconf{'PrimaryDns'} ne "" ) { 
      print FW "/sbin/iptables -A INPUT -j DNSIN -i $ethint -s @wdat[1]/@wdat[2] -d $sysconf{'PrimaryDns'}\n";
      print FW "/sbin/iptables -A OUTPUT -j DNSOUT -o $ethint -d @wdat[1]/@wdat[2] -s $sysconf{'PrimaryDns'}\n";
      print FW "/sbin/iptables -A FORWARD -j DNSFWD -i $ethint -s @wdat[1]/@wdat[2]  -d $sysconf{'PrimaryDns'}\n";
#      print FW "/sbin/iptables -A FORWARD -j DNSFWD -o $ethint -d @wdat[1]/@wdat[2] -s $sysconf{'PrimaryDns'}\n";
    }
    if ($sysconf{'SecondaryDns'} ne "" ) { 
      print FW "/sbin/iptables -A INPUT -j DNSIN -i $ethint -s @wdat[1]/@wdat[2] -d $sysconf{'SecondaryDns'}\n";
      print FW "/sbin/iptables -A OUTPUT -j DNSOUT -o $ethint -d @wdat[1]/@wdat[2] -s $sysconf{'SecondaryDns'}\n";
      print FW "/sbin/iptables -A FORWARD -j DNSFWD -i $ethint -s @wdat[1]/@wdat[2]  -d $sysconf{'SecondaryDns'}\n";
#      print FW "/sbin/iptables -A FORWARD -j DNSFWD -o $ethint -d @wdat[1]/@wdat[2] -s $sysconf{'SecondaryDns'}\n";
    }
    print FW "/sbin/iptables -A INPUT -j MCASTIN -i $ethint -s @wdat[1]/@wdat[2]\n";
    print FW "/sbin/iptables -A OUTPUT -j MCASTOUT -o $ethint -s @wdat[1]/@wdat[2]\n";
  }

  foreach $esplink (@esptunnels) {
    @espdat=split(/\|/,$esplink);
    if (@espdat[4] ne "") {
      if (@espdat[2] eq "") {
        @espdat[2]=$sysconf{'Internal'};
      }

      @espidata=split(/\|/,$interface{@espdat[3]});
      $espintip="@espidata[1]/32";
      $dmznw=getnw(@espidata[2],@espidata[1]);
      $dmznw.="/" . @espidata[2];
    } else {
      @espdat[4]=@espdat[3];
      $dmznw=@espdat[1];
      @espdat[1]=@espdat[2];
    }
#--gn todo
#Needed For End Point DMZ Interface
#/sbin/iptables -I VPNCIN -j ACCEPT -s @espdat[1] -d $espintip -p udp -m state --state ESTABLISHED --dport 1024:65535 --sport 10000:20000
#/sbin/iptables -I VPNCOUT -j ACCEPT -d @espdat[1] -s $espintip -p udp -m state --state NEW,ESTABLISHED --sport 1024:65535 --dport 10000:20000
#We Should Not TX Proxy on DMZ
#/sbin/iptables -I TXPROXY -p tcp -t nat -j ACCEPT -s @espdata[1] --sport 1024:65535 -d @espdat[1] --dport 21
#/sbin/iptables -I TXPROXY -p tcp -t nat -j ACCEPT -s @espdata[1] --sport 1024:65535 -d @espdat[1] --dport 80
#no longer needed on routeless system

    print FW "\n#Traffic For $dmznw <-> @espdat[1] Encrypted Tunnel\n";
    print FW<<__EOB__;
/sbin/ip route del @espdat[1] table Ipsec
/sbin/ip route add @espdat[1] src $localip dev @espdat[4] table Ipsec
/sbin/iptables -I VPNCIN -j SYSIN -i ppp+ -s @espdat[1] -d $localip/32
/sbin/iptables -I VPNCOUT -j SYSOUT -o ppp+ -d @espdat[1] -s  $localip/32
/sbin/iptables -I VPNCIN -j SYSIN -i @espdat[4] -s @espdat[1] -d $localip/32
/sbin/iptables -I VPNCOUT -j SYSOUT -o @espdat[4] -d @espdat[1] -s  $localip/32
/sbin/iptables -I VPNCIN -j ACCEPT -i @espdat[4] -s @espdat[1] -d $dmznw
/sbin/iptables -I VPNCOUT -j ACCEPT -o @espdat[4] -d @espdat[1] -s $dmznw
/sbin/iptables -A VPNFWD -j ACCEPT -i $sysconf{'Internal'}+ -s $dmznw -d @espdat[1]
/sbin/iptables -A VPNFWD -j ACCEPT -o $sysconf{'Internal'}+ -d $dmznw -s @espdat[1]
/sbin/iptables -t nat -A VPNNAT -j ACCEPT -s $dmznw -d @espdat[1] 
/sbin/iptables -t nat -A VPNWEB -j ACCEPT -d $dmznw -s @espdat[1] 
__EOB__
  } 

  if (@espdat[4] ne "") {
    print FW <<__EOB__;
      /sbin/iptables -t nat -A DMZNAT -j ACCEPT -o @espdat[4] ! -s $dmznw -d @espdat[0]
      /sbin/iptables -t nat -A DMZNAT -j SNAT --to-source @espidata[1] -o @espdat[4] ! -s $dmznw -d @espdat[1]
__EOB__
  }

#virtual IP Stuff to alias
#/sbin/ip route add $sysconf{'VPNNet'} src $localip dev $ethint table Ipsec\n";

  $vmark=1;
  foreach $adslvl (@vadsllink) {
    @adslldat=split(/\|/,$adsllink{$adslvl});
    if ((@adslldat[8] ne "") && (@adslldat[9] ne "")) {
     print FW "#Virtual IP Setup For @adslldat[0] @adslldat[8]-->@adslldat[9] (ppp$vmark)\n"; 
     print FW "/sbin/iptables -t mangle -A SIPLB -j MARK -d @adslldat[8] --set-mark 0x$vmark\n";
     print FW "/sbin/iptables -t nat -A SIPLB -j DNAT -d @adslldat[8] --to-destination @adslldat[9]\n\n";
    }
    $vmark++;
  }
  print FW "#Return Mapped Address Space\n";
  print FW "/sbin/iptables -t mangle -A SIPLB -j RETURN -m mark ! --mark 0\n\n";


  print FW <<_EOB_;
/sbin/iptables -A DEFPROXY -j REDIRECT -t nat -p tcp --sport 1024:65535 --dport 80 --to-port 8080 -m state --state ESTABLISHED,NEW
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 4569
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 5000
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 5060
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p tcp --to-destination $localip --sport 1024:65535 --dport 5060:5061
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 10000:20000
/sbin/iptables -A DEFPROXY -j DNAT -t nat -p udp --to-destination $localip --sport 1024:65535 --dport 1718:1720
/sbin/iptables -A DEFPROXY -j EXTPROXY -t nat

_EOB_

  print FWP "  #Allow Inbound IAX/SIP sessions\n";
  print FWP "  /sbin/iptables -t nat -A LOCALPROXY -j DEFPROXY \$INT_IN -d \$EXT_IP\n\n";

#  print FWP "  #Allow Transparent Proxy For External Connections\n";
#  print FWP "  /sbin/iptables -t nat -A LOCALPROXY -j REDIRECT \$INT_IN -p tcp -s 0.0.0.0/0 -d 0.0.0.0/0 --dport 80 --to-port 8080 -m state --state ESTABLISHED,NEW\n\n";

  ($proxyip,$webcatch)=split(/:/,$proxyconf{'Parent'});
  if ($webcatch ne "") {
    push(@bltcp,$webcatch);
  };

  if ($proxyip eq $localip) {
    print FW "#Allow Local Access From Squid To Trend Anti Virus Proxy\n";
    print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p tcp $sfnew -s $localip/32 --sport $webcatch -d $extip --dport 1024:65535\n";
    print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp ! --syn $sfold -d $localip/32 --dport $webcatch -s $extip --sport 1024:65535\n";
    print FW "/sbin/iptables -A LOOPOUT -j ACCEPT -o lo -p tcp ! --syn $sfold -s $localip/32 --sport $webcatch -d $extip --dport 1024:65535\n";
    print FW "/sbin/iptables -A LOOPIN -j ACCEPT -i lo -p tcp $sfnew -d $localip/32 --dport $webcatch -s $extip --sport 1024:65535\n\n";
  } elsif (($proxyip ne $localip) && ($webcatch > 0) && ($webcatch < 65536)) {

    print FW "#Allow Access To External Proxy Parent\n";
    print FW "/sbin/iptables -A DEFOUT -j ACCEPT -p tcp $sfnew -d $proxyip/32 --dport $webcatch --sport 1024:65535\n\n";

    $pxport=$webcatch;
    $webcatch=$proxyip;

#    print FW "#Allow Squid Access To Proxy Parent\n";
#    print FW "/sbin/iptables -A EXTIN -j ACCEPT -i $ethint -p tcp --sport 1024:65535 -d $webcatch/32 --dport $pxport\n";
#    print FW "/sbin/iptables -A EXTOUT -j ACCEPT -o $ethint -p tcp ! --syn --dport 1024:65535 -s $webcatch/32 --sport $pxport\n\n";

#    print FW "#Allow Proxy Parent  Access To WWW/FTP/SSL\n";
#    print FW "/sbin/iptables -A INPUT -j ACCEPT -i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 80\n";
#    print FW "/sbin/iptables -A POSTROUTING -j $nat -t nat $rout-p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rin-o $ethint -p tcp ! --syn $sfold -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 80\n";

#    print FW "/sbin/iptables -A INPUT -j ACCEPT -i $ethint -p tcp $sfold ! --syn -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#    print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o $ethint -p tcp $sfrel -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 20\n";
#    print FW "/sbin/iptables -A POSTROUTING -j $nat $rout-p tcp -t nat $sfrel -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rout-i $ethint -p tcp $sfold ! --syn -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rin-o $ethint -p tcp $sfrel -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 20\n";

#    print FW "/sbin/iptables -A INPUT -j ACCEPT -i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport  21\n";
#    print FW "/sbin/iptables -A POSTROUTING -j $nat -t nat $rout-p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rin-o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 21\n";

#    print FW "/sbin/iptables -A INPUT -j ACCEPT -i $ethint -p tcp $sfold ! --syn -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#    print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o $ethint -p tcp $sfnew -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#    print FW "/sbin/iptables -A POSTROUTING -j $nat $rout-p tcp -t nat $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rout-i $ethint -p tcp $sfold ! --syn -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rin-o $ethint -p tcp $sfrel -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";

#    print FW "/sbin/iptables -A INPUT -j ACCEPT -i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 990\n";
#    print FW "/sbin/iptables -A POSTROUTING -j $nat -t nat $rout-p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rin-o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 990\n";

#    print FW "/sbin/iptables -A FORWARD -j ACCEPT -i $ethint $rout-p tcp -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 1024:65535 -m state --state  ESTABLISHED,RELATED\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT -o $ethint $rin-p tcp ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport  1024:65535 -m state --state  ESTABLISHED\n";

#    print FW "/sbin/iptables -A INPUT -j ACCEPT -i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#    print FW "/sbin/iptables -A OUTPUT -j ACCEPT -o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 443\n";
#    print FW "/sbin/iptables -A POSTROUTING -j $nat -t nat $rout-p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $webcatch/32 --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#    print FW "/sbin/iptables -A FORWARD -j ACCEPT $rin-o $ethint -p tcp $sfold ! --syn -d $webcatch/32 --dport 1024:65535 -s 0.0.0.0/0 --sport 443\n\n";
  }

##PROXY RULES

  if ((@paccess[0] eq "") && (@pdeny[0] eq "")) {
#    print FW "#Allow FTP WEB AND SSL for Local Lan By Default\n";
#    print FW "/sbin/iptables -A PROXYOUT -j ACCEPT -p tcp $sfrel -o $ethint -d $locallan/$locallnm --dport 1024:65535 -s 0.0.0.0/0 --sport 20\n";
#    print FW "/sbin/iptables -A PROXYOUT -j ACCEPT -p tcp $sfnew -o $ethint -d $locallan/$locallnm --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#    print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#    print FWP "  #Masqurade Conections For Local Lan\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfrel -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rin-o $ethint -p tcp $sfnew -d $locallan/$locallnm --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport  80\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";


    print FW "#Allow Transparent Proxy For Local Lan\n";
    print FW "/sbin/iptables -A TXPROXY -p tcp -t nat -j REDIRECT --to-port 3129 -i $ethint -s $locallan/$locallnm\n\n";

    foreach $wann (@wans) {
      @wdata=split(/\|/,$routes{$wann});
      $lnknme=join(" ",split(/_/,@wdata[0]));
      $lnknm=@wdata[1];
      $lnksn=@wdata[2];  

      if ($lnksn != "0.0.0.0") {
#        print FW "#Allow FTP WEB AND SSL for $lnknme By Default\n";
#        print FWP "  #Allow FTP WEB AND SSL for $lnknme By Default\n";
#        print FW "/sbin/iptables -A PROXYOUT -j ACCEPT -p tcp $sfnew  -o $ethint -d $lnknm/$lnksn --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#        print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#        print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#        print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#        print FW "/sbin/iptables -A PROXYIN -j ACCEPT -p tcp $sfnew -i $ethint -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#        print FWP "  #Masqurade Conections For $lnknme\n";
#        print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfrel -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#        print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#        print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#        print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#        print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#        print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n\n";
#        print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rin-o $ethint -p tcp $sfnew -d $lnknm/$lnksn --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#        print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#        print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#        print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#        print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $lnknm/$lnksn --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n\n";

        print FW "#Allow Transparent For $lnknme Proxy\n";
        print FW "/sbin/iptables -A TXPROXY -p tcp -t nat -j REDIRECT --to-port 3129 -i $ethint -s $lnknm/$lnksn\n\n";
      }
    }
  }

#  foreach $proxnet (@paccess) {
#    print FW "#Transparent Proxy For Proxy Access " . $proxnet  . "\n";
#    print FW "/sbin/iptables -A TXPROXY -p tcp $sfnew -t nat -j REDIRECT --to-port 25 -i ppp+ -s $proxnet --sport 1024:65535 -d 0.0.0.0/0 --dport 25\n";
#    print FW "/sbin/iptables -A TXPROXY -p tcp $sfnew -t nat -j REDIRECT --to-port 3129 -i ppp+ -s $proxnet --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n\n";
#  }


#  foreach $netip (@pdeny) {
#    $accont="REJECT -p tcp --reject-with tcp-reset";
#    print FW "#Reject FTP WEB AND SSL For $netip\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 20\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 21\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 990\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 80\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 443\n\n";
# }

  foreach $netip (@pbypass) {
    print FW "#Allow TX Proxy Bypass For $netip\n";
    print FW "/sbin/iptables -A PROXYBYPASS -j ACCEPT -t nat -i $ethint -p tcp $sfnew -s $locallan/$locallnm --sport 1024:65535 -d $netip\n";
    foreach $wann (@wans) {
      @wdata=split(/\|/,$routes{$wann});
      $lnknme=join(" ",split(/_/,@wdata[0]));
      $lnknm=@wdata[2];
      $lnksn=@wdata[1];  
      print FW "/sbin/iptables -A PROXYBYPASS -j ACCEPT -t nat -i $ethint -p tcp $sfnew -s $lnksn/$lnknm --sport 1024:65535 -d $netip\n";
    }
    print FW "\n";
  }

  foreach $netip (@paccess) {
    $accont="ACCEPT -p tcp";
#    print FW "#Accept FTP WEB AND SSL For $netip\n";
#    print FWP "  #Accept FTP WEB AND SSL For $netip\n";
#    print FW "/sbin/iptables -A PROXYOUT -j $accont $sfnew -o $ethint -d $netip  --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont $sfnew -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont $sfnew -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont $sfnew -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FW "/sbin/iptables -A PROXYIN -j $accont $sfnew -i $ethint -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";
#    print FWP "  #Masqurade Conections For $netip\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfrel -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 20\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 989\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FWP "  /sbin/iptables -A EXTNAT -j $nat -t nat $rout-p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rin-o $ethint -p tcp $sfnew -d $netip --dport 1024:65535 -s 0.0.0.0/0 --sport 989\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 21\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 990\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 80\n";
#    print FWP "  /sbin/iptables -A PROXYFWD -j ACCEPT $rout-i $ethint -p tcp $sfnew -s $netip --sport 1024:65535 -d 0.0.0.0/0 --dport 443\n";

    print FW "#Allow Transparent Proxy\n";
    print FW "/sbin/iptables -A TXPROXY -p tcp -t nat -j REDIRECT --to-port 3129 -i $ethint -s $netip\n\n";
 }


  print FW "#SET Up A Tar Pit\n";
  print FW "/sbin/iptables -A INPUT -j SIPIN\n";
  print FW "/sbin/iptables -A INPUT -j TARPIT -p udp --dport 5000 -m state --state ESTABLISHED\n";
  print FW "/sbin/iptables -A INPUT -j TARPIT -p udp --dport 5060 -m state --state ESTABLISHED\n";
  print FW "/sbin/iptables -A INPUT -j TARPIT -p tcp --dport 5060:5061 -m state --state ESTABLISHED\n";
  print FW "/sbin/iptables -A INPUT -j TARPIT -m state --state NEW\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -p tcp --dport 3128\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -p tcp --dport 8080\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -p tcp --dport 443\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -p tcp --dport 666\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -p udp --dport 53\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -m state --state ESTABLISHED -m limit --limit 2/s --limit-burst 5\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -m state --state NEW -m limit --limit 2/s --limit-burst 5\n";
  print FW "/sbin/iptables -A TARPIT -j LOG -m recent --rcheck --seconds 30 --hitcount 20 --name RATELIM -m limit --limit 6/minute --limit-burst 1 --log-prefix \"RATELIM \" --log-level debug\n";
  print FW "/sbin/iptables -A TARPIT -j DENY -m recent --name RATELIM --update --seconds 30 --hitcount 20\n";
  print FW "/sbin/iptables -A TARPIT -j RETURN -m recent --name RATELIM --set\n\n";

  print FW "#Default Incoming/Outgoing Rules\n";
  print FW "/sbin/iptables -A INPUT -j LOCALIN\n";
  print FW "/sbin/iptables -A OUTPUT -j LOCALOUT\n";

  print FW "/sbin/iptables -A INPUT -j EXTIN\n";
  print FW "/sbin/iptables -A OUTPUT -j EXTOUT\n";


#  print FW "/sbin/iptables -A INPUT -j PROXYIN\n";
#  print FW "/sbin/iptables -A OUTPUT -j PROXYOUT\n\n";

  print FW "#Forward Access To Specified Primary Domain Server\n";
  print FW "/sbin/iptables -A DNSFWD -j ACCEPT -p udp $sfnew --sport 1024:65535 --dport 53\n";
  print FW "/sbin/iptables -A DNSFWD -j ACCEPT -p udp $sfnew --sport 53 --dport 53\n";
  print FW "/sbin/iptables -A DNSFWD -j ACCEPT -p tcp $sfnew --sport 1024:65535 --dport 53\n\n";

#  print FW "/sbin/iptables -A FORWARD -j DNSFWD\n";
#  print FW "/sbin/iptables -A FORWARD -j PROXYFWD\n";

#SBS SERVER RULES FOR MAIL/DNS

  @adsservs=split(/ /,$smboption{'ADSServer'});
  foreach $adsdc (@adsservs) {
    $adsdc=lc($adsdc);
    $dcfqdn=$adsdc . "." . lc($smboption{'ADSRealm'});

    if ($hosts{$adsdc} ne "") {
      ($dcnme,$dcipaddr)=split(/\|/,$hosts{$adsdc});
    } elsif ($hosts{$dcfqdn} ne "") {
      ($dcnme,$dcipaddr)=split(/\|/,$hosts{$dcfqdn});
    }

    if ($dcipaddr ne "") {
      $dcipaddr=$dcipaddr . "/32";
    } else {
      $dcnme=$adsdc;
      $dcipaddr=$dcfqdn;
    }

    print FWP "#Allow Mail/DNS To DC " . $dcnme . " " . $dcipaddr . "/32\n";
    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p tcp -m state --state NEW,RELATED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 1024:65535 -s $dcipaddr --sport 25\n";
    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 1024:65535 -s $dcipaddr --sport 25\n";
    print FWP "/sbin/iptables -A SBSRULESO -j ACCEPT -p tcp -m state --state NEW,ESTABLISHED -o " . $sysconf{'Internal'} . " -s $localip/32 --sport 1024:65535 -d $dcipaddr --dport 25\n";

    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p tcp -m state --state NEW,RELATED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 1024:65535 -s $dcipaddr --sport 53\n";
    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p tcp ! --syn -m state --state ESTABLISHED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 1024:65535 -s $dcipaddr --sport 53\n";
    print FWP "/sbin/iptables -A SBSRULESO -j ACCEPT -p tcp -m state --state NEW,ESTABLISHED -o " . $sysconf{'Internal'} . " -s $localip/32 --sport 1024:65535 -d $dcipaddr --dport 53\n";

    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p udp -m state --state NEW,RELATED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 1024:65535 -s $dcipaddr --sport 53\n";
    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p udp -m state --state ESTABLISHED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 1024:65535 -s $dcipaddr --sport 53\n";
    print FWP "/sbin/iptables -A SBSRULESO -j ACCEPT -p udp -m state --state NEW,ESTABLISHED -o " . $sysconf{'Internal'} . " -s $localip/32 --sport 1024:65535 -d $dcipaddr --dport 53\n";

    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p udp -m state --state NEW,RELATED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 53 -s $dcipaddr --sport 53\n";
    print FWP "/sbin/iptables -A SBSRULESI -j ACCEPT -p udp -m state --state ESTABLISHED -i " . $sysconf{'Internal'} . " -d $localip/32 --dport 53 -s $dcipaddr --sport 53\n";
    print FWP "/sbin/iptables -A SBSRULESO -j ACCEPT -p udp -m state --state NEW,ESTABLISHED -o " . $sysconf{'Internal'} . " -s $localip/32 --sport 53 -d $dcipaddr --dport 53\n";
  }

###User Rules

#  foreach $esplink (@esptunnels) {
#    @espdat=split(/\|/,$esplink);
#    print FWP "\n  #Traffic For @espdat[1] <-> @espdat[2] Encrypted Tunnel\n";
#    print FWP<<__EOB__;
#  /sbin/iptables -A VPNLIN -j SYSIN -s @espdat[2] -d \$EXT_IP
#  /sbin/iptables -A VPNLOUT -j SYSOUT -d @espdat[2] -s \$EXT_IP
#__EOB__
#  } 
#  print FWP "\n  /sbin/iptables -A VPNLIN -j RETURN\n";
#  print FWP "  /sbin/iptables -A VPNLOUT -j RETURN\n\n";

  foreach $fwrule (@fwrules) {
    @rdata=split(/\|/,$fwrule);

    $staterel="  -m state --state NEW,RELATED";
    if (@rdata[11] eq "Out") {
      if (@rdata[10] eq "New") {
        $statein=" -m state --state NEW,ESTABLISHED";
      } elsif (@rdata[10] ne "Any") {
        $statein=" -m state --state RELATED,ESTABLISHED";
      } else {
        $statein="";
      }
      if ((@rdata[4] eq "TCP") && (@rdata[10] ne "Any")) {
        $stateout=" ! --syn -m state --state ESTABLISHED";
      } elsif (@rdata[10] ne "Any") {
        $stateout=" -m state --state ESTABLISHED";
      } else {
        $stateout="";
      }
    } elsif (@rdata[11] eq "In") {
      if ((@rdata[4] eq "TCP") && (@rdata[10] ne "Any")) {
        $statein=" ! --syn -m state --state ESTABLISHED";
      } elsif (@rdata[10] ne "Any") {
        $statein=" -m state --state ESTABLISHED";
      } else {
        $statein="";
      }
      if (@rdata[10] eq "New") {
        $stateout=" -m state --state NEW,ESTABLISHED";
      } elsif (@rdata[10] ne "Any") {
        $stateout=" -m state --state RELATED,ESTABLISHED";
      } else {
        $stateout="";
      }
    }

    if (@rdata[4] eq "UDP") {
      $proto=" -p udp";
    } elsif (@rdata[4] eq "TCP") {
      $proto=" -p tcp";
    } elsif (@rdata[4] eq "ESP") {
      $proto=" -p esp";
    } elsif (@rdata[4] eq "AH") {
      $proto=" -p ah";
    } elsif (@rdata[4] eq "GRE") {
      $proto=" -p gre";
    } elsif (@rdata[4] eq "OSPF") {
      $proto=" -p ospf";
    } else {
      $proto="";
    }

    if (@rdata[6] eq "Accept") {
      $rpolicy="ACCEPT$proto";
    } elsif (@rdata[6] eq "Deny And Log" ) {
      $rpolicy="DENY$proto";
    } elsif (@rdata[6] eq "Deny" ) {
      $rpolicy="REJECT$proto";
      if ($proto eq " -p tcp") {
        $rpolicy.=" --reject-with tcp-reset";
      }
    }

    if ($grert{@rdata[9]} ne "") {
      @rdata[9]=$grert{@rdata[9]};
    }

    @idata=split(/\|/,$interface{@rdata[9]});
    $extip="@idata[1]/32";

    $fwnat=$nat;
    if (@rdata[8] eq "-") {
      $dest="\$EXT_IP";
      $rin="\$INT_IN";
      $rout="\$INT_OUT";
    } elsif (@rdata[8] eq "+") {
      $dest="0/0";
      $rin="-i gtun+";
      $rout="-o gtun+";
    } elsif (@rdata[8] eq "=") {
      $dest="0/0";
      $rin="-i vpn0";
      $rout="-o vpn0";
    } else {
      @idata=split(/\|/,$interface{@rdata[8]});
      $fwnat="SNAT --to-source " . @idata[1];
      (@rdata[8])=split(/:/,@rdata[8]);
      $rout="-o @rdata[8] ";
      $rin="-i @rdata[8] ";
      $dest="@idata[1]/32";
    }

    $rname=join(" ",split(/_/,@rdata[7]));
    $rname.="-(";
    $rname.=join(" ",split(/_/,@rdata[0]));
    $rname.=")";

    @rdata[7]="@rdata[7]:@rdata[9]";

    @ipdat=split(/\|/,$interface{@rdata[9]});
    if (@rdata[5] eq "Local") {
      $localip="@ipdat[1]/32";
    } else {
      $localip=@ipdat[1];
    }

    if ((@rdata[9] eq "Modem") && (($sysconf{'External'} eq "Dialup") || (@vadsllink > 0) || ($mdmconf{'Connection'} eq "ADSL") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW"))){
      if (@rdata[5] eq "Local") {
        @rdata[9]="ppp+";
        $localip="0/0";
      } elsif (@rdata[5] eq "Proxy") {
        @rdata[9]="ppp+";     
      } else {
        @rdata[9]="\$INT_NAME";
        $localip="\$EXT_IP_ADDR";
        $extip="\$EXT_IP";
      }
      $outint="\$INT_NAME";
    } else {
      $outint=@rdata[9];
    }

    if (@rdata[13] eq "High") {
      @rdata[13]="0x101";
    } elsif (@rdata[13] eq "Med") {
      @rdata[13]="0x102";
    } elsif (@rdata[13] eq "Low") {
      @rdata[13]="0x103";
    } else {
      @rdata[13]="0x102";
    }

    (@rdata[9])=split(/:/,@rdata[9]);
    if ((@rdata[5] eq "Local") && (@rdata[9] ne "Modem")){
      if (($proto eq " -p tcp") || ($proto eq " -p udp")) {
        print FWP "  #Local @rdata[6] $rname $fwsource{@rdata[7]}:@rdata[2] --> $localip:@rdata[3]\n";
        if (@rdata[11] eq "Out") {
          print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d $localip --dport @rdata[3]\n";
        } else {
          print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s $localip --sport @rdata[3]\n";
        }
#        if (@rdata[11] eq "Out") {
#          print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$staterel -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s $localip --sport @rdata[3]\n";        } elsif (@rdata[11] eq "In") {
#          print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$staterel -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d $localip --dport @rdata[3]\n";
#        }
        if (@rdata[6] eq "Accept") {
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s $localip --sport @rdata[3]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d $localip --dport @rdata[3]\n";
          if (@rdata[11] eq "Out") {
            print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s $localip --sport @rdata[3]\n";
          } elsif (@rdata[11] eq "In") {
            print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d $localip --dport @rdata[3]\n";
          }          
        }
        print FWP "\n";
      } else {
        print FWP "  #Local @rdata[6] $rname $fwsource{@rdata[7]} --> $localip\n";
        if (@rdata[11] eq "Out") {
          print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d $localip\n";
        } else {
          print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} -s $localip\n";
        }
        if (@rdata[6] eq "Accept") {
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} -s $localip\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} -d $localip\n";
          if (@rdata[11] eq "Out") {
            print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} -s $localip\n";
          } elsif (@rdata[11] eq "In") {
            print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} -d $localip\n";
          }          
        }
        print FWP "\n";
#        print FWP "  /sbin/iptables -A SYSTOS -j TOS -t mangle$proto$stateout -o $outint -d $fwsource{@rdata[7]} -s $localip --set-tos @rdata[12]\n"
      }
    } elsif ((@rdata[5] eq "NAT") && (@rdata[9] ne "Modem")) {
      print FWP "  #NAT @rdata[6] $rname $fwsource{@rdata[7]}:@rdata[2] --> @rdata[1]:@rdata[3]\n";
      if (($proto eq " -p tcp") || ($proto eq " -p udp")) {
#        print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
#        print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
        if (@rdata[11] eq "Out") {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$statein $rout-i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
        } else {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$stateout $rin-o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
        }
        if (@rdata[6] eq "Accept") {
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] $rin-d $dest --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] $rout-s $dest --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
          print FWP "  /sbin/iptables -A EXTNAT -j $fwnat -t nat $rout$proto$statein -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
          print FWP "  /sbin/iptables -A LOCALTOS -j TOS -t mangle$proto$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3] --set-tos @rdata[12]\n"
        }
        print FWP "\n";
      } else {
#        print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
#        print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
        if (@rdata[11] eq "Out") {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$statein $rout-i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
        } else {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$stateout $rin-o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
        }
        if (@rdata[6] eq "Accept") {
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] $rin-d $dest -s @rdata[1]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] $rout-s $dest -d @rdata[1]\n";
          print FWP "  /sbin/iptables -A EXTNAT -j $fwnat -t nat $rout$proto$statein -s $fwsource{@rdata[7]} -d @rdata[1]\n";
          print FWP "  /sbin/iptables -A LOCALTOS -j TOS -t mangle$proto$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1] --set-tos @rdata[12]\n"
        }
        print FWP "\n";
      }
      print FWP "  \n";
    } elsif ((@rdata[5] eq "Forward") && (@rdata[9] ne "Modem")) {
      if (($proto eq " -p tcp") || ($proto eq " -p udp")) {
        print FWP "  #Forward @rdata[6] $rname $fwsource{@rdata[7]}:@rdata[2] --> @rdata[1]:@rdata[3]\n";
#        print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
#        print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
        if (@rdata[11] eq "Out") {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$statein -i @rdata[9] $rout$tsynin -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
        } else {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$stateout -o @rdata[9] $rin$tsynout -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
        }
        if (@rdata[6] eq "Accept") {
#          print FWP "  /sbin/iptables -t nat -A NOFWDNAT -j ACCEPT $proto$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
          print FWP "  /sbin/iptables -t nat -A NOFWDNAT -j ACCEPT $proto$statein -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
          print FWP "  /sbin/iptables -A LOCALTOS -j TOS -t mangle$proto$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3] --set-tos @rdata[12]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport @rdata[3]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport @rdata[3]\n";
        }
      } else { 
        print FWP "  #Forward @rdata[6] $rname $fwsource{@rdata[7]} --> @rdata[1]\n";
#        print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
#        print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
        if (@rdata[6] eq "Accept") {
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$statein -i @rdata[9] $rout$tsynin -s $fwsource{@rdata[7]} -d @rdata[1]\n";
          print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$stateout -o @rdata[9] $rin$tsynout -d $fwsource{@rdata[7]} -s @rdata[1]\n";
#          print FWP "  /sbin/iptables -t nat -A NOFWDNAT -j ACCEPT $proto$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
          print FWP "  /sbin/iptables -t nat -A NOFWDNAT -j ACCEPT $proto$statein -o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
          print FWP "  /sbin/iptables -A LOCALTOS -j TOS -t mangle$proto$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1] --set-tos @rdata[12]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
          print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
        }
      }
      print FWP "  \n";
    } elsif ((@rdata[5] eq "Proxy") && (@rdata[9] ne "Modem")) {
      @idata=split(/\|/,$interface{@rdata[8]});
      @xdata=split(/\|/,$interface{$outint});
      ($ext_port,$int_port)=split(/-/,@rdata[3]);
      if ($int_port eq "") {
        $int_port=$ext_port;
      }
      $ext_port_orig=$ext_port;
      if (@xdata[1] ne "") {
        $extip_rt=@xdata[1];
      } else {
        $extip_rt=@rdata[1];
      }
      print FWP "  #Proxy @rdata[6] $rname $fwsource{@rdata[7]}:@rdata[2] --> @rdata[1]:@rdata[3]\n";
      if (($proto eq " -p tcp") || ($proto eq " -p udp")) {
        if (@rdata[6] eq "Accept") {
          if ($ishostip{@rdata[1]} ne "") {
            print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport $int_port\n";
          } else {
            print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$statein $rout-i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport $int_port\n";
            print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1] --sport $int_port\n";
            print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} --sport @rdata[2] -d @rdata[1] --dport $int_port\n";
          }
          if (@rdata[9] eq "ppp+") {
            print FWP "  /sbin/iptables -A EXTPROXY -i ppp+ -j DNAT -t nat$proto $statein --to-destination @rdata[1]:$int_port -s $fwsource{@rdata[7]} --sport @rdata[2] --dport $ext_port_orig\n";
          } else {
            print FWP "  /sbin/iptables -A EXTPROXY -j DNAT -t nat$proto $statein --to-destination @rdata[1]:$int_port -s $fwsource{@rdata[7]} -d $extip_rt --sport @rdata[2] --dport $ext_port_orig\n";
          }
        }
        print FWP "  /sbin/iptables -A LOCALTOS -j TOS -t mangle$proto$statein -i @rdata[8] -d $fwsource{@rdata[7]} --dport @rdata[2] -s @rdata[1]/32 --sport $int_port --set-tos @rdata[12]\n" ;
      } else {
        print FWP "  /sbin/iptables -A LOCALIN -j $rpolicy$statein -i @rdata[9] -s $fwsource{@rdata[7]} -d $extip_rt\n";
        print FWP "  /sbin/iptables -A LOCALOUT -j $rpolicy$stateout -o @rdata[9] -d $fwsource{@rdata[7]} -s $extip_rt\n";
        if (@rdata[6] eq "Accept") {
          if ($local_proxy ne "true") {
            print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$statein $rout-i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
            print FWP "  /sbin/iptables -A LOCALFWD -j $rpolicy$stateout $rin-o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
            print FWP "  /sbin/iptables -t mangle -A LOCALOUT -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -o @rdata[9] -d $fwsource{@rdata[7]} -s @rdata[1]\n";
            print FWP "  /sbin/iptables -t mangle -A LOCALIN -j MARK$proto -m mark --mark 0x102 --set-mark @rdata[13] -i @rdata[9] -s $fwsource{@rdata[7]} -d @rdata[1]\n";
          }
          print FWP "  /sbin/iptables -A EXTPROXY -j DNAT -t nat$proto $statein --to-destination @rdata[1] -s $fwsource{@rdata[7]}\n";
        }
      }
      print FWP "  \n";
    }
  }


  if ($sysconf{'External'} ne "Dialup") {
     $ethext=$sysconf{'External'};
     @idata=split(/\|/,$interface{$ethext});
   }

#  if ($mdmconf{'LinkTest'} ne "") {
#    print FWP "  #Allow Trafic For Link Testing\n";
#    print FWP "  /sbin/iptables -A LOCALIN -j ACCEPT -i ppp+ -p udp -s $mdmconf{'LinkTest'} --sport 53 -m state --state ESTABLISHED\n";
#    print FWP "  /sbin/iptables -A LOCALOUT -j ACCEPT -o ppp+ -p udp -d $mdmconf{'LinkTest'} --dport 53 -m state --state NEW,ESTABLISHED\n\n";
#  }

#  print FWP "  /sbin/iptables -A LOCALIN -j RETURN\n";
#  print FWP "  /sbin/iptables -A SBSRULESI -j RETURN\n";
#  print FWP "  /sbin/iptables -A LOCALOUT -j RETURN\n";
#  print FWP "  /sbin/iptables -A SBSRULESO -j RETURN\n";
#  print FWP "  /sbin/iptables -A LOCALFWD -j VPNFWD\n";

  foreach $rlink (@radlink) {
    @lidata=split(/\|/,$rlink);
    print FWP "  #PPP Link @lidata[0]\n";
    print FWP "  /sbin/iptables -A LOCALFWD -j ACCEPT -i ppp+ \$INT_OUT -s @lidata[1] -d 0/0 -m state --state NEW,ESTABLISHED\n";
    print FWP "  /sbin/iptables -A LOCALFWD -j ACCEPT \$INT_IN -o ppp+ -d @lidata[1] -s 0/0 -m state --state RELATED,ESTABLISHED\n";
    print FWP "  /sbin/iptables -A EXTNAT -t nat -j $nat \$INT_OUT -s @lidata[1] -m state --state NEW,ESTABLISHED\n\n";
  }

  if (($wirelessrange ne "")  && ($wirenonat eq "true")) {
    print FWP "  #PPPoE Connections NAT\n";
    print FWP "  /sbin/iptables -A EXTNAT -t nat -j $nat \$INT_OUT -s $wirelessrange -m state --state NEW,ESTABLISHED\n\n";
  } elsif ($wirelessrange ne "") {
    print FWP "  #PPPoE Connections No NAT\n";
    print FWP "  /sbin/iptables -A NONAT -t nat -j ACCEPT \$INT_OUT -s $wirelessrange -m state --state NEW,ESTABLISHED\n\n";
  }

  if ($hspotrange ne "") {
    print FWP "  #Hotspot Connections NAT\n";
    print FWP "  /sbin/iptables -A EXTNAT -t nat -j $nat \$INT_OUT -s $hspotrange -m state --state NEW,ESTABLISHED\n\n";
  }

  print FW "/sbin/iptables -A OUTPUT -j SIPOUT\n";
  print FW "/sbin/iptables -A INPUT -j SBSRULESI\n";
  print FW "/sbin/iptables -A OUTPUT -j SBSRULESO\n";
  print FW "/sbin/iptables -A FORWARD -j WANFWD\n";
  print FW "/sbin/iptables -A FORWARD -j PPPFWD\n";

  print FW "/sbin/iptables -A INPUT -j 3GIN\n";
  print FW "/sbin/iptables -A OUTPUT -j 3GOUT\n";
  print FW "/sbin/iptables -A FORWARD -j MANGLEFWD\n";
  print FW "/sbin/iptables -A INPUT -j MANGLEIN\n";
  print FW "/sbin/iptables -A OUTPUT -j MANGLEOUT\n";
#  print FW "/sbin/iptables -A INPUT -j BLKIN\n";
#  print FW "/sbin/iptables -A OUTPUT -j BLKOUT\n";

  @bludp=sort {$a <=> $b} @bludp;
  @bltcp=sort {$a <=> $b} @bltcp;


#  print FW "#Reject RIP Advertisments on PPP links\n";
#  print FW "/sbin/iptables -A BLKOUT -j REJECT --reject-with icmp-port-unreachable -p udp -o ppp+ -d 224.0.0.9 --sport 520 --dport 520\n\n";

  foreach $port (@bludp) {
    if ($blockedu{$port} eq "") {
#      print FW "#Block Access To Port $port UDP\n";
#      print FW "/sbin/iptables -A BLKIN -j DENY -p udp -d 0/0 --dport $port -s 0/0\n";
#      print FW "/sbin/iptables -A BLKOUT -j DENY -p udp -s 0/0 --sport $port -d 0/0\n\n";
      $blockedu{$port}=true;
    }
  }

  foreach $port (@bltcp) {
    if ($blockedt{$port} eq "") {
#      print FW "#Block Access To Port $port TCP\n";
#      print FW "/sbin/iptables -A BLKIN -j DENY -p tcp -d 0/0 --dport $port -s 0/0\n";
#      print FW "/sbin/iptables -A BLKOUT -j DENY -p tcp -s 0/0 --sport $port -d 0/0\n\n";
      $blockedt{$port}=true;
    }
  }


  if ($defproto{'tcp'}) {
    print FW "#Allow Returning TCP Packets\n";
    print FW "/sbin/iptables -A INPUT -j ACCEPT ";
  }

  print FW "#Reject And Log All Other Packets\n";
  print FW "/sbin/iptables -A INPUT -j DENY\n";
  print FW "/sbin/iptables -A OUTPUT -j DENY\n";
  print FW "\n#Drop Braindead Windows SMB Requests\n";
  print FW "/sbin/iptables -A FORWARD -j DROP -p udp -s 0/0 --sport 137 -d 0/0 --dport 137\n";
  print FW "/sbin/iptables -A FORWARD -j DENY\n\n";

    print FWP "\n  if [ \"\$0\" == \"/etc/ppp/ip-down\" ];then\n";
    print FWP "    cp /etc/mail/sendmail.cf.orig /etc/mail/sendmail.cf\n";
    print FWP "    if [ \"\$4\" != \"hotplug\" ];then\n"; 
    print FWP "      EMAIL_PID=`/bin/pidof sendmail`\n";
    print FWP "      if [ \"\$EMAIL_PID\" ];then\n";
    print FWP "        kill -1 `cat /var/run/sendmail.pid |head -1`\n";
    print FWP "       else\n";
    print FWP "        /etc/rc.d/rc.mail sendmail\n";
    print FWP "      fi;\n";
    print FWP "    fi;\n";
    print FWP "  fi;\n";

    print FWP "  \n\n  ##IP-UP\n\n";

    print FWP "  if [ \"\$0\" == \"/etc/ppp/ip-up\" ];then\n";
    print FWP "  #Flush ESP SPD\n";
#    print FWP "  /usr/bin/sed -e \"s/GATEWAY/\$DEST_IP/\" -e \"s/Dialup/\$INT_NAME/\" -e \"s/EXTERNAL/\$EXT_IP_ADDR/\" /etc/ipsec.conf.orig > /etc/ipsec.conf\n";
    print FWP "  setkey -F > /dev/null 2>&1\n";

    if ($dnsconf{'Usepeer'} ne "true") {
      print FWP<<__EOB__;

  if [ "\$USEPEERDNS" == "1" ] && [ "\$DNS1" ];then
    if [ "\$DNS2" ];then
       FWD="\${DNS1};\${DNS2}";
     else
      FWD=\${DNS1}
    fi;
    echo "FWD=\\\"\${FWD}\\\";" > /etc/named.fwd
    sed -e "s/^#FWD/       forwarders \\{\$FWD;\\};/" /etc/named.conf.orig > /etc/named.conf
  fi;
__EOB__
    }
#    print FWP "  if [ \"`/bin/pidof named`\" ];then\n    /usr/sbin/rndc reload &\n    sleep 5\n   else\n     /usr/sbin/named\n  fi;\n";
    print FWP "  if [ \"`/bin/pidof named`\" ];then\n    /usr/sbin/rndc reload &\n    sleep 5\n   fi;\n";
    print FWP "  squid -k reconfigure >/dev/null 2>&1\n";


    if ($dnsconf{'Hostname'}) {
      $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
      $delrec="update delete $dnsconf{'Hostname'}.$dnsconf{'DynZone'}. A\nupdate delete $dnsconf{'Hostname'}.$dnsconf{'DynZone'}. CNAME\n\$ADD_DNS";
    } else {
      $fqdn=$dnsconf{'Domain'}
    }

  if ($dnsconf{'DynServ'} ne "127.0.0.2") {
    $localsrv="\nlocal \$EXT_IP_ADDR";
  }

print FWP<<__EOB__;

  FWD_DNS=`echo \$EXT_IP_ADDR |awk -F. '{print "dig "\$4"."\$3"."\$2"."\$1".in-addr.arpa PTR +short +time=3 +tries=1"}' |sh |head -1`
  if [ "\${FWD_DNS}" != ";;" ];then
    REV_DNS=`dig "\$FWD_DNS" A +short +time=3 +tries=1|tail -1`
   else
    REV_DNS=\${EXT_IP_ADDR}
  fi;

  EMAIL_SERV=`echo \$FWD_DNS |awk '{print substr(\$0,0,length(\$0)-1)}'`

  if [ \"\$4\" != \"hotplug\" ];then
    if [ "\$REV_DNS" != "\$EXT_IP_ADDR" ];then
      ADD_DNS="update add $dnsconf{'Hostname'}.$dnsconf{'DynZone'}. 180 A \$EXT_IP_ADDR"
      cp /etc/mail/sendmail.cf.orig /etc/mail/sendmail.cf
      EMAIL_PID=`/bin/pidof sendmail`
      if [ "\$EMAIL_PID" ];then
          kill -1 `cat /var/run/sendmail.pid |head -1`
         else
          /etc/rc.d/rc.mail sendmail
      fi;
     else
      ADD_DNS="update add $dnsconf{'Hostname'}.$dnsconf{'DynZone'}. 180 CNAME \$FWD_DNS"
      sed -e "s/^Dj.*/Dj\$EMAIL_SERV/" /etc/mail/sendmail.cf.orig > /etc/mail/sendmail.cf
      EMAIL_PID=`/bin/pidof sendmail`
      if [ "\$EMAIL_PID" ];then
          kill -1 `cat /var/run/sendmail.pid |head -1`
         else
          /etc/rc.d/rc.mail sendmail
      fi;
    fi;

(cat <<EOF
server $dnsconf{'DynServ'}$localsrv
key $dnsconf{'DynZone'} $smartkey
zone $dnsconf{'DynZone'}
update delete $dnsconf{'DynZone'}. A
update add $dnsconf{'DynZone'}. 180 A \$EXT_IP_ADDR
$delrec
send
EOF
)>/tmp/dnsup.ppp

  chmod 640 /tmp/dnsup.ppp
  echo \$1 > /tmp/ppp.main.int
__EOB__
    if ($dnsconf{'DynZone'} ne "") {
      print FWP "    /usr/bin/nsupdate /tmp/dnsup.ppp\n";
    }
#    print FWP "    if [ \"`/bin/pidof named`\" ];then\n      /usr/sbin/rndc reload &\n      sleep 5\n   else\n     /usr/sbin/named\n    fi;\n";
    print FWP "    if [ \"`/bin/pidof named`\" ];then\n      /usr/sbin/rndc reload &\n      sleep 5\n   fi;\n";
    print FWP "    (/usr/bin/fetchmail;sendmail -q;sendmail -q -Ac) > /dev/null 2>&1 &\n";
    print FWP "    fi;\n";
    print FWP "  fi;\n\n";
print FWP<<__EOB__;
  #No-IP.com
  if [ "\$INT_NAME" != "lo" ] && [ "\$INT_NAME" != "dummy0" ];then
    if [ ! -e /etc/.networksentry-lite ] && [ -e /etc/no-ip2.conf ] && [ ! "`/bin/pidof noip2`" ];then
      (/usr/sbin/noip2 -I \$INT_NAME > /dev/null 2>&1) &
     elif [ ! -e /etc/.networksentry-lite ] && [ -e /etc/no-ip2.conf ];then
      (/usr/sbin/noip2 -I \$INT_NAME -i \$EXT_IP_ADDR > /dev/null 2>&1) &
    fi;
  fi;
__EOB__
  if ($sysconf{'External'} eq "Dialup") {
  }

}

  print FWP "  #Run Default TOS Script\n";
  print FWP "  if [ -x /etc/rc.d/rc.tos ] &&  [ \"\$DEST_IP\" ];then\n";
  print FWP "    /etc/rc.d/rc.tos \$INT_NAME\n";
  print FWP "  fi;\n\n";

#  print FWP "  #Run STUN Server\n";
#  print FWP "  killall -9 stund > /dev/null 2>&1;sleep 2\n";
#  print FWP "  /usr/sbin/stund -h \$EXT_IP_ADDR -m 10000 -v -b > /dev/null 2>&1\n\n";


  print FWP "  #Run Mangle Script\n";
  print FWP "  if [ -x /etc/rc.d/rc.mangle ] &&  [ \"\$DEST_IP\" ];then\n";
  print FWP "    /etc/rc.d/rc.mangle \$EXT_IP_ADDR \$DEST_IP \$INT_NAME\n";
  print FWP "  fi;\n\n";

  print FWP "  #Restart NMBD\n";
  print FWP "  while [ \"`/bin/pidof nmbd`\" ];do\n";
  print FWP "    killall -9 nmbd;\n";
  print FWP "    sleep 1;\n";
  print FWP "  done\n\n";
  print FWP "  /usr/sbin/nmbd -D;\n";

  print FWP "  if [ \"\$1\" != \"startup\" ]  && [ \"\$4\" != \"hotplug\" ];then\n"; 
  print FWP "    #Check And Restart GRE Tunnels\n";
  print FWP "    /sbin/ip tun ls |grep -E \"gtun[0-9]+:\" |awk -F: '{print \"/sbin/ip tun del \"\$1}' |sh > /dev/null 2>&1\n";
  print FWP "    /etc/rc.d/rc.tunnels\n";
  print FWP "    /usr/sbin/conntrack -F\n";
  print FWP "    /usr/sbin/conntrack -F expectation\n";
  print FWP "    /sbin/ip route flush cache\n";
  print FWP "  fi;\n\n";

  $lcnt=1;

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $intlocalip=@eidat[1];
  foreach $adslvl (@vadsllink) {
    @adslldat=split(/\|/,$adsllink{$adslvl});

    print FWP " elif [ \$6 == \"$adslvl\" ];then\n";

  print FWP "    LOCALIP=";
  print FWP $intlocalip . "\n";
  print FWP "    MARK=";
  print FWP $lcnt . "\n";
  print FWP "    PRIO=";
  print FWP $lcnt+30-1 . "\n";
  print FWP "    FILID=";
  print FWP $lcnt . "\n";
  print FWP "    RTABLE=";
  print FWP $lcnt+100-1 . "\n";
  print FWP "    OLIMIT=@adslldat[4]\n";
  print FWP "    OLIMITK=" . (@adslldat[4]/8)*1024 . "\n";
  print FWP "    OLIMIT50=" . @adslldat[4]*0.5 . "\n";
  print FWP "    OLIMIT30=" . @adslldat[4]*0.3 . "\n";
  print FWP "    OLIMIT20=" . @adslldat[4]*0.2 . "\n";
  print FWP "    ILIMIT=@adslldat[3]\n";
  print FWP "    ILIMITK=" . (@adslldat[3]/8)*1024 . "\n";
  print FWP "    ILIMIT50=" . @adslldat[3]*0.5 . "\n";
  print FWP "    ILIMIT30=" . @adslldat[3]*0.3 . "\n";
  print FWP "    ILIMIT20=" . @adslldat[3]*0.2 . "\n";
  print FWP "    ADSL_LINK=\$6\n";

  print FWP<<__EOS__;
  if [ ! -d /tmp/pppup ];then
    mkdir /tmp/pppup;
  fi;
  (echo "#\!/bin/bash";echo;echo "\$0 \$\@") > /tmp/pppup/\$1.ip-up
  chmod 700 /tmp/pppup/\$1.ip-up

  #Flush Applicable Chains
  /sbin/iptables -t mangle -F MANGLEP\${FILID}
  /sbin/iptables -t mangle -F MANGLEO\${FILID}
  /sbin/iptables -t mangle -F MANGLEF\${FILID}

  #Determine The Default Gateway
  DEF_GW=`/sbin/ip route show 0/0 table 90 |awk '{print \$5}'`
  DEF_ADDR=`/sbin/ip addr show \$DEF_GW |tail -1 |awk '{print \$2}'`

__EOS__
    @tosval=split(/,/,@adslldat[5]);
    print FWP "  #Set fwmark based on TOS value\n";
    foreach $tosmatch (@tosval) {
      if ($tosmatch ne "0") {
        print FWP "  /sbin/iptables -t mangle -A MANGLEO\${FILID} -j MARK -o \$DEF_GW -m tos --tos $tosmatch --set-mark \${MARK} ! -d \$EXT_IP_ADDR\n";
        print FWP "  /sbin/iptables -t mangle -A MANGLEF\${FILID} -j MARK -o \$DEF_GW -m tos --tos $tosmatch --set-mark \${MARK} ! -d \$EXT_IP_ADDR\n";
        print FWP "  /sbin/iptables -t mangle -A MANGLEP\${FILID} ! -i ppp+ -j MARK -m tos --tos $tosmatch -m mark --mark 0 --set-mark \${MARK} ! -d \$EXT_IP_ADDR\n";
      }
    }

    print FWP<<__EOS__;
  #Delete Existing Classes
  /sbin/tc qdisc del dev \$INT_NAME root > /dev/null 2>&1
  /sbin/tc qdisc del dev imq$lcnt root > /dev/null 2>&1

  #Apply ingress limit
  if [ ! -e /var/spool/apache/htdocs/mrtg/bw-imq$lcnt.rrd ];then
    /usr/bin/rrdtc $sysconf{'External'}
  fi;
  if [ "\${ILIMIT}" ];then
    rrdtool tune /var/spool/apache/htdocs/mrtg/bw-imq$lcnt.rrd -a high:\${ILIMITK} -a med:\${ILIMITK} -a low:\${ILIMITK} -i high:0 -i med:0 -i low:0
    /sbin/ip link set imq$lcnt up
    /sbin/tc qdisc add dev imq$lcnt root handle 1: htb default 20 r2q 1
    /sbin/tc class add dev imq$lcnt parent 1: classid 1:1 htb rate \${ILIMIT}Kbit
    /sbin/tc class add dev imq$lcnt parent 1:1 classid 1:10 htb rate \${ILIMIT50}Kbit ceil \${ILIMIT}Kbit
    /sbin/tc class add dev imq$lcnt parent 1:1 classid 1:20 htb rate \${ILIMIT30}Kbit ceil \${ILIMIT}Kbit
    /sbin/tc class add dev imq$lcnt parent 1:1 classid 1:30 htb rate \${ILIMIT20}Kbit ceil \${ILIMIT}Kbit
    /sbin/tc qdisc add dev imq$lcnt parent 1:10 handle 10: sfq perturb 10
    /sbin/tc qdisc add dev imq$lcnt parent 1:20 handle 20: sfq perturb 10
    /sbin/tc qdisc add dev imq$lcnt parent 1:30 handle 30: sfq perturb 10
    /sbin/tc filter add dev imq$lcnt parent 1: prio 0 protocol ip handle 0x101 fw flowid 1:10
    /sbin/tc filter add dev imq$lcnt parent 1: prio 1 protocol ip handle 0x102 fw flowid 1:20
    /sbin/tc filter add dev imq$lcnt parent 1: prio 2 protocol ip handle 0x103 fw flowid 1:30
  fi;

  #Apply egress limit
  if [ ! -e /var/spool/apache/htdocs/mrtg/bw-\${INT_NAME}.rrd ];then
    /usr/bin/rrdtc $sysconf{'External'}
  fi;

  if [ "\${OLIMIT}" ];then
    rrdtool tune /var/spool/apache/htdocs/mrtg/bw-\${INT_NAME}.rrd -a high:\${OLIMITK}*1024 -a med:\${OLIMITK}*1024 -a low:\${OLIMITK}*1024 -i high:0 -i med:0 -i low:0
    /sbin/tc qdisc add dev \$INT_NAME root handle 1: htb default 20 r2q 1
    /sbin/tc class add dev \$INT_NAME parent 1: classid 1:1 htb rate \${OLIMIT}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:10 htb rate \${OLIMIT50}Kbit ceil \${OLIMIT}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:20 htb rate \${OLIMIT30}Kbit ceil \${OLIMIT}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:30 htb rate \${OLIMIT20}Kbit ceil \${OLIMIT}Kbit
    /sbin/tc qdisc add dev \$INT_NAME parent 1:10 handle 10: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:20 handle 20: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:30 handle 30: sfq perturb 10
  fi;

  #Delete Any Source Routeing Rules And Recreate Them
  /sbin/ip rule |grep Mark_\${MARK} |awk '\$3 != "all" {print "/sbin/ip rule del from "\$3" iif lo table "\$7}' |sh
  /sbin/ip rule add from \$EXT_IP_ADDR iif lo table \${RTABLE} prio \$PRIO
  /sbin/ip route add \$DEST_IP src \$EXT_IP_ADDR dev \$INT_NAME scope link table \${RTABLE}

  #Setup the alternate route path
  /sbin/ip route del default table \${RTABLE}
  /sbin/ip route add default via \$5 dev \$INT_NAME src \$4 table \${RTABLE}

  #Flush Routing Tables
  /sbin/ip route flush cache

  #NAT All packets outputing the interface with its ip any state
  /sbin/iptables -t nat -I MANGLE -j SNAT -o \$INT_NAME --to-source \$EXT_IP_ADDR

  #Default Incoming/Outgoing Rules
  /sbin/iptables -I MANGLEIN -j VOIPIN -i \$INT_NAME -d \${LOCALIP} -p udp --sport 1024:65535
  /sbin/iptables -I MANGLEIN -j DEFIN -i \$INT_NAME -d \$EXT_IP_ADDR
#  /sbin/iptables -A MANGLEIN\${FILID} -j ACCEPT -i \$INT_NAME -m state --state RELATED,ESTABLISHED
#  /sbin/iptables -A MANGLEOUT\${FILID} -j ACCEPT -o \$INT_NAME -s \$EXT_IP_ADDR -m state --state NEW,RELATED,ESTABLISHED

  /sbin/iptables -I MANGLEOUT -j ACCEPT -m mark --mark \${MARK}
  /sbin/iptables -I MANGLEOUT -j ACCEPT -o \$INT_NAME -m mark --mark \${MARK}
  /sbin/iptables -I MANGLEOUT -j DEFOUT -o \$INT_NAME -s \$EXT_IP_ADDR
  /sbin/iptables -I MANGLEOUT -j VOIPOUT -o \$INT_NAME -s \${LOCALIP} -p udp --dport 1024:65535

  /sbin/iptables -I MANGLEFWD -j ACCEPT -o \$INT_NAME 

  #Allow Proxy Requests 
  /sbin/iptables -I MANGLEPROXY -j DEFPROXY -t nat -i \$INT_NAME -d \$EXT_IP_ADDR

  #Set Rules To Allow IAX/SIP Requests
#  /sbin/iptables -t nat -A SIPMAP -j DNAT \$INT_IN -p udp -s 0.0.0.0/0 -d \$EXT_IP --sport 1024:65535 --dport 5000 --to-destination $localip:5000
#  /sbin/iptables -t nat -A SIPMAP -j DNAT \$INT_IN -p udp -s 0.0.0.0/0 -d \$EXT_IP --sport 1024:65535 --dport 5060 --to-destination $localip
#  /sbin/iptables -t nat -A SIPMAP -j DNAT \$INT_IN -p tcp -s 0.0.0.0/0 -d \$EXT_IP --sport 1024:65535 --dport 5060:5061 --to-destination $localip
#  /sbin/iptables -t nat -A SIPMAP -j DNAT \$INT_IN -p udp -d \$EXT_IP --dport 10000:20000 -s 0/0 --sport 1024:65535 --to-destination $localip

  #Clear TOS Values on marked packets
#  /sbin/iptables -t mangle -A MANGLEO\${FILID} -j TOS -o \$DEF_GW -m tos ! --tos 0 --set-tos 0 -m mark ! --mark 0x0 ! -d \$EXT_IP_ADDR
  /sbin/iptables -t mangle -A MANGLEF\${FILID} -j TOS -o \$DEF_GW -m tos ! --tos 0 --set-tos 0 -m mark ! --mark 0x0 ! -d \$EXT_IP_ADDR
  /sbin/iptables -t mangle -A MANGLEP\${FILID} -j TOS ! -i ppp+ -m tos ! --tos 0 --set-tos 0 -m mark ! --mark 0x0 ! -d \$EXT_IP_ADDR

  (cat <<EOF
server $dnsconf{'DynServ'}
key $dnsconf{'DynZone'} $smartkey
zone $dnsconf{'DynZone'}
update delete \$6.$dnsconf{'DynZone'}. A
update add \$6.$dnsconf{'DynZone'}. 180 A \$EXT_IP_ADDR
send
EOF
)>/tmp/dnsup.\$6.ppp

  chmod 640 /tmp/dnsup.\$6.ppp
  echo \$1 > /tmp/ppp.\$6.int
  if [ "`/bin/pidof named`" ];then
    /usr/sbin/rndc reload &
    sleep 5
#   else
#    /usr/sbin/named
  fi;

__EOS__
  if ($dnsconf{'DynZone'} ne "") {
    print FWP "  /usr/bin/nsupdate /tmp/dnsup.\$6.ppp\n";
  }

  print FWP "  #Restart NMBD\n";
  print FWP "  while [ \"`/bin/pidof nmbd`\" ];do\n";
  print FWP "    killall -9 nmbd;\n";
  print FWP "    sleep 1;\n";
  print FWP "  done\n\n";
  print FWP "  /usr/sbin/nmbd -D;\n";
  
  print FWP "  #Run Local Mangle Script\n";
  print FWP "  if [ -x \"/etc/ppp/mangle/\$6\" ];then\n";
  print FWP "    /etc/ppp/mangle/\$6 \$EXT_IP_ADDR \$DEST_IP \$INT_NAME \$MARK\n";
  print FWP "  fi;\n\n";

  print FWP "  /usr/sbin/conntrack -F\n";
  print FWP "  /usr/sbin/conntrack -F expectation\n";
  print FWP "  /sbin/ip route flush cache\n";
  $lcnt++;
  }
  $radopt{'Egress50'}=$radopt{'Egress'}*0.5;
  $radopt{'Egress30'}=$radopt{'Egress'}*0.3;
  $radopt{'Egress20'}=$radopt{'Egress'}*0.2;

  if (index($sysconf{'Internal'},":") ne "-1") {
    $ethint=substr($sysconf{'Internal'},0,4);
  } else {
    $ethint=$sysconf{'Internal'};
  }
  @idata=split(/\|/,$interface{$ethint});
  $locallan=getnw(@idata[2],@idata[1]);

  @pppoeint=split(/\|/,$interface{$wirelessint});
  $pppoelan=getnw(@pppoeint[2],@pppoeint[1]);
  print FWP<<__EOS__;
 elif [ "\$6" == "pppoe" ];then
  #Delete Existing Classes
  /sbin/tc qdisc del dev \$INT_NAME root > /dev/null 2>&1
  /sbin/tc qdisc del dev \$INT_NAME handle ffff: ingress > /dev/null 2>&1

  if [ "$radopt{'Ingress'}" != "" ];then
    #Apply ingress limit
    /sbin/tc qdisc add dev \$INT_NAME handle ffff: ingress
    /sbin/tc filter add dev \$INT_NAME parent ffff: protocol ip u32 match ip dst $wirelessrange police rate 100Mbit burst 1500 drop flowid :60
    /sbin/tc filter add dev \$INT_NAME parent ffff: protocol ip u32 match ip dst $locallan/@idata[2] police rate 100Mbit burst 1500 drop flowid :70
    /sbin/tc filter add dev \$INT_NAME parent ffff: protocol ip u32 match ip dst 0/0 police rate $radopt{'Ingress'}Kbit burst 1500 drop flowid :80
  fi;

  if [ "$radopt{'Egress'}" != "" ];then
    #Apply egress limit
    /sbin/tc qdisc add dev \$INT_NAME root handle 1: htb default 20 r2q 1
    /sbin/tc class add dev \$INT_NAME parent 1: classid 1:1 htb rate 100Mbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:5 htb rate $radopt{'Egress'}Kbit ceil 100Mbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:10 htb rate $radopt{'Egress50'}Kbit ceil $radopt{'Egress'}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:20 htb rate $radopt{'Egress30'}Kbit ceil $radopt{'Egress'}Kbit
    /sbin/tc class add dev \$INT_NAME parent 1:1 classid 1:30 htb rate $radopt{'Egress20'}Kbit ceil $radopt{'Egress'}Kbit

    /sbin/tc qdisc add dev \$INT_NAME parent 1:5 handle 5: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:10 handle 10: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:20 handle 20: sfq perturb 10
    /sbin/tc qdisc add dev \$INT_NAME parent 1:30 handle 30: sfq perturb 10

#    /sbin/tc filter add dev \$INT_NAME parent 1: prio 0 protocol ip handle 0x101 fw flowid 1:10
#    /sbin/tc filter add dev \$INT_NAME parent 1: prio 1 protocol ip handle 0x102 fw flowid 1:20
#    /sbin/tc filter add dev \$INT_NAME parent 1: prio 2 protocol ip handle 0x103 fw flowid 1:30
  fi;

#  MAC_ADDR=`/usr/sbin/getmacfromip \$5`

  /sbin/ip route add  \${5}/32 dev \${1} src \${4} table Link
  /sbin/iptables -t nat -I NOPPPNAT -j ACCEPT -o \${1}
  /sbin/iptables -I PPPFWD -j ACCEPT -i \$INT_NAME -o @pppoeint[3] -d $pppoelan/@pppoeint[2] -s \$5/32
  /sbin/iptables -I PPPFWD -j ACCEPT -o \$INT_NAME -i @pppoeint[3] -s $pppoelan/@pppoeint[2] -d \$5/32
  /sbin/iptables -I PPPIN -j SYSIN -i \$INT_NAME -d @pppoeint[1]/32 -s \$5/32
  /sbin/iptables -I PPPOUT -j SYSOUT -o \$INT_NAME -s @pppoeint[1]/32 -d \$5/32
  /sbin/iptables -I PPPIN -j MCASTIN -i \$INT_NAME -d 224.0.0.0/3 -s \$5/32
  /sbin/iptables -I PPPOUT -j MCASTOUT -o \$INT_NAME -s 224.0.0.0/3 -d \$5/32
#  if [ "\$MAC_ADDR" ];then
#    /sbin/iptables -I PPPIN -j RETURN -I -s \$5 -m mac --mac-source \$MAC_ADDR
#  fi;
 elif [ "\$6" == "3g" ];then
  (cat <<EOF
server $dnsconf{'DynServ'}
key $dnsconf{'DynZone'} $smartkey
zone $dnsconf{'DynZone'}
update delete \$6.$dnsconf{'DynZone'}. A
update add \$6.$dnsconf{'DynZone'}. 180 A \$EXT_IP_ADDR
send
EOF
)>/tmp/dnsup.\$6.ppp

  chmod 640 /tmp/dnsup.\$6.ppp
  echo \$1 > /tmp/ppp.\$6.int
  /usr/bin/nsupdate /tmp/dnsup.\$6.ppp
  /sbin/ip route add 0/0 via \$DEST_IP dev \$INT_NAME table 95;
  /sbin/iptables -F 3GIN
  /sbin/iptables -F 3GOUT
  /sbin/iptables -t nat -F 3GNAT

  /sbin/iptables -A 3GIN -j ACCEPT -i \$INT_NAME
  /sbin/iptables -I 3GOUT -j ACCEPT -o \$INT_NAME
  /sbin/iptables -t nat -A 3GNAT -j SNAT -o \$INT_NAME --to-source \$EXT_IP_ADDR

  if [ "\$USEPEERDNS" == "1" ] && [ "\$DNS1" ];then
    if [ "\$DNS2" ];then
       FWD="\${DNS1};\${DNS2}";
     else
      FWD=\${DNS1}
    fi;
    echo "FWD=\\\"\${FWD}\\\";" > /etc/named.fwd
    sed -e "s/^#FWD/       forwarders \\{\$FWD;\\};/" /etc/named.conf.orig > /etc/named.conf
  fi;
 elif [ "\${6:0:4}"  == \"l2tp\" ];then
  /sbin/ip route add  \${5}/32 dev \${1} src \${4} table Link
  /sbin/iptables -t nat -I NOPPPNAT -j ACCEPT -o \${1}
  /sbin/iptables -I PPPIN -j SYSIN -i \${1} -d @idata[1] -s \${5}/32
  /sbin/iptables -I PPPOUT -j SYSOUT -o \${1} -s @idata[1] -d \${5}/32
  /sbin/iptables -I PPPFWD -j ACCEPT -i \${1} -o @idata[3]
  /sbin/iptables -I PPPFWD -j ACCEPT -o \${1} -i @idata[3] 
  /sbin/iptables -I PPPIN -j MCASTIN -i \${1} -d 224.0.0.0/3 -s \$5/32
  /sbin/iptables -I PPPOUT -j MCASTOUT -o \${1} -s 224.0.0.0/3 -d \$5/32
  /sbin/iptables -I PPPOUT -j MCASTOUT -o \${1} -s \${4} -d 224.0.0.0/3
 elif [ "\$6" != "other" ];then
  /usr/sbin/radipup \$6 \$5
__EOS__

  print FWP "fi;\n";

  print FWD "#!/bin/bash\n\n";
  print FWD "INT_NAME=\"\$1\"\n";

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $intlocalip=@eidat[1];

  print FWD "LOCALIP=\"$intlocalip\"\n\n";

  print FWD "/usr/bin/awk -F\\| -v LINK=\$1 '\$6 == LINK {printf \"spddelete %s %s any -P out;\\nspddelete %s %s any -P in;\\n\",\$2,\$3,\$3,\$2}'  /etc/vpnconf |/usr/sbin/setkey -c\n\n";

  $lcnt=0;
  foreach $adslvl (@vadsllink) {
    @adslldat=split(/\|/,$adsllink{$adslvl});
    if ($lcnt eq "0") {
      print FWD "if [ \"\$6\" == \"$adslvl\" ];then\n";
    } else {
      print FWD " elif [ \"\$6\" == \"$adslvl\" ];then\n";
    }
    print FWD "  MARK=";
    print FWD $lcnt+1 . "\n";
    print FWD "  FILID=";
    print FWD $lcnt+1 . "\n";
    print FWD "  RTABLE=";
    print FWD $lcnt+100 . "\n";

    print FWD<<__EOS__;

  if [ ! -e /tmp/pppup/\$1.ip-up ];then
    rm /tmp/pppup/\$1.ip-up
  fi;

  #Flush Applicable Chains
  /sbin/iptables -t mangle -F MANGLEP\${FILID}
  /sbin/iptables -t mangle -F MANGLEO\${FILID}
  /sbin/iptables -t mangle -F MANGLEF\${FILID}

  #Delete Existing Classes
  /sbin/tc qdisc del dev \$1 root > /dev/null 2>&1
  /sbin/tc qdisc del dev imq\${MARK} root > /dev/null 2>&1

  #Delete the alternate route path
  /sbin/ip route del default table \${RTABLE}
  /sbin/ip rule |grep \${RTABLE} |awk '\$3 != "all" {print "/sbin/ip rule del from "\$3" iif lo table "\$7}' |sh
  /sbin/ip route flush cache

  /sbin/iptables -D MANGLEIN -j DEFIN -i \$INT_NAME -d \${4}
  /sbin/iptables -D MANGLEIN -j VOIPIN -i \$INT_NAME -d \${LOCALIP} -p udp --sport 1024:65535
  /sbin/iptables -D MANGLEOUT -j DEFOUT -o \$INT_NAME -s \${4}
  /sbin/iptables -D MANGLEOUT -j ACCEPT -o \$INT_NAME -m mark --mark \${MARK}
  /sbin/iptables -D MANGLEOUT -j ACCEPT -m mark --mark \${MARK}
  /sbin/iptables -D MANGLEOUT -j VOIPOUT -o \$INT_NAME -s \${LOCALIP} -p udp --dport 1024:65535
  /sbin/iptables -D MANGLEFWD -j ACCEPT -o \$INT_NAME 
  /sbin/iptables -t nat -D MANGLEPROXY -j DEFPROXY -t nat -i \$INT_NAME -d \${4}
  /sbin/iptables -t nat -D MANGLE -j SNAT -o \$INT_NAME --to-source \$4

  (cat <<EOF
server $dnsconf{'DynServ'}
key $dnsconf{'DynZone'} $smartkey
zone $dnsconf{'DynZone'}
update delete \$6.$dnsconf{'DynZone'}. A
send
EOF
)>/tmp/dnsup.\$6.ppp

  chmod 640 /tmp/dnsup.\$6.ppp
  echo \$1 > /tmp/ppp.\$6.int

__EOS__
    if ($dnsconf{'DynZone'} ne "") {
      print FWD "  /usr/bin/nsupdate /tmp/dnsup.\$6.ppp\n";
    }
    $lcnt++;
  }

  if ($lcnt eq "0") {
    print FWD "if [ \"\$6\"  == \"pppoe\" ];then\n";
  } else {
    print FWD " elif [ \"\$6\"  == \"pppoe\" ];then\n";
  }

  @pppoeint=split(/\|/,$interface{$wirelessint});
  $pppoelan=getnw(@pppoeint[2],@pppoeint[1]);

  print FWD <<__EOF__;
  /sbin/iptables -t nat -D NOPPPNAT -j ACCEPT -o \${1}
  /sbin/iptables -D PPPFWD -j ACCEPT -i \$INT_NAME -o @pppoeint[3] -d $pppoelan/@pppoeint[2] -s \$5/32
  /sbin/iptables -D PPPFWD -j ACCEPT -o \$INT_NAME -i @pppoeint[3] -s $pppoelan/@pppoeint[2] -d \$5/32
  /sbin/iptables -D PPPIN -j SYSIN -i \$INT_NAME -d @pppoeint[1]/32 -s \$5/32
  /sbin/iptables -D PPPIN -j MCASTIN -i \$INT_NAME -d 224.0.0.0/3 -s \$5/32
  /sbin/iptables -D PPPOUT -j SYSOUT -o \$INT_NAME -s @pppoeint[1]/32 -d \$5/32
  /sbin/iptables -D PPPOUT -j MCASTOUT -o \$INT_NAME -s 224.0.0.0/3 -d \$5/32
 elif [ "\$6"  == \"3g\" ];then
  /sbin/iptables -F 3GIN
  /sbin/iptables -F 3GOUT
  /sbin/iptables -t nat -F 3GNAT
 elif [ "\${6:0:4}"  == "l2tp" ];then
  /sbin/iptables -t nat -D NOPPPNAT -j ACCEPT -o \${1}
  /sbin/iptables -D PPPIN -j SYSIN -i \${1} -d @idata[1] -s \${5}/32
  /sbin/iptables -D PPPOUT -j SYSOUT -o \${1} -s @idata[1] -d \${5}/32
  /sbin/iptables -D PPPFWD -j ACCEPT -i \${1} -o @idata[3]
  /sbin/iptables -D PPPFWD -j ACCEPT -o \${1} -i @idata[3]
  /sbin/iptables -D PPPIN -j MCASTIN -i \${1} -d 224.0.0.0/3 -s \$5/32
  /sbin/iptables -D PPPOUT -j MCASTOUT -o \${1} -s 224.0.0.0/3 -d \$5/32
  /sbin/iptables -D PPPOUT -j MCASTOUT -o \${1} -s \${4} -d 224.0.0.0/3
 elif [ "\$6"  != \"other\" ] && [ "\$6" ];then
  /usr/sbin/radipdown \$6 \$5
fi;
__EOF__
#  MAC_ADDR=`/sbin/iptables -vnL PPPIN |grep \$5 |awk '\$12 == "MAC" {printf "%s\\n",\$13}'`
#  if [ "\$MAC_ADDR" ];then
#    /sbin/iptables -D PPPIN -j RETURN -s \$5 -m mac --mac-source \$MAC_ADDR
#  fi;

  print FW "if [ \"\$1\" == \"startup\" ];then\n";
  print FW "  /etc/rc.d/rc.firewall2 startup\n";
  print FW "  if [ -e /tmp/pppup/ext.ip-up ];then\n";
  print FW "    for link in /tmp/pppup/ext.ip-up /tmp/pppup/ppp*.ip-up ;do\n";
  print FW "      if [ -x \$link ];then\n";
  print FW "        \$link\n";
  print FW "      fi;\n";
  print FW "    done;\n";
  print FW "  fi;\n";
  print FW "fi;\n\n";

  print FW "if [ -x /etc/firewall.local ];then\n";
  print FW "  /etc/firewall.local\n";
  print FW "fi;\n";

  close(FW);
  close(FWP);
  close(FWD);
  close(IF);
}

sub printpppopt(){
  open(PO,">options");

  $intint=$sysconf{'Internal'};
  @iipdat=split(/\|/,$interface{$intint});


  print PO "multilink\n";
  if (($mdmconf{'Connection'} eq "ADSL") && ($sysconf{'External'} eq "Dialup")) {
    print PO "endpoint MAC:" . $mdmconf{'ComPort'} . "\n";
  } else {
    print PO "endpoint MAC:$wirelessint\n";
  }

  print PO "mrru $mdmconf{'MTU'}\n";
  print PO "mru $mdmconf{'MTU'}\n";
  print PO "mtu $mdmconf{'MTU'}\n";

  if (! $mdmconf{'BSD'}) {
    print PO "nobsdcomp\n";
  }

  if (! $mdmconf{'Deflate'}) {
    print PO "nodeflate\n";
  }

  if ($mdmconf{'Maxfail'} ne "") {
    print PO "maxfail $mdmconf{'Maxfail'}\n";
  } else {
    print PO "maxfail 0\n";
  }

  print PO<<__EOB__;
noipdefault
holdoff $mdmconf{'Holdoff'}
lcp-echo-interval 20
lcp-echo-failure 2
lcp-max-configure 3
lcp-max-failure 3
__EOB__


  print PO "ms-dns @iipdat[1]\n";
  if (($sysconf{'PrimaryDns'} ne "") && ($sysconf{'PrimaryDns'} ne @iipdat[1])){
    print PO "ms-dns $sysconf{'PrimaryDns'}\n";
  }

#  if ($sysconf{'SecondaryDns'} ne "") {
#    print PO "ms-dns $sysconf{'SecondaryDns'}\n";
#  }
	
  if (($sysconf{'PrimaryWins'} eq "") || ($sysconf{'PrimaryWins'} eq @iipdat[1])){
    print PO "ms-wins @iipdat[1]\n";
  } else {
    print PO "ms-wins $sysconf{'PrimaryWins'}\n";
  }
  if ($sysconf{'SecondaryWins'} ne "") {
    print PO "ms-wins $sysconf{'SecondaryWins'}\n";
  }

  if (($mdmconf{'Connection'} eq "Dialup") && ($sysconf{'External'} eq "Dialup")){
print PO<<__EOB__;
active-filter "tcp port 22 or tcp port 995 or tcp port 993 or tcp port 143 
 or tcp 
port 443 or tcp port 666 or tcp port 110 or tcp port 25 or tcp port 80 or 
udp port 53"
__EOB__
#active-filter "not udp and not icmp and not ospf and not raw and not esp and not ah and 
#not gre and not idp and not pup and tcp port 22 and tcp port 80 and tcp port 25 and tcp 
#port 110 and tcp port 143 and tcp port 993 and tcp port 995 and dns port 53 and tcp 
#port 443 and not tcp"
#"inbound and not icmp and not udp and not icmp[0] != 8 and not tcp[13] & 4 != 0 and not tcp port 135 and 
#not tcp port 137 and not tcp port 138 and not tcp port 139 and not tcp port 445 and not port 5353"
    if ($mdmconf{'ComPort'} ne "CAPI") {
      print PO "connect \"/usr/sbin/chat -v -f /etc/ppp/diald.scr\"\n";
    } else {
      print PO "connect \"\"\n";
    }
    if ($mdmconf{'ConnectDelay'} ne "") {
      print PO "connect-delay $mdmconf{'ConnectDelay'}\n";
    }
  } elsif (($mdmconf{'Connection'} eq "Leased") && ($sysconf{'External'} eq "Dialup")){
print PO<<__EOB__;
$mdmconf{'FlowControl'}
persist
__EOB__
  }
  close(PO);
}

sub printdiald(){
  open(PS,">diald.scr");
  open(PS3G,">diald.3g");
  print PS3G <<__EOF__;
ABORT 'NO CARRIER'
ABORT 'NO DIALTONE'
ABORT 'BUSY'
ABORT 'ERROR'
'' ATZ
OK AT+CGDCONT=1,"IP","internet"
OK ATD*99#
CONNECT
__EOF__
  close(PS3G);

  if (($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW")) {
    if ($mdmconf{'Connection'} eq "3GIPW") {
      $mdmconf{'APN'}="AT+CGDCONT=1,\"PPP\",\"";
    } else {
      $mdmconf{'APN'}="AT+CGDCONT=1,\"IP\",\"";
    }
    if ($mdmconf{'Number'} eq "") {
      $mdmconf{'APN'}.="internet" . "\"";
    } else {
      $mdmconf{'APN'}.=$mdmconf{'Number'} . "\"";
    }
    if (($mdmconf{'Password'} ne "") && ($mdmconf{'Username'} ne "") && ($mdmconf{'Connection'} eq "3GIPW")) {
      $mdmconf{'APN'}.=",\"" . $mdmconf{'Username'} . "," . $mdmconf{'Password'} . "\",0,0";
    }
    if ($mdmconf{'Init2'} ne "") {
      $mdmconf{'Init2'}=$mdmconf{'Init2'} . "\nOK " . $mdmconf{'APN'};
    } else {
      $mdmconf{'Init2'}=$mdmconf{'APN'};
    }
    $mdmconf{'Number'}= "*99#";
    $mdmconf{'DialString'}="ATD";
  }

  if ($mdmconf{'NoCarrier'}) {
    print PS "ABORT 'NO CARRIER'\n";
  }
  if ($mdmconf{'NoDialtone'}) {
    print PS "ABORT 'NO DIALTONE'\n";
  }
  if ($mdmconf{'Error'}) {
    print PS "ABORT 'BUSY'\n";
  }
  if ($mdmconf{'Busy'}) {
    print PS "ABORT 'ERROR'\n";
  }

  if ($mdmconf{'Init1'} == "") {
    $mdmconf{'Init1'}="ATZ";
  }

  print PS<<__EOB__;
'' $mdmconf{'Init1'}
__EOB__

  if ($mdmconf{'Init2'} ne "") {
    print PS "OK " . $mdmconf{'Init2'} . "\n";
  }


#  if ($mdmconf{'Connection'} eq "3GIPW") {
#    print PS<<__EOB__;
#OK AT+CGMM?
#OK AT+CGMR?
#OK AT+CGSN?
#OK AT+COPS?
#OK AT+CSQ
#OK AT+CGATT?
#__EOB__
#    }

  if ($mdmconf{'DialString'} == "") {
    $mdmconf{'DialString'}="ATD";
  }
  print PS<<__EOB__;
OK $mdmconf{'DialString'}$mdmconf{'Number'}
CONNECT
__EOB__
  close(PS);
}

sub printpppport() {
  open(PP,">poptions");
  if (($sysconf{'External'} eq "Dialup") || ($sysconfig{'Type'} ne "full")){
    if (($mdmconf{'Connection'} ne "ADSL") && ($mdmconf{'Connection'} ne "3GIPW") && ($mdmconf{'Connection'} ne "3G") && (index($mdmconf{'ComPort'},"Isdn") eq -1)){
      print PP "$mdmconf{'Speed'}\n";
    }
    print PP<<__EOB__;
$mdmconf{'Address'}:$mdmconf{'Gateway'}
__EOB__
  } else {
    print PP "#PPP Not Required On This System\n";
  }

  close(PP);
}

sub printpppsecret() {
  open(PS,">secret");
  if ((@vadsllink > 0) || ($sysconf{'External'} eq "Dialup") || ($mdmconf{'Connection'} eq "ADSL") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW") || ($sysconfig{'Type'} ne "full")){
    $mdmuser=$mdmconf{'Username'};
    printf PS ("%-50s*     %s\n",$mdmuser,$mdmconf{'Password'});
    $unused{$mdmuser}="used";
    foreach $alink (@vadsllink) {
      @ldata=split(/\|/,$adsllink{$alink});
      if ($unused{@ldata[1]} ne "used") {
        printf PS ("%-50s*     %s\n",@ldata[1],@ldata[2]);
        $unused{@ldata[1]}="used";
      }
    }

    foreach $uname (@adslacc) {
      @accdat=split(/\|/,$adsluser{$uname});
      if ($unused{@accdat[0]} ne "used") {
        printf PS ("%-50s*     %s\n",@accdat[0],@accdat[1]);
        $unused{@accdat[0]}="used";
      }
    }
  } else {
    print PS "#PPP Not Required On This System\n";
  }
  close(PS);
}

sub printlists() {
  open(FL,">local_allow_urls");
  chmod(0600,"local_allow_urls");
  foreach $url (@ulallow) {
    print FL "$url\n";
  }
  close(FL);

  open(FL,">local_allow_domains");
  chmod(0600,"local_allow_domains");
  foreach $url (@dlallow) {
    print FL "$url\n";
  }
  close(FL);

  open(FL,">local_allow_exp");
  chmod(0600,"local_allow_exp");
  $expal=join("\|",@elallow);
  print FL "(^\|[.-\\.\\?&+=/_]|\\w)($expal)(\\w|[.-\\.\\?&+=/_]\|\$)\n";
#  print FL "(^\|[.-\\.\\?&+=/_])($expal)([.-\\.\\?&+=/_])\|\$)\n";
  close(FL);

  open(FL,">local_deny_urls");
  chmod(0600,"local_deny_urls");
  foreach $url (@uldeny) {
    print FL "$url\n";
  }
  close(FL);

  open(FL,">local_deny_domains");
  chmod(0600,"local_deny_domains");
  foreach $url (@dldeny) {
    print FL "$url\n";
  }
  close(FL);

  open(FL,">local_deny_exp");
  chmod(0600,"local_deny_exp");
  $expal=join("\|",@eldeny);
  print FL "(^\|[.-\\.\\?&+=/_]|\\w)($expal)(\\w|[.-\\.\\?&+=/_]\|\$)\n";
#  print FL "(^\|[.-\\.\\?&+=/_])($expal)([.-\\.\\?&+=/_])\|\$)\n";
  close(FL);
}

sub printfconf() {
  open(SFC,">filter.conf");
  open(SFSC,">filter.cnf");
  chmod(0600,"filter.conf");
  chmod(0600,"filter.cnf");
#  print SFC "logdir /var/log/squid\n";
#  print SFC "dbhome /etc/squid\n\n";
  print SFC "dest local_allow {\n";

#  print SFSC "logdir /var/log/squid\n";
#  print SFSC "dbhome /etc/squid\n\n";
  print SFSC "dest local_allow {\n";

  if (@ulallow[0] ne "") {
    print SFC "  urllist local_allow_urls\n";
    print SFSC "  urllist local_allow_urls\n";
  }
  if (@elallow[0] ne "") {
    print SFC "  expressionlist local_allow_exp\n";
  }
  if (@dlallow[0] ne "") {
    print SFC "  domainlist local_allow_domains\n";
    print SFSC "  domainlist local_allow_domains\n";
  }
  print SFC "}\n\n";
  print SFSC "}\n\n";

  print SFC "dest local_deny {\n";
  print SFSC "dest local_deny {\n";
  if (@uldeny[0] ne "") {
    print SFC "  urllist local_deny_urls\n";
    print SFSC "  urllist local_deny_urls\n";
  }
  if (@eldeny[0] ne "") {
    print SFC "  expressionlist local_deny_exp\n";
  }
  if (@dldeny[0] ne "") {
    print SFC "  domainlist local_deny_domains\n";
    print SFSC "  domainlist local_deny_domains\n";
  }
  print SFC "}\n\n";
  print SFSC "}\n\n";

  foreach $sfilter (@flists) {
    print SFC "dest $sfilter {\n";
    if ( -e "/var/db/squid/blacklists/$sfilter/domains") {
      print SFC "  domainlist blacklists/$sfilter/domains\n";
    }
    if ( -e "/var/db/squid/blacklists/$sfilter/urls") {
      print SFC "  urllist blacklists/$sfilter/urls\n";
    }
    if ( -e "/var/db/squid/blacklists/$sfilter/expressions") {
      print SFC "  expressionlist blacklists/$sfilter/expressions\n";
    }
    print SFC "}\n\n";
  }

  foreach $timezone (@timegroup) {
    print SFC "time $timezone {\n";
    chop $cachetg{$timezone};
    @tspec=split(/;/,$cachetg{$timezone});
    foreach $spec (@tspec) {
      @ts=split(/\|/,$spec);
      shift(@ts);
      $cnt=2;
        print SFC "  weekly ";
      while(@ts[$cnt] ne "") {
        print SFC "@ts[$cnt] ";
        $cnt++;
      }
      print SFC "@ts[0]-@ts[1]\n";
    }
    print SFC "}\n\n";
  }

#  if ( -e "/var/db/squid/norestrict") {
#    print SFC "src Unrestricted {\n";
#    print SFC "  userlist norestrict\n";
#    print SFC "}\n\n";
#  }

  foreach $source (@sourcegroup) {
    print SFC "src $source {\n";
    chop $cachesg{$source};
    @sspec=split(/;/,$cachesg{$source});
    foreach $srcnw (@sspec) {
      @sn=split(/\|/,$srcnw);
      shift(@sn);
      print SFC "  ip @sn[0]/@sn[1]\n";
    }
    print SFC "}\n\n";
  }

  print SFC "acl {\n";
  print SFSC "acl {\n";
#  if ( -e "/var/db/squid/norestrict") {
#    print SFC "  Unrestricted {\n";
#    print SFC "    pass all\n";
#    print SFC "  }\n";
#  }
  foreach $acl (@sgacl) {
    ($source,$time,$intime)=split(/,/,$acl);
    if ($intime eq "true") {
      $intime="within";
    } else {
      $intime="outside";
    }
    print SFC "  $source $intime $time {\n";
    chop $cacheacl{$acl};
    print SFC "    pass $cacheacl{$acl}$acldef{$acl}\n";
    print SFC "  }\n";
  }
  if (index($proxyconf{'Redirect'},"http") eq "-1") {
    if ($dnsconf{'Hostname'} eq "") {
      $hname=$dnsconf{'Domain'};
    } else {
      $hname="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
    }
    $proxyconf{'Redirect'}="http://$hname/$proxyconf{'Redirect'}";
  }
  print SFC "  default {\n";
  print SFC "    pass all\n";
  print SFC "    redirect $proxyconf{'Redirect'}\n";
  print SFC "  }\n";
  print SFC "}\n";

  print SFSC "  default {\n";
  print SFSC "    pass all\n";
  print SFSC "  }\n";
  print SFSC "}\n";

  close(SFC);
  close(SFSC);
}

sub printsquid() {
  open(SC,">squid.conf");
  chmod(0600,"squid.conf");
  open(FC,">frox.conf");
  chmod(0600,"frox.conf");

  open(FCC,">freshclam.conf");
  chmod(0600,"freshclam.conf");

  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'} 
  }

print FCC<<__EOB__;
DatabaseMirror database.clamav.net
MaxAttempts 3
Checks 12
HTTPProxyServer $fqdn
HTTPProxyPort 3128
__EOB__
close(FCC);


print FC<<__EOB__;
Port 2121
ResolvLoadHack wontresolve.doesntexist.abc
LogFile /var/log/frox
WorkingDir /var/spool/frox
PidFile /var/run/frox.pid
BounceDefend yes
MaxForks 10
MaxForksPerHost 4
CacheModule http
HTTPProxy 127.0.0.1:3128
MinCacheSize 4096
User nobody
Group nogroup
CacheOnFQDN yes
StrictCaching yes
__EOB__

  $iiface=$sysconf{'Internal'};
  @intip=split(/\|/,$interface{$iiface});
  $localip=@intip[1];
  $eiface=$sysconf{'External'};
  if ($eiface eq "Dialup") {
    $internetip="0.0.0.0";
  }

  if ($dnsconf{'Hostname'} eq "") {
    $hname=$dnsconf{'Domain'};
  } else {
    $hname="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  }


if ((@paccess[0] eq "") && (@pdeny[0] eq "")) {
  $defacl=true;
}
print SC "http_port 3128\n";
print SC "http_port 8080 vhost\n";
print SC "http_port 3129 transparent\n";

foreach $sslweb (@sslserver) {
  @ssldata=split(/\|/,$sslsitedata{$sslweb});
  print SC "https_port @ssldata[6]:443 cert=/etc/openssl/certs/@ssldata[0].pem key=/etc/openssl/private/@ssldata[0].pem\n";
}

open(LSC,"/etc/squid.conf.local");
while(<LSC>) {
  print SC $_;
}
close(LSC);

foreach $iface (@ints) {
  @ipdat=split(/\|/,$interface{$iface});
  $ifsnm=getsn(@ipdat[2]);
  $ifnw=getnw(@ipdat[2],@ipdat[1]);

  if (@ipdat[1] ne "0.0.0.0") {
    push(@wwwhosted,@ipdat[1]);
  }

  if ($ifnw ne "0.0.0.0") {
    push(@plocal,"$ifnw/$ifsnm");
  }
  if (index(@ipdat[3],":") eq -1){
    if (($iface ne $sysconf{'Internal'}) && (@ipdat[1] != "0.0.0.0"))  {
      print SC "http_port @ipdat[1]:80 transparent\n";
    }
    if (($iface ne $sysconf{'External'}) &&  (@ipdat[1] != "0.0.0.0")) {
      if (($defacl) && (index($iface,":") eq -1)){
        push(@paccess,"$ifnw/$ifsnm");
      }
    }
  }
}

foreach $wnode (@wans) {
  @ipdat=split(/\|/,$routes{$wnode});
  $ifsnm=getsn(@ipdat[2]);
  $ifnw=getnw(@ipdat[2],@ipdat[1]);
  push(@plocal,"$ifnw/$ifsnm");
  if ($defacl) {
    push(@paccess,"$ifnw/$ifsnm");
  }
}

if ($proxyconf{'CacheSize'} < 8) {
  if ($proxyconf{'CacheSize'} eq "") {
    $proxyconf{'CacheSize'}=8;
  }
  $cmem="$proxyconf{'CacheSize'} MB";
  $squidsld=16;
} else {
  $squidsld=256;
  $cmem="8 MB";
}

if ($proxyconf{'LogFQDN'} eq "true") {
  $squidfqdnlog="on";
} else {
  $squidfqdnlog="off";
}

if ( -d "/usr/share/squid/errors/en") {
  $squiderrdir="/usr/share/squid/errors/en";
} elsif ( -d "/usr/share/squid/errors/English") {
  $squiderrdir="/usr/share/squid/errors/English";
} else {
  $squiderrdir="/etc/squid/errors"
}

print SC<<__EOB__;
tcp_outgoing_address 0.0.0.0
hosts_file /etc/hosts
cache_swap_low  80
cache_swap_high 90
maximum_object_size 4096 KB
minimum_object_size 0 KB
acl snmppublic snmp_community public
snmp_port 3401
ipcache_size 4096
ipcache_low  90
ipcache_high 95
fqdncache_size 4096
cache_mem $cmem
cache_log /var/log/squid/cache.log
cache_dir ufs /var/spool/squid $proxyconf{'CacheSize'} 16 $squidsld
cache_access_log /var/log/squid/access.log
cache_store_log none
emulate_httpd_log off
mime_table /etc/squid/mime.conf
log_mime_hdrs off
pid_filename /var/run/squid.pid
error_directory $squiderrdir
debug_options ALL,1
log_fqdn $squidfqdnlog
client_netmask 255.255.255.255
ftp_user root\@$dnsconf{'Domain'}
ftp_list_width 32
ftp_passive on
append_domain .$dnsconf{'Domain'}
unlinkd_program /usr/libexec/squid/unlinkd
request_header_max_size 10 KB
refresh_pattern         ^ftp:           1440    20%     10080
refresh_pattern         ^gopher:        1440    0%      1440
refresh_pattern         ^http:          0	0%      10
refresh_pattern         .               0       20%     4320
negative_ttl 2 minutes
positive_dns_ttl 6 hours
negative_dns_ttl 5 minutes
connect_timeout 120 seconds
peer_connect_timeout 30 seconds
read_timeout 15 minutes
request_timeout 30 seconds
client_lifetime 1 day
half_closed_clients on
pconn_timeout 120 seconds
shutdown_lifetime 30 seconds
auth_param basic realm Access To Internet
auth_param basic program /usr/libexec/pam_auth
authenticate_ip_ttl 300 second
auth_param basic children 10
external_acl_type unix_group %LOGIN /usr/libexec/squid_unix_group -p
acl duplicate max_user_ip -s 1
__EOB__
foreach $pden (@pdeny) {
  print SC "acl squiddeny src $pden\n";
  print FC "ACL Deny @pden - *\n";
}


print SC "acl squidaccess src 127.0.0.1/32\n";
print FC "ACL Allow 127.0.0.1/255.255.255.255 - *\n";

foreach $pacc (@paccess) {
  print SC "acl squidaccess src $pacc\n";
  print FC "ACL Allow $pacc - *\n";
}
foreach $rlink (@radlink) {
  @lidata=split(/\|/,$rlink);
  print SC "acl squidaccess src @lidata[1]/32\n";
  print FC "ACL Allow @lidata[1]/255.255.255.255 - *\n";
}
foreach $iface (@ints) {
  @lidata=split(/\|/,$interface{$iface});
  if ((@lidata[1] ne "") && (@lidata[1] ne "0.0.0.0")) {
    print SC "acl squidaccess src @lidata[1]/32\n";
    print FC "ACL Allow @lidata[1]/255.255.255.255 - *\n";
  }
}
if ($wirelessrange ne "") {
  @wrdat=split(/\//,$wirelessrange);
  print SC "acl squidaccess src @wrdat[0]/@wrdat[1]\n";
  @wrdat[1]=getsn(@wrdat[1]);
  print FC "ACL Allow @wrdat[0]/@wrdat[1] - *\n";
}

if ($sysconf{'L2TPNet'} ne "") {
  @ipdat=split(/\//,$sysconf{'L2TPNet'});
  $ifnw=getnw(@ipdat[1],@ipdat[0]);
  print SC "acl squidaccess src $ifnw/@ipdat[1]\n";
  @ipdat[1]=getsn(@ipdat[1]);
  print FC "ACL Allow $ifnw/@wrdat[1] - *\n";
}



foreach $siteaddr (@wwwhosted) {
  print SC "acl local_sites dst $siteaddr/32\n";
}

print SC "acl local_sites dst 127.0.0.1/32\n";

$rdircnt=0;
foreach $redirsite (@rewww) {
  print SC "acl redirect dst $rewip{$redirsite}/32\n";
  $rdircnt++;
}

foreach $pacc (@plocal) {
 print SC "acl squidnoparent dst $pacc\n";
}

foreach $netip (@pbypass) {
 print SC "acl squidbypass dst $netip\n";
}

print SC<<__EOB__;
acl authenticate proxy_auth REQUIRED
acl all src all
acl manager proto cache_object
acl localhost src 127.0.0.1/32
acl SSL_ports port 443 563 666 990 5222 1863
acl Safe_ports port 80 21 990 443 563 70 210 3128 3129 8080 5222 1863
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http
acl Safe_ports port 666         # network sentry admin
#Redirected Ports
acl CONNECT method CONNECT
acl norewrite external unix_group fullwebaccess
http_access allow manager localhost
http_access deny manager
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
__EOB__

print SC "http_access allow squidaccess\n";

if (@pbypass[0] ne "") {
  print SC "always_direct allow squidbypass\n";
#  print SC "http_access deny squidbypass\n";
}

#<%print "$squiddenyrule"%>
if (@pdeny[0] ne "")
  {
    print SC "http_access deny squiddeny\n";
  }
if ($rdircnt > 0) {
  print SC "http_access allow redirect\n";
}
print SC<<__EOB__;
http_access allow local_sites
http_access deny duplicate
http_access allow authenticate
http_access deny all
http_access allow all
icp_access allow all
miss_access allow all
snmp_access allow snmppublic all
url_rewrite_program /usr/bin/squidGuard -c /etc/squid/filter.conf
__EOB__
if ($proxyconf{'Redir'} ne "") {
  print SC "url_rewrite_children $proxyconf{'Redir'}\n";
} else {
  print SC "url_rewrite_children 5\n";
}
print SC<<__EOB__;
url_rewrite_access allow squidaccess
url_rewrite_access allow !norewrite
url_rewrite_access deny all
cache_mgr webmaster
cache_effective_user nobody
cache_effective_group nogroup
visible_hostname $hname
#httpd_accel_host virtual
#httpd_accel_port 80
#httpd_accel_with_proxy on
#httpd_accel_uses_host_header on
logfile_rotate 10
forwarded_for off
log_icp_queries on
icp_hit_stale off
always_direct allow squidnoparent
always_direct allow local_sites
__EOB__
  if ($proxyconf{'Parent'}) {
    ($spip,$spport)=split(/:/,$proxyconf{'Parent'});
    if ($spport ne "") {
      print SC "cache_peer $spip parent $spport 0 no-query\n";
      print SC "icp_query_timeout 2000\n";
      print SC "maximum_icp_query_timeout 8000\n";
      print SC "dead_peer_timeout 0\n";
    }
  }
  close(SC);
  close(FC);
}

sub printpop3() {
  open(FC,">fetchmailrc");
  chmod(0600,"fetchmailrc");
  foreach $mdrop (@emailmdrop) {
    @mdata=split(/\|/,$mdrop);
    if ((@mdata[5] eq "true") || (@mdata[5] eq "false")) {
      @mdata[7]=@mdata[6];
      @mdata[6]=@mdata[5];
      @mdata[5]="";
    }
    if ((@mdata[5] ne "-") && (@mdata[5] ne "")){
      @mdata[5]=" envelope @mdata[5]";
    } else {
      @mdata[5]="";
    }

    if ($dnsconf{'Hostname'}) {
      $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
    } else {
      $fqdn=$dnsconf{'Domain'}
    }

    if (@mdata[8] ne "") {
      $mdopt=" smtphost @mdata[8],"
    } else {
      $mdopt=" smtphost $fqdn,";
    }

    if (@mdata[6] eq "true") {
      $mdopt.=" options ssl,";
    }

    if (@mdata[7] eq "true") {
      $proto="imap";
    } elsif (@mdata[7] eq "false") {
      $proto="pop3";
    } else {
      $proto=@mdata[7];
    }
    print FC <<__EOB__;
set no bouncemail;
set postmaster root\@$dnsconf{'Domain'};
__EOB__

    if ((@mdata[4] eq "") || (@mdata[4] eq "true")) {
      @mdata[3]=join(" ",split(/,/,@mdata[3]));
      if ($proto eq "etrn") {
        print FC<<__EOB__;
poll @mdata[0] proto $proto no dns fetchdomains @mdata[3]:
__EOB__
      } elsif ($proto eq "odmr") {
        print FC<<__EOB__;
poll "@mdata[0]" protocol ODMR :
  user "@mdata[1]" there with password "@mdata[2]" fetchdomains @mdata[3];
__EOB__
      } else {
        print FC<<__EOB__;
poll @mdata[0] proto $proto@mdata[5] no dns localdomains @mdata[3]:
  user "@mdata[1]", with pass "@mdata[2]", is * here,$mdopt
__EOB__
      }
    } else {
      print FC<<__EOB__;
poll @mdata[0] no dns proto $proto@mdata[5]:
  user "@mdata[1]", with pass "@mdata[2]", is "@mdata[3]" here,$mdopt
__EOB__
    }
  }
  close(FC);
}

sub printpopconf() {
  open(PC,">popper.conf");
  chmod(0600,"popper.conf");
  print PC<<__EOB__;
set	tls-private-key-file	=	/etc/openssl/serverkey.pem
set	tls-server-cert-file	=	/etc/openssl/server.signed.pem
set	hash-spool		=	2
set	chunky-writes		=	tls
__EOB__
  if ($mailconf{'DisAutoDelete'} eq "true") {
    print PC "set	auto-delete		=	false\n";
  } 
  close(PC);
}

sub printsmblogon() {
  if ($dcontroller) {
    ($hd,$sd)=split(/:/,$dcontroller);
    open(LB,">logon.bat");
    chmod(0600,"logon.bat");

    foreach $sconf (@smbconf) {
      ($scitem,$scval)=split(/ = /,$sconf);
      if ($scitem eq "netbios name") {
        $smbservnm=$scval;
      }
    }

    if ($smbprofile eq "set") {
      print LB "NET USE $hd: /HOME\r\n";
    } else {
      print LB "NET USE $hd: \\\\$smbservnm\\homes\r\n";
    }
    print LB "NET USE $sd: \"\\\\$smbservnm\\SHAREDFILES\"\r\n";

    foreach $smbsh (@smbshare) {
      @sharedat=split(/\|/,$smbsh);
      if (@sharedat[7] ne "") {
        $shnme=join(" ",split(/_/,@sharedat[0]));
        print LB "NET USE @sharedat[7]: \"\\\\$smbservnm\\$shnme\"\r\n";
      }
    }

    foreach $smbsh (@mapdrive) {
      @sharedat=split(/\|/,$smbsh);
      $shnme=join(" ",split(/_/,@sharedat[1]));
      print LB "NET USE @sharedat[2]: \"\\\\@sharedat[0]\\$shnme\"\r\n";
    }

    if ($sysconf{'NTPServer'}) {
      print LB "NET TIME \"\\\\$smbservnm\" /SET /YES\r\n";
    }

#    if ( -e "/var/spool/samba/netlogon/logon_local.txt" ){
#      open(LLB,"/var/spool/samba/netlogon/logon_local.txt");
#      while(<LLB>) {
#        print LB $_;
#      }
#      close(LLB);
#    }

    close(LB)
  }
}


sub printsmbconf(){
  open(SMB,">smb.conf");
  chmod(0600,"smb.conf");

  open(AVD,">AppleVolumes.default");
  chmod(0600,"AppleVolumes.default");

  open(KRB,">krb5.conf");
  chmod(0600,"krb5.conf");

  $defdom=uc($smboption{'ADSRealm'});
  print KRB <<__EOF__;
[libdefaults]
        default_realm = $defdom
__EOF__

  @allkdcsrv=split(/ /,lc($smboption{'ADSServer'}));
  if (@allkdcsrv > 0) {
    print KRB <<__EOF__;
[realms]
        $defdom = {
__EOF__
    foreach $kdcsrv (@allkdcsrv) {
      print KRB "                kdc = " . $kdcsrv . "." . lc($defdom) . "\n";
    }
    print KRB "        }\n";
  }
  if (uc($dnsconf{'Domain'}) ne $defdom) {
    print KRB <<__EOF__;

[domain_realm]
	.$dnsconf{'Domain'} = $defdom
__EOF__
  }

  print SMB "[global]\n";
  print SMB "        workgroup = $smboption{'Domain'}\n";
  foreach $sconf (@smbconf) {
    print SMB "        $sconf\n";
  }

  if ($smboption{'Security'} eq "ADS") {
    $alladsserv=join(", ",split(/ /,$smboption{'ADSServer'}));
    print SMB "        password server = " . $alladsserv . "\n";
  } elsif ($smboption{'Security'} ne "USER") {
    print SMB "        password server = *\n";
  }

  print SMB "        log file = /var/log/samba\n";
  print SMB "        preserve case = Yes\n";
  print SMB "        case sensitive = No\n";
  print SMB "        name resolve order = lmhosts host wins bcast\n";
  print SMB "        guest account = nobody\n";
  print SMB "        hide dot files = Yes\n";
  print SMB "        deadtime = 5\n";
  print SMB "        security = $smboption{'Security'}\n";
  print SMB "        obey pam restrictions = Yes\n";
  print SMB "        message command = /usr/sbin/smbim %s %t %f &\n";

  if ($smboption{'Security'} eq "ADS") {
    print SMB "        realm = $defdom\n";
  }

  if ($dcontroller eq "" ) {
    print SMB "        logon drive = U:\n";
    print SMB "        logon path = \\\\%L\\%U\\.ntprofile\n";
    print SMB "        logon script = logon.bat\n";
    print SMB "        domain logons = No\n";
  }

  if (($sysconf{'PrimaryWins'} eq @iipdat[1]) || ($sysconf{'PrimaryWins'} eq "")) {
    print SMB "        wins support = Yes\n";
    print SMB "        wins hook = /usr/sbin/wins_hook\n";
    if ($smboption{'RemoteSync'} ne "") {
      @servers=split(/ /,$smboption{'RemoteSync'});
      print SMB "        remote announce = ";
      foreach $server (@servers) {
       print SMB $server . "/" . $smboption{'Domain'} . " ";
      }
      print SMB "\n        remote browse sync = $smboption{'RemoteSync'}\n";
    }
  } else {
    print SMB "        wins server = $sysconf{'PrimaryWins'}";
    if ( $sysconf{'PrimaryWins'}  != "" ) {
      print SMB " $sysconf{'SecondaryWins'}";
    }
    print SMB "\n        remote announce = $sysconf{'PrimaryWins'} $smboption{'RemoteSync'}\n";
    print SMB "        remote browse sync = $sysconf{'PrimaryWins'} $smboption{'RemoteSync'}\n";
  }
#print SMB "        interfaces = ";
#foreach $smbiface (@ints) {
#  @siipdat=split(/\|/,$interface{$smbiface});
#  if ((@siipdat[2] ne "32") && (@siipdat[2] ne "")) {
#    print SMB @siipdat[3] . " ";
#    print $smbinterface . "\n";
#  }
#}
#if (@gretunnels[0] ne "") {
#  print SMB "tun*";
#}
#if (($sysconf{'External'} eq "Dialup") || (@vadsllink[0] ne "")) {
#  print SMB " ppp*";
#}
#print SMB "\n";

#if (($mdmconf{'Connection'} eq "Dialup") && ($sysconf{'External'} eq "Dialup")){
#  print SMB "\n";
#  print SMB "        hosts allow = 127.0.0.1";
#  $intint=$sysconf{'Internal'};
#  @iipdat=split(/\|/,$interface{$intint});
#  $snmask=getsn(@iipdat[2]);
#  $nwaddr=getnw(@iipdat[2],@iipdat[1]);
#  print SMB " $nwaddr/$snmask";
#  foreach $wanl (@wans){
#    @idata=split(/\|/,$routes{$wanl});
#    $snmask=getsn(@idata[2]);
#    $nwaddr=getnw(@idata[2],@idata[1]);
#    print SMB " $nwaddr/$snmask";
#  }
#  foreach $etun (@esptunnels) {
#    @esptun=split(/\|/,$etun);
#    @idata=split(/\//,@esptun[3]);
#    $snmask=getsn(@idata[1]);
#    $nwaddr=getnw(@idata[1],@idata[0]);
#    print SMB " $nwaddr/$snmask";
#  }
#  print SMB "\n";
#} else {
#  print SMB "\n";
#}
print SMB "        interfaces = ";
foreach $iface (@ints) {
  if (((index($iface,"gtun") < 0) && ($iface ne $sysconf{'External'}) && ($iface ne $mdmconf{'ComPort'})) || ($sysconf{'External'} eq $sysconf{'Internal'}) || ($sysconf{'Internal'} eq $mdmconf{'ComPort'})){
    @idata=split(/\|/,$interface{$iface});
    if ((@idata[1] ne "0.0.0.0") && (@idata[2] ne  "32")) {
      print SMB " " . $iface;
    }
  }
}
print SMB " 127.0.0.1\n";
print SMB "        bind interfaces only = Yes\n";
print SMB "        strict allocate = Yes\n";
print SMB "        ldap ssl = off\n";
print SMB "        ldap admin dn = $ldapserv{'Login'}\n";

if (! -d "/etc/samba") {
  print SMB "        encrypt passwords = Yes\n";
  print SMB "        ldap server = $ldapserv{'Server'}\n";
  print SMB "        ldap port = 636\n";
  print SMB "        ldap ssl = start tls\n";
  print SMB "        unix password sync = Yes\n";
  print SMB "        passwd program = /usr/sbin/userpass %u smb\n";
  print SMB "        passwd chat = *Enter*Password* %n\\n\n";
  print SMB "        winbind uid = 524288-589824\n";
  print SMB "        winbind gid = 524288-589824\n";
  print SMB "        username map = /etc/smbusermap\n";
} else {
  print SMB "        map to guest = Bad User\n";
  @dninf=split(/\./,$dnsconf{'Domain'});
  $vsuf="";
  foreach $dndat (@dninf) {
    $vsuf.="dc=" . $dndat . ",";
  }
  chop $vsuf;

  print SMB "        ldap suffix = " . $vsuf . "\n";
  print SMB "        ldap idmap suffix = ou=Idmap\n";
  print SMB "        ldap user suffix = ou=Users\n";
  print SMB "        ldap group suffix = ou=Groups\n";
  print SMB "        ldap machine suffix = ou=Trusts\n";
  if ($smboption{'Winbind'} eq "") {
    $smboption{'Winbind'}="Both";
  }
  if (($smboption{'Winbind'} eq "Both") || ($smboption{'Winbind'} eq "Users Only")) {
    print SMB "        winbind enum users = yes\n";
  } else {
    print SMB "        winbind enum users = no\n";
  }
  if (($smboption{'Winbind'} eq "Both") || ($smboption{'Winbind'} eq "Groups Only")) {
    print SMB "        winbind enum groups = yes\n";
  } else {
    print SMB "        winbind enum groups = no\n";
  }
  print SMB "        winbind cache time = 600\n";
  print SMB "        winbind use default domain = yes\n";
  print SMB "        winbind refresh tickets = No\n";
  print SMB "        winbind offline logon = Yes\n";
  print SMB "        template homedir = hash2\n";
  print SMB "        template primary group = users\n";
  print SMB "        template shell = /usr/sbin/smrsh\n";
  print SMB "        ldapsam:trusted = yes\n";
  print SMB "        idmap uid = 524288-589824\n";
  print SMB "        idmap gid = 524288-589824\n";
  print SMB "        idmap backend = ldap:$ldapserv{'ReplicateSMB'}\n";

    print SMB "        ldap passwd sync = Yes\n";
    print SMB "        passdb backend = ldapsam:$ldapserv{'ReplicateSMB'}\n";
  if (($smboption{'Security'} eq "USER") || ($smboption{'Security'} eq "SHARE")) {
    print SMB "        add machine script = /usr/sbin/addtrust %u %M\n";
    print SMB "        add user script = /usr/sbin/adduser %u\n";
    print SMB "        delete user script = /usr/sbin/deluser %u\n";
    print SMB "        add user to group script = /usr/sbin/addugroup %u %g\n";
    print SMB "        delete user from group script = /usr/sbin/delugroup %u %g\n";
    print SMB "        add group script = /usr/sbin/addgroup %g\n";
    print SMB "        delete group script = /usr/sbin/delgroup %g\n";
    print SMB "        set primary group script = /usr/sbin/usergroup %u %g\n";
  } 
}

print AVD ":DEFAULT: options:noadouble,mswindows,usedots\n";
print AVD "/var/spool/samba/netlogon NETLOGON allow:\@smbadm,\@users,nobody rwlist:\@smbadm\n";
print AVD "/var/spool/samba/profiles PROFILES allow:\@users\n";
print AVD "/var/spool/samba/share SHAREDFILES allow:\@users,\@smbadm rwlist:\@smbadm\n";
print AVD "/var/spool/samba/ftp FTP allow:\@users,nobody rolist:nobody\n";
print AVD "~ \$u allow:\@users\n";
print AVD "/var/spool/apache/vhosts WEBSITES allow:\@www\n";

  if ($smboption{'Security'} ne "USER") {
    if (getgrnam("linux admin users") > 0) {
      $admingrp="\"+" . $smboption{'Domain'} . "\\Linux Admin Users\"";
    } else {
      $admingrp="\"+" . $smboption{'Domain'} . "\\Domain Admins\"";
    }
    $usergrp="\"+" . $smboption{'Domain'} . "\\Domain Users\"";
  } else {
    $admingrp="+smbadm";
    $usergrp="+users";
  }
  print SMB<<__EOB__;

[NETLOGON]
        comment = Net Logon
        path = /var/spool/samba/netlogon
        writeable = yes
        locking = No
        public = No
        create mask = 0664
        directory mask = 0775
        guest ok = No

[SHAREDFILES]
        comment = Open File Share
        path = /var/spool/samba/share
        read only = No
        create mask = 0664
        directory mask = 0775
        guest ok = No
        valid users = $usergrp

[FTP]
        comment = Files Avail. Via FTP
        path = /var/spool/samba/ftp
        read only = No
        create mask = 0664
        directory mask = 0775
        guest ok = No
        force group = nogroup
        force user = nobody
        valid users = $usergrp

[homes]
        comment = Home Directory
        profile acls = yes
        read only = No
        browsable = No
        writeable = Yes
        create mask = 0640
        directory mask = 0750
        guest ok = No

[TFTPBOOT]
        comment = TFTP Directory
        path = /tftpboot
        read only = No
        create mask = 0644
        directory mask = 0755
        force group = nogroup
        force user = nobody
        valid users = $admingrp
        guest ok = No

__EOB__

    if ( -e "/dev/cdrom") {
      print SMB<<__EOB__;
[DVDDRIVE]
        comment = CD/DVD
        path = /mnt/autofs/cd
        read only = Yes
        create mask = 0664
        directory mask = 0775
        force user = admin
        valid users = $usergrp
        guest ok = No
__EOB__
    }
    print SMB<<__EOB__;
[MAILSCANNER]
	comment = Files Used By Mailscanner
	path = /opt/MailScanner/etc/reports/en
        read only = No
        create mask = 0664
        directory mask = 0775
        guest ok = No
        force user = admin
        valid users = $admingrp

[MAILLISTS]
	comment = Majordomo Mailing Lists
	path = /var/spool/majordomo/lists
        read only = No
        create mask = 0644
        directory mask = 0755
        guest ok = No
        force group = majordomo
        force user = majordomo
        valid users = $admingrp

[QUARANTINE]
	comment = Files Blocked By Mailscanner
	path = /var/spool/mailscanner/quarantine/
        read only = No
        create mask = 0664
        directory mask = 0775
        guest ok = No
        force user = admin
        valid users = $admingrp

[ARCHIVE]
        comment = Email Archived By Mailscanner
        path = /var/spool/mailscanner/archive/
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[RECORDINGS]
        comment = VOIP Recordings
        path = /var/spool/asterisk/monitor
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[FAX]
        comment = Recived Faxes
        path = /var/spool/asterisk/fax
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[ASTFIRMWARE]
        comment = VOIP Firmware
        path = /var/lib/asterisk/firmware
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[MUSICONHOLD]
        comment = VOIP Music On Hold
        path = /var/lib/asterisk/moh
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[ASTKEYS]
        comment = VOIP Public Keys
        path = /var/lib/asterisk/keys
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[VOICEMAIL]
        comment = VOIP Voice Mail Folder
        path = /var/spool/asterisk/voicemail/6
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[ASTSOUNDS]
        comment = VOIP IVR Sounds And Prompts
        path = /var/lib/asterisk/sounds
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[USERS]
        comment = All Users Home Dorectories
        path = /var/home
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force group = users
        force user = admin
        valid users = $admingrp

[EMAIL]
        comment = All Users Inboxes
        path = /var/spool/mail
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[DNS]
        comment = DNS Zone Files
        path = /var/named
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[VPNCERTS]
        comment = VPN Certificates
        path = /etc/ipsec.d
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

[POLYCOM]
        comment = "Polycom Firmware"
        path = /var/spool/apache/htdocs/polycom
        read only = No
        guest ok = No
        create mask = 0640
        directory mask = 0750
        hide files = /*.php/*.inc/
        force user = admin
        valid users = $admingrp

__EOB__
  if (($dcontroller) || ($smboption{'Security'} ne "USER")) {
    print SMB<<__EOB__;
[SRVTOOLS]
        comment = Domain Administration Tools
        path = /var/spool/samba/dadmin
        read only = Yes
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force group = smbadm
        force user = admin
        valid users = $admingrp

__EOB__
  }

  if ($mailconf{'AntiVirus'} eq "Sophos") {
    print SMB<<__EOB__;
[SOPHOS]
        comment = Sophos Sav Directory
        path = /opt/sophos/sav
        read only = No
        create mask = 0664
        directory mask = 0755
        force group = smbadm
        valid users = $admingrp
        guest ok = No

__EOB__
  }
  if ( -d "/var/spool/backup") {
    print SMB<<__EOB__;
[BACKUP]
        comment = Backup Sync
        path = /var/spool/backup
        read only = No
        create mask = 0660
        directory mask = 0770
        guest ok = No
        force user = admin
        valid users = $admingrp

__EOB__
  }

  foreach $smbshare (@smbshare) {
    @share=split(/\|/,$smbshare);
    if (@share[2] eq "true") {
      $mask="066";
      $dmask="077";
    } else {
      $mask="064";
      $dmask="075";
    }
    if (@share[4] eq "true") {
      $mask .="4";
      $dmask .="5";
      $ugrp="users";
      $uatgrp="users";
    } else {
      $mask .="0";
      $dmask .="0";
      if (@share[3] eq "users") {
        @share[3]="users";
        $ugrp="users";
        $uatgrp="users";
      } else {
        $ugrp=@share[3];
        $uatgrp=@share[3];
      }
    }
    @share[0]=join(" ",split(/_/,@share[0]));

print AVD "/var/spool/samba/@share[1] \"@share[0]\" allow:\@$uatgrp";


if (@share[4] eq "true") {
  if (@share[3] ne "users"){
    print AVD ",\@@share[3]";
  }
  print AVD " rolist:\@users\n";
} else {
  print AVD "\n";
}

$vfsobj="";
if (@share[5] eq "true") {
  $vfsobj="        vfs objects = clamav\n";
}

    print SMB<<__EOB__;
[@share[0]]
$vfsobj        comment = "@share[0]"
        path = /var/spool/samba/@share[1]
        read only = No
        create mask = $mask
        directory mask = $dmask
        valid users = +$ugrp
        force group = +@share[3]
        guest ok = No

__EOB__
  }

  if (-e "/etc/printers") {
    open(NETP,"/etc/printers");
    while(<NETP>) {
      chop($_);
      @pdata=split(/:/,$_);
      print SMB<<__EOB__;
[@pdata[0]]
        comment = @pdata[0]
        path = /tmp
        printable = Yes
        postscript = No
        print command = lpr -r -P@pdata[0] %s
        lpq command = lpq -P@pdata[0]
        lprm command = lprm -P@pdata[0] %j

__EOB__
    }
  }

if ($printer{'LPT1'}) {
    print SMB<<__EOB__;
[$printer{'LPT1'}]
        comment = $printer{'LPT1'}
        path = /tmp
        printable = Yes
        postscript = No
        print command = lpr -r -Plp0 %s
        lpq command = lpq -Plp0
        lprm command = lprm -Plp0 %j

__EOB__
  }

if ($printer{'LPT2'}) {
    print SMB<<__EOB__;
[$printer{'LPT2'}]
        comment = $printer{'LPT2'}
        path = /tmp
        printable = Yes
        postscript = No
        print command = lpr -r -Plp1 %s
        lpq command = lpq -Plp1
        lprm command = lprm -Plp1 %j

__EOB__
  }

#  $usblp=0;
#  foreach $usbprint (@uprint) {
#    print SMB<<__EOB__;
#[$uprinter{$usbprint}]
#        comment = $usbprint
#        path = /tmp
#        printable = Yes
#        postscript = No
#        print command = lpr -r -Pulp$usblp %s
#        lpq command = lpq -Pulp$usblp
#        lprm command = lprm -Pulp$usblp %j
#
#__EOB__
#    $usblp++;
#  }
  close(SMB);
  close(AVD)

}

sub printcrontab() {
  $cjob{'Send_Queued_Mail'}="(/usr/sbin/sendmail -q;sendmail -q -Ac)";
  $cjob{'Fetch_POP3_Mail'}="/usr/bin/fetchmail";
  if ((@vadsllink > 0) || ($mdmconf{'Connection'} eq "ADSL") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW")){
    $cjob{'System_Update'}="/etc/rc.d/rc.ppp";
  } else {
    if (($mdmconf{'Connection'} eq "Dialup") && ($sysconf{'External'} eq "Dialup")) {
      $cjob{'System_Update'}="/usr/sbin/servconfig";
    } else {
      $cjob{'System_Update'}="(/usr/sbin/servconfig;/etc/rc.d/rc.tunnels)";
    }
  }
  open(CT,">crontab");
  chmod(0600,"crontab");
  print CT "#User Set Options\n";
  foreach $cron (@cronjobs) {
    @cdata=split(/\|/,$cron);
    if ($cjob{@cdata[0]}) {
      if (@cdata[0] eq "System_Update") {
        $donesup=TRUE;
      }
      if (@cdata[1] eq "60") {
        @cdata[1]="0";
      } elsif (@cdata[1] eq "1") {
        @cdata[1]="*";
      } else {
        @cdata[1]="*/@cdata[1]";
      }
      if (@cdata[2] eq @cdata[3]) {
        printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n",@cdata[1],"@cdata[2]",$cdata[4],$cjob{@cdata[0]});
      } else {
        printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n",@cdata[1],"@cdata[2]-@cdata[3]",$cdata[4],$cjob{@cdata[0]});
      }
    }
  }
  print CT "\n#Server Set Options\n";
  printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*","*","/usr/bin/nice -n 20 /usr/bin/logcheck.sh");
  printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/sbin/logrotate /etc/logrotate.conf");
  printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","(killall dhcpd;sleep 2;killall -9 dhcpd;/usr/sbin/dhcpd)");
#  printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/4","*","kill -HUP `head -1 /var/run/sendmail.pid`");
  printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/bin/updatedb --output=/var/db/locate --prunepaths='/proc /dev /sys /tmp /var/tmp /mnt/dev /var/spool/mail /var/spool/mail /var/spool/mailscanner /var/web'");
  if ($sysconfig{'Type'} eq "full") {
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","(/usr/sbin/rndc flush;/usr/sbin/rndc stop;rm /var/named/*.jnl;killall -9 named;/usr/sbin/named)");
#    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","(/usr/sbin/faxcron |mail -s \"FAX Statistics\" root)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/1","*","/usr/sbin/genwebmap");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/10","*","*","(killall -9 cshopfix;/usr/sbin/cshopfix)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/1","*","/usr/bin/db_checkpoint -1 -h /var/spool/ldap");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/bin/db_archive -d -h /var/spool/ldap");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/1","*","/usr/bin/db_checkpoint -1 -h /var/log/ldap");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/bin/db_archive -d -h /var/log/ldap");

#    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","1-23","*","/usr/bin/vacuumdb -U pgsql -h 127.0.0.1 -d asterisk -t users -t astdb");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/bin/vacuumdb -azfU pgsql -h 127.0.0.1");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/bin/mysql_dbmaint");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","1-23","*","/usr/sbin/tmsupdate");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","1-6","/usr/sbin/tmsupdate 1");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","0","/usr/sbin/tmsupdate 365");

    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","2-23","*","/usr/sbin/procmfilter");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/15","*","*","/usr/sbin/radcheck");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/15","*","*","/etc/asterisk/pannel/genbut.pl");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","2,4,6","*","(if [ \"`asterisk -rx \"module show like chan_sip.so\" |awk '\$1 == \"chan_sip.so\" {print \$1}'`\" != \"chan_sip.so\" ];then kill -9 `cat /var/run/asterisk.pid`; fi;)");
    if (-e "/usr/sbin/rebootphone") {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","4","*","/usr/sbin/rebootphone");
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","15","4","*","killall -9 rebootphone");
    } else {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","4","*","/usr/sbin/rebootsnom");
    }
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","2-23","*","(rm /var/spool/apache/htdocs/ns/config/ifup.*;/var/spool/apache/htdocs/ns/config/bwup.*;/usr/sbin/genconf)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/4","*","/usr/sbin/quotasetup");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","(openssl ca -gencrl -out /etc/ipsec.d/crls/crl.pem -config /etc/openssl/ca.conf;cp /etc/ipsec.d/crls/crl.pem /etc/ipsec.d/certs/`openssl crl -noout -hash -in /etc/ipsec.d/crls/crl.pem`.r0;openssl crl -in /etc/ipsec.d/crls/crl.pem -text  > /var/spool/apache/htdocs/ns/config/crl.txt;/usr/sbin/pkistore)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","(killall -9 smbd nmbd;/usr/sbin/nmbd -D;/usr/sbin/smbd -D)");

    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/1","*","(ulimit -n 65535;/usr/sbin/nscd -i passwd -i group -i hosts)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*","*","*","(if [ ! \"`pidof slapd`\" ];then /etc/rc.d/rc.ldap ;fi)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*","*","*","(if [ ! \"'/usr/bin/whomami'\" ];then /usr/sbin/nscd -i passwd -i group -i hosts;/usr/sbin/asterisk -rx \"odbc show\" ;/usr/bin/whoami;fi)");
#    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/4","*","(ulimit -n 65535;/usr/sbin/nscd -K;sleep 2;killall -9 nscd;rm /var/db/nscd/*;sleep 1;/usr/sbin/nscd)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/sbin/warnquota");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","/usr/sbin/uexpired");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","(mv /tmp/core* /var/cores/asterisk;rm -rf /tmp/clamav-* /tmp/php.log  /tmp/ps2fax*)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","1","rm -rf /var/cores/asterisk/*");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/5","*","*","/usr/bin/mrtg /etc/mrtg.conf --confcache-file /tmp/mrtg.ok");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/5","*","*","/usr/bin/rrdtc $sysconf{'External'}");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/5","*","*","/usr/bin/rrdlog");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/5","*","*","(/usr/bin/rrdvoip |/bin/bash)");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","rm /var/spool/apache/htdocs/ssl/req/*");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","0","*","rm /var/spool/apache/htdocs/pdf/*");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","2","*","/usr/bin/backup");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","2","1","/usr/bin/pbx_reports");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","30","1","*","/usr/sbin/cfrestore");
#    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/30","*","*","kill -1 `cat /var/run/gnugk.pid`");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/5","*","*","/usr/sbin/asterisk -rx \"odbc connect Asterisk\"");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/$mailconf{'Rescan'}","*","*","(/usr/sbin/sendmail -q -qR\\\@$dnsconf{'Domain'}\\> -qS\\\@$dnsconf{'Domain'}\\>;sendmail -q -Ac -qR\\\@$dnsconf{'Domain'}\\> -qS\\\@$dnsconf{'Domain'}\\>)");
    if (! $donesup) {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/2","23,0","*",$cjob{'System_Update'});
    }
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/6","*","(ps ax |grep op_server.pl |grep -v grep |awk '{print \"kill \"\$1}'|sh;/etc/asterisk/pannel/op_server.pl &)");
  }
  if ((@vadsllink > 0) || ($mdmconf{'Connection'} eq "ADSL") || ($mdmconf{'Connection'} eq "3G") || ($mdmconf{'Connection'} eq "3GIPW")){
    if ($sysconf{'External'} eq "Dialup") {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/20","*","*","/usr/sbin/linkup");
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/10","*","*","/usr/bin/nsupdate /tmp/dnsup.ppp");

      if (-f "/etc/dyndnsconf") {
        printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/10","*","*","/usr/sbin/dnsupdate");
      }
    }
    foreach $dsll (@vadsllink) {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/10","*","*","/usr/bin/nsupdate /tmp/dnsup.$dsll.ppp");
    }
    if ((@vadsllink > 0) || ($mdmconf{'Connection'} eq "ADSL")) {
      print CT "\n#Shutdown ADSL PPP Link\n";
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","1","*","(sleep 30;killall pppd;rm /var/run/netsentry*)");
    }
  }

  if ($mailconf{'AntiVirus'} eq "Trend") {
    print CT "\n#Trend Update\n";
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*","*","/etc/iscan/prescan.cgi");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","30","2","*","/etc/iscan/cleanscan");
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","2","*","/etc/iscan/purgefile");
  } elsif ($mailconf{'AntiVirus'} eq "Sophos") {
    print CT "\n#Sophos\n";
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","23","*","/opt/MailScanner/bin/sophos.update");
  }
  print CT "\n#Clam Anti Virus Scan\n";
  printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","9,12,18,23","*","/usr/sbin/clamupdate");

  if ($smboption{'Security'} ne "USER") {
    printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*","*","/usr/sbin/idmapsync");
  }


  if ($sysconfig{'Type'} eq "full") {
    print CT "\n#Trend Update\n";
    foreach $url (@crlurl) {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","0","*/4","*","/usr/sbin/crlget $url");
    }
  }

  if ( -d "/var/spool/asterisk/monitor.bak") {
      printf CT ("%-5s %-6s * * %-8s %s > /dev/null 2>&1\n","*/10","*","*","/usr/bin/rsync -a --exclude=*-in.WAV --exclude=*-out.WAV /var/spool/asterisk/monitor/\`/usr/bin/date +%Y-%m-%d\` /var/spool/asterisk/monitor.bak/");
  }

  if ( -e "/etc/crontab.local") {
    print CT "\n#Local Configuration\n\n";
    open(CTL,"/etc/crontab.local");
    while(<CTL>) {
      print CT $_;
    }
    close(CTL);
  }

  close(CT);
}

sub printdnsconf(){

  if (($sysconf{'Internal'} eq $sysconf{'External'}) && ($mdmconf{'Connection'} ne "ADSL")) {
    $dnsall=1;
  } else {
    $dnsall=0;
  }

  $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  open(DUP,">dnsupdate");
  chmod(0600,"dnsupdate");
#  open(DUP2,">dnsupdate.ext");
#  chmod(0600,"dnsupdate.ext");

  open(DNS,">named.conf");
  chmod(0600,"named.conf");
  $tsigint=encode_base64($dnsconf{'DynKey'});
  chop $tsigint;

  print DUP<<__EOB__;
server 127.0.0.1
local 127.0.0.1
key $dnsconf{'Domain'} $tsigint
__EOB__

  print DNS<<__EOB__;
options {
        directory "/var/named";
	notify yes;
};
logging {
        channel update_debug {
                file "/var/log/update-debug.log";
                severity  info;
                print-category yes;
                print-severity yes;
                print-time     yes;
        };
        channel security_info    {
                file "/var/log/named-auth.info";
                severity  info;
                print-category yes;
                print-severity yes;
                print-time     yes;
        };
        channel simple_log   {
                severity  warning;
		syslog daemon;
        };
        category update {
                update_debug;
        };
        category security {
                security_info;
        };
        category default {
                simple_log;
       };
};
controls {
        inet 127.0.0.1 port 953
        allow {
                127.0.0.1;
        };
        inet 127.0.0.2 port 953
        allow {
                127.0.0.2;
        };
};

__EOB__
  foreach $tsigz (@tsigkeys) {
    print DNS<<__EOB__;
key $tsigz {
        algorithm hmac-md5;
        secret $tsig{$tsigz};
};
__EOB__
  }
  if ($dnsconf{'DynKey'} ne "") {
    open(KEY,">zones/nsupdate.key");
    print KEY "$dnsconf{'Domain'}. IN KEY 512 3 157 $tsigint\n";
    close(KEY);
    open(PKEY,">zones/nsupdate.private");
    print PKEY "Private-key-format: v1.2\n";
    print PKEY "Algorithm: 157 (HMAC_MD5)\n";
    print PKEY "Key: $tsigint\n";
    close(PKEY);


    print DNS<<__EOB__;
key $dnsconf{'Domain'} {
        algorithm hmac-md5;
        secret $tsigint;
};
__EOB__
    $intupsrc="key $dnsconf{'Domain'}";
  } else {
    foreach $iface (@ints) {
      @iipdat=split(/\|/,$interface{$iface});
      if ($intupsrc eq "") {
        $intupsrc="@iipdat[1]/32;";
      } else {
        $intupsrc.="\n                     @iipdat[1]/32;";
      }
    }
    chop $intupsrc;
  }

  @adsservs=split(/ /,$smboption{'ADSServer'});
  foreach $adsdc (@adsservs) {
    $adsdc=lc($adsdc);
    if ($hosts{$adsdc} ne "") {
      ($adsnme,$adsip)=split(/\|/,$hosts{$adsdc});
      $adsservs.="\n                     " . $adsip . ";";
    }
  }
#acl adsservers {
#        127.0.0.2;
#        127.0.0.1;$adsservs
#};
print DNS<<__EOB__;
view "internal" {
       allow-query {
               any;
       };
       match-clients {
__EOB__

  $extint=$sysconf{'External'};
  @eipdat=split(/\|/,$interface{$extint});

  %isrev="";
  @revs=();
  @orevs=();

  if ($dnsall) {
    print DNS "               any;\n";
  }

  if ( -e "/etc/dns.external") {
    open(DEX,"/etc/dns.external");
    while(<DEX>) {
      chop($_);
      $dnsext{$_}=1;
    }
    close(DEX);
  }


  foreach $iface (@ints) {
    @iipdat=split(/\|/,$interface{$iface});

    $snmask=getsn(@iipdat[2]);
    $nwaddr=getnw(@iipdat[2],@iipdat[1]);
    $bcaddr=getbc(@iipdat[2],@iipdat[1]);

    @nwipq=split(/\./,$nwaddr);  
    if (@iipdat[2] >= 24) {
      $revblk="@nwipq[2].@nwipq[1].@nwipq[0].in-addr.arpa";
    } elsif ((@iipdat[2] >= 16 ) && (@iipdat[2] < 24)) {
      $cnum=(2**(8-(@iipdat[2] % 8)));
      for($cnt=@nwipq[2];$cnt < (@nwipq[2]+$cnum);$cnt++){
        $revblk="$cnt.@nwipq[1].@nwipq[0].in-addr.arpa";
      }
    } elsif ((@iipdata[2] >= 8 ) && (@iipdata[2] < 16)) {
      $cnum=(2**(8-(@iipdat[2] % 8)));
      for($cnt=@nwipq[1];$cnt < (@nwipq[1]+$cnum);$cnt++){
        for ($cnt1=0;$cnt1 < 256;$cnt1++) {
          $revblk="$cnt1.$cnt.@nwipq[0].in-addr.arpa";
        }
      }
    }
 
    if (((($iface ne $sysconf{'External'}) && ($gretun{$iface} eq "")) || ($sysconf{'External'} eq $sysconf{'Internal'})) && (@iipdat[2] >= 8) && (@iipdat[2] < 32)) {
      if (( ! $dnsall) && ($dnsext{$iface} != "1")) {
        print DNS "               $nwaddr/@iipdat[2];\n";
      }
      if (! $isrev{$revblk}) {
        $isrev{$revblk}=true;
        push(@revs,$revblk);
      }
    } elsif ($iface eq $sysconf{'Internal'}) {
      if (( ! $dnsall) && ($dnsext{$iface} != "1")) {
        print DNS "               $nwaddr/@iipdat[2];\n";
      }
    }
  }
if ( ! $dnsall ) {
  if ($wirelessrange != "") {
        print DNS "               $wirelessrange;\n";
  }
  if ($hspotrange != "") {
        print DNS "               $hspotrange;\n";
  }
  if ($sysconf{'VPNNet'} != "") {
      print DNS "               $sysconf{'VPNNet'};\n";
  }
  if ($sysconf{'OVPNNet'} ne "") {
      print DNS "               $sysconf{'OVPNNet'};\n";
  }
  if ($sysconf{'L2TPNet'} ne "") {
      print DNS "               $sysconf{'L2TPNet'};\n";
  }
  foreach $tunsrc (@tundnsint) {
    if ($tunsrc ne "") {
      print DNS "               $tunsrc;\n";
    }
  }
}
foreach $wanl (@wans){
  @idata=split(/\|/,$routes{$wanl});
  $snmask=getsn(@idata[2]);
  $nwaddr=getnw(@idata[2],@idata[1]);
  $bcaddr=getbc(@idata[2],@idata[1]);
  if ( ! $dnsall ) {
    print DNS "               $nwaddr/@idata[2];\n";
  }
  @nwipq=split(/\./,$nwaddr);  

  if (@idata[2] >= 24) {
    $revblk="@nwipq[2].@nwipq[1].@nwipq[0].in-addr.arpa";
    if (! $isrev{$revblk}) {
      $isrev{$revblk}=true;
      push(@revs,$revblk);
    }
  } elsif ((@idata[2] >= 16 ) && (@idata[2] < 24)) {
    $cnum=(2**(8-(@idata[2] % 8)));
    for($cnt=@nwipq[2];$cnt < (@nwipq[2]+$cnum);$cnt++){
      $revblk="$cnt.@nwipq[1].@nwipq[0].in-addr.arpa";
      if (! $isrev{$revblk}) {
        $isrev{$revblk}=true;
        push(@revs,$revblk);
      }
    }
  } elsif ((@idata[2] >= 8 ) && (@idata[2] < 16)) {
    $cnum=(2**(8-(@idata[2] % 8)));
    for($cnt=@nwipq[1];$cnt < (@nwipq[1]+$cnum);$cnt++){
      for ($cnt1=0;$cnt1 < 256;$cnt1++) {
        $revblk="$cnt1.$cnt.@nwipq[0].in-addr.arpa";
        if (! $isrev{$revblk}) {
        $isrev{$revblk}=true;
          push(@revs,$revblk);
        }
      }
    }
  }
}

  if ( ! $dnsall ) {
    foreach $rlink (@radlink) {
      @lidata=split(/\|/,$rlink);
      print DNS "               @lidata[1]/32;\n";
    }
    foreach $esplink (@esptunnels) {
      @espdat=split(/\|/,$esplink);
      if ((@espdat[2] ne "0.0.0.0/0") && (@espdat[2] ne "")){
        print DNS "               @espdat[2];\n";
      }
    }
    if (-e "/root/localdns") {
      open(LDNS,"/root/localdns");
      while(<LDNS>) {
        chop $_;
        print DNS "               $_;\n";
      }
      close(LDNS);
    }
    print DNS<<__EOB__;
               127.0.0.1/32;
__EOB__
  }

print DNS "       };\n";


if ((($sysconf{'PrimaryDns'} ne "") || ($sysconf{'SecondaryDns'} ne "")) && ($dnsconf{'Usepeer'} ne "true")) {
  if ($sysconf{'PrimaryDns'} ne "") {
  }
print DNS<<__EOB__;
       forward first;
       forwarders {
__EOB__
  if ($sysconf{'PrimaryDns'} ne "") {
    print DNS "               $sysconf{'PrimaryDns'};\n";
  }
  if ($sysconf{'SecondaryDns'} ne "") {
    print DNS "               $sysconf{'SecondaryDns'};\n";
  }
print DNS<<__EOB__;
       };
__EOB__
} else {
#if (($sysconf{'External'} eq "Dialup") && ($dnsconf{'Usepeer'} ne "true")) {
  print DNS "#FWD\n";
}

print DNS<<__EOB__;
       recursion yes;
       zone "." {
               type hint;
               file "root.cache";
       };
__EOB__

$iiface=$sysconf{'Internal'};
@iipdat=split(/\|/,$interface{$iiface});

if ($dnsconf{'Auth'} ne "false"){
  @ipq=split(/\./,@iipdat[1]);
  $classc="@ipq[2].@ipq[1].@ipq[0].in-addr.arpa";
  $revdns{$classc}.=",$dnsconf{'Hostname'};@ipq[3]";

  foreach $classc (@revs) { 
print DNS<<__EOB__;
       zone "$classc" {
              type master;
              notify yes;
              file "$classc";
              allow-update {
                     $intupsrc;
              };
              check-names ignore;
       };
__EOB__
    push(@idnszones,"$classc");
    if ( ! -e "zones/$classc" ){
      open(ZONE,">zones/$classc");
      chmod(0600,"zones/$classc");
      print ZONE<<__EOB__;
@                        $dnsconf{'DefaultTTL'} IN     SOA   $classc.     info (
                                           $dnsconf{'Serial'} ; serial
                                           $dnsconf{'Refresh'}
                                           $dnsconf{'Retry'}
                                           $dnsconf{'Expire'}
                                           $dnsconf{'DefaultTTL'})
                         $dnsconf{'DefaultTTL'} IN     NS    $dnsconf{'Hostname'}.$dnsconf{'Domain'}.
__EOB__
#      ($ip3,$ip2,$ip1)=split(/\./,$classc);
#      for ($cnt=0;$cnt < 256;$cnt ++) {
#        printf ZONE ("%-25s%s IN     %-5s %s\n",$cnt,$dnsconf{'DefaultTTL'},"PTR","$ip1.$ip2.$ip3.$cnt.");
#      }
      close(ZONE);
    }

    if ($revdns{$classc}) {
      @revhosts=split(/,/,$revdns{$classc});
      shift @revhosts;
      print DUP "zone $classc\n";
      print DUP "update add $classc. $dnsconf{'DefaultTTL'} NS $fqdn.\n";
      foreach $rvdu (@revhosts) {
        ($hname,$ipaddr)=split(/;/,$rvdu);
        print DUP "update delete $ipaddr.$classc. PTR\n";
        if ($hname ne "") {
          print DUP "update add $ipaddr.$classc. $dnsconf{'DefaultTTL'} PTR $hname.$dnsconf{'Domain'}.\n";
        } else {
          print DUP "update add $ipaddr.$classc. $dnsconf{'DefaultTTL'} PTR $dnsconf{'Domain'}.\n";
        }
      }
      print DUP "send\n";
    }

  }
  push(@idnszones,"$dnsconf{'Domain'}");
  open(ZONE,">zones/$dnsconf{'Domain'}");
  chmod(0600,"zones/$dnsconf{'Domain'}");
  print ZONE<<__EOB__;
@                        $dnsconf{'DefaultTTL'} IN     SOA   $dnsconf{'Domain'}.     info (
                                           $dnsconf{'Serial'} ; serial
                                           $dnsconf{'Refresh'}
                                           $dnsconf{'Retry'}
                                           $dnsconf{'Expire'}
                                           $dnsconf{'DefaultTTL'})
                         $dnsconf{'DefaultTTL'} IN     NS    $dnsconf{'Hostname'}.$dnsconf{'Domain'}.
__EOB__
  $smboption{'ADSRealm'}=lc($smboption{'ADSRealm'});
  if ((($dnsconf{'Domain'} eq $smboption{'ADSRealm'}) && ($dnsconf{'Auth'} eq "true")) || ($tsig{$smboption{'ADSRealm'}} ne "")){
#update delete _kerberos._tcp.dc._msdcs.$smboption{'ADSRealm'}. SRV
#update delete _ldap._tcp.dc._msdcs.$smboption{'ADSRealm'}. SRV
#update delete _ldap._tcp.gc._msdcs.$smboption{'ADSRealm'}. SRV
#update delete _ldap._tcp.pdc._msdcs.$smboption{'ADSRealm'}. SRV
#update delete gc._msdcs.$smboption{'ADSRealm'}. SRV
    print DUP<<__EOB__;
key $smboption{'ADSRealm'} $tsigint
zone $smboption{'ADSRealm'}
update delete _kerberos._tcp.$smboption{'ADSRealm'}. SRV
update delete _kpasswd._tcp.$smboption{'ADSRealm'}. SRV
update delete _ldap._tcp.$smboption{'ADSRealm'}. SRV
update delete _gc._tcp.$smboption{'ADSRealm'}. SRV
update delete _kerberos._udp.$smboption{'ADSRealm'}. SRV
update delete _kpasswd._udp.$smboption{'ADSRealm'}. SRV
send
__EOB__
    @adsservs=split(/ /,$smboption{'ADSServer'});
    $priority=@adsservs;
    $priority--;
    foreach $adsdc (@adsservs) {
      $adsdc=lc($adsdc);
#update add _kerberos._tcp.dc._msdcs.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 88 $adsdc.$smboption{'ADSRealm'}.
#update add _ldap._tcp.dc._msdcs.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 389 $adsdc.$smboption{'ADSRealm'}.
#update add _ldap._tcp.gc._msdcs.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 3268 $adsdc.$smboption{'ADSRealm'}.
#update add _ldap._tcp.pdc._msdcs.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 389 $adsdc.$smboption{'ADSRealm'}.
#update add gc._msdcs.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 3268 $adsdc.$smboption{'ADSRealm'}.
      print DUP<<__EOB__;
key $smboption{'ADSRealm'} $tsigint
zone $smboption{'ADSRealm'}
update add _gc._tcp.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 3268 $adsdc.$smboption{'ADSRealm'}.
update add _kerberos._tcp.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 88 $adsdc.$smboption{'ADSRealm'}.
update add _kpasswd._tcp.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 464 $adsdc.$smboption{'ADSRealm'}.
update add _ldap._tcp.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 389 $adsdc.$smboption{'ADSRealm'}.
update add _kerberos._udp.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 88 $adsdc.$smboption{'ADSRealm'}.
update add _kpasswd._udp.$smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} SRV $priority 10 464 $adsdc.$smboption{'ADSRealm'}.
send
__EOB__
      $priority--;
    }
  }
  print DUP "zone $dnsconf{'Domain'}\n";
  print DUP "key $dnsconf{'Domain'} $tsigint\n";
  print DUP "update delete $dnsconf{'Domain'}\. A\n";
  print DUP "update delete $dnsconf{'Domain'}\. MX\n";
  print DUP "update delete wpad.$dnsconf{'Domain'}\. CNAME\n";
  print DUP "update delete pabx.$dnsconf{'Domain'}\. CNAME\n";
  print DUP "update delete voip.$dnsconf{'Domain'}\. CNAME\n";
  print DUP "update delete callshop.$dnsconf{'Domain'}\. CNAME\n";
  print DUP "update delete ticket.$dnsconf{'Domain'}\. CNAME\n";

  push(@adsdpre,"_msdcs");
#  push(@adsdpre,"_tcp");
#  push(@adsdpre,"_udp");
  push(@adsdpre,"_sites");
  push(@adsdpre,"forestdnszones");
  push(@adsdpre,"domaindnszones");

  foreach $adsdom (@adsdpre) {
    print DUP "update delete $adsdom.$dnsconf{'Domain'}\. NS\n";
    foreach $adsdc (@adsservs) {
      $adsdc=lc($adsdc);
      print DUP "update add $adsdom.$dnsconf{'Domain'}\. $dnsconf{'DefaultTTL'} NS $adsdc.$dnsconf{'Domain'}\.\n";
    }
  }

  if (rindex($smboption{'ADSRealm'},$dnsconf{'Domain'}) ne -1) {
    print DUP "update delete $smboption{'ADSRealm'}. NS\n";
    print DUP "update add $smboption{'ADSRealm'}. $dnsconf{'DefaultTTL'} NS $dnsconf{'Hostname'}.$dnsconf{'Domain'}\.\n";
  }

  printf ZONE ("%-25s%s IN     %-5s %s\n","",$dnsconf{'DefaultTTL'},"MX","0 $pmailx.");
  print DUP "update add $dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} MX 0 $pmailx.\n";
  if ($smailx ne "") {
    printf ZONE ("%-25s%s IN     %-5s %s\n","",$dnsconf{'DefaultTTL'},"MX","5 $smailx.");
  }

  if (@iipdat[1]) {
    if ($dnsconf{'Hostname'} ne "") {
      print DUP "update delete $dnsconf{'Hostname'}.$dnsconf{'Domain'}. A\n";
      printf ZONE ("%-25s%s IN     %-5s %s\n","$dnsconf{'Hostname'}",$dnsconf{'DefaultTTL'},"A",@iipdat[1]);
      print DUP "update add $dnsconf{'Hostname'}.$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} A @iipdat[1]\n";
    } else {
      print DUP "update delete $dnsconf{'Domain'}. A\n";
      printf ZONE ("%-25s%s IN     %-5s %s\n","",$dnsconf{'DefaultTTL'},"A",@iipdat[1]);
      print DUP "update add $dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} A @iipdat[1]\n";
    }
    print DUP "update add $dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} A @iipdat[1]\n";
  }
  printf ZONE ("%-25s%s IN     %-5s %s\n","localhost",$dnsconf{'DefaultTTL'},"CNAME","loopback.$dnsconf{'Domain'}.");
#  print DUP "update delete localhost CNAME\n";
#  print DUP "update add localhost $dnsconf{'DefaultTTL'} CNAME loopback\n";

  printf ZONE ("%-25s%s IN     %-5s %s\n","loopback",$dnsconf{'DefaultTTL'},"A","127.0.0.1");
  printf ZONE ("%-25s%s IN     %-5s %s\n","loopback2",$dnsconf{'DefaultTTL'},"A","127.0.0.2");

  printf ZONE ("%-25s%s IN     %-5s 0 1 4569 %s.\n","_iax._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 5060 %s.\n","_sip._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 5060 %s.\n","_sip._tcp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 5061 %s.\n","_sips._tcp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 3478 %s.\n","_stun._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);

  print DUP "update add wpad.$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} CNAME $fqdn.\n";
  print DUP "update add pabx.$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} CNAME $fqdn.\n";
  print DUP "update add callshop.$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} CNAME $fqdn.\n";
  print DUP "update add ticket.$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} CNAME $fqdn.\n";
  print DUP "update add voip.$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} CNAME $fqdn.\n";
#  print DUP "update delete loopback A\n";
#  print DUP "update delete loopback2 A\n";
#  print DUP "update add loopback $dnsconf{'DefaultTTL'} A 127.0.0.1\n";
#  print DUP "update add loopback2 $dnsconf{'DefaultTTL'} A 127.0.0.2\n";

  foreach $idns (@intdns) {
    @words=split(/\|/,$idns);
    $dent=join(" ",split(/_/,@words[1]));
    if (@words[0] ne "A") {
      $dent.=".";
    }
    printf ZONE ("%-25s%s IN     %-5s %s\n",@words[2],$dnsconf{'DefaultTTL'},@words[0],$dent);
    if (@words[2] ne "") {
      print DUP "update delete @words[2] @words[0] $dent\n";
      print DUP "update add @words[2] $dnsconf{'DefaultTTL'} @words[0] $dent\n";
    }
  }

  foreach $host (@hsts) {
    @hdata=split(/\|/,$hosts{$host});
    if (index($host,".") eq -1) {
      print DUP "update delete @hdata[0].$dnsconf{'Domain'}. A\n";
      print DUP "update add @hdata[0].$dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} A @hdata[1]\n";
    }
  }

  print DUP "send\n";
  if ($ddnslocal eq "0") {
    print DUP "zone $dnsconf{'DynZone'}\n";
    print DUP "key $dnsconf{'Domain'} $tsigint\n";
    print DUP "update delete $dnsconf{'DynZone'}\. A\n";
    if (@iipdat[1] ne "") {
      print DUP "update add $dnsconf{'DynZone'}. $dnsconf{'DefaultTTL'} A @iipdat[1]\n";
      foreach $linknme (@vadsllink) {
        print DUP "update add $linknme.$dnsconf{'DynZone'}. $dnsconf{'DefaultTTL'} A @iipdat[1]\n";
      }
    }
    print DUP "send\n";
  }
  close(ZONE);

#  foreach $adsdom (@adsdpre) {
#--gn
#
#    push(@idnszones,"$adsdom.$dnsconf{'Domain'}");
#    open(ZONE,">zones/$adsdom.$dnsconf{'Domain'}");
#    chmod(0600,"zones/$adsdom.$dnsconf{'Domain'}");
#    print ZONE<<__EOB__;
#\$ORIGIN .
#\$TTL $dnsconf{'DefaultTTL'};
#$adsdom.$dnsconf{'Domain'}.      $dnsconf{'DefaultTTL'} IN     SOA   $adsdom.$dnsconf{'Domain'}.     info.$adsdom.$dnsconf{'Domain'}. (
#                                             $dnsconf{'Serial'} ; serial
#                                             $dnsconf{'Refresh'}
#                                             $dnsconf{'Retry'}
#                                             $dnsconf{'Expire'}
#                                             $dnsconf{'DefaultTTL'})
#                           $dnsconf{'DefaultTTL'} IN     NS    $dnsconf{'Hostname'}.$dnsconf{'Domain'}.
#__EOB__
#    close(ZONE);
#  }

print DNS<<__EOB__;
       zone "$dnsconf{'Domain'}" {
              type master;
              notify yes;
              file "$dnsconf{'Domain'}";
              allow-update {
                     $intupsrc;
              };
              check-names ignore;
       };
__EOB__
  if ($ddnslocal eq "0") {
    print DNS<<__EOB__;
       zone "$dnsconf{'DynZone'}" {
              type master;
              notify yes;
              file "domain.dyn";
              allow-update {
                     $intupsrc;
                     key $dnsconf{'DynZone'};
              };
              check-names ignore;
       };
__EOB__
  }
  if ($adsservs ne "") {
    foreach $adsdom (@adsdpre) {
      print DNS<<__EOB__;
       zone "$adsdom.$dnsconf{'Domain'}" {
              type slave;
              file "int.$adsdom.$dnsconf{'Domain'}";
              allow-notify {
                        any;
              };
              masters {$adsservs
              };
              check-names ignore;
       };
__EOB__
    }
  }
}
  push(@ednszones,"0.0.127.in-addr.arpa");
  open(ZONE,">zones/0.0.127.in-addr.arpa");
  chmod(0600,"zones/0.0.127.in-addr.arpa");
  print ZONE<<__EOB__;
@                        $dnsconf{'DefaultTTL'} IN     SOA   0.0.127.in-addr.arpa.     info (
                                           $dnsconf{'Serial'} ; serial
                                           $dnsconf{'Refresh'}
                                           $dnsconf{'Retry'}
                                           $dnsconf{'Expire'}
                                           $dnsconf{'DefaultTTL'})
                         $dnsconf{'DefaultTTL'} IN     NS    $dnsconf{'Hostname'}.$dnsconf{'Domain'}.
1                        $dnsconf{'DefaultTTL'} IN     PTR   loopback.$dnsconf{'Domain'}.
2                        $dnsconf{'DefaultTTL'} IN     PTR   loopback2.$dnsconf{'Domain'}.
__EOB__
  close(ZONE);

print DNS<<__EOB__;
       zone "0.0.127.in-addr.arpa" {
              type master;
              notify yes;
              also-notify {
                     127.0.0.1;
              };
              file "0.0.127.in-addr.arpa";
              check-names ignore;
       };
__EOB__

foreach $intslave (@islaves) {
  $txout="";
  @txsite=split(/,/,$allowtx{$intslave});
  shift @txsite;
  foreach $txs (@txsite) {
    $txout .="                        $txs;\n";
  }
  if ($txout != "") {
    print DNS<<__EOB__;
       zone "$intslave" {
              type slave;
              file "int.$intslave";
              allow-notify {
                        any;
              };
              masters {
$txout              };
__EOB__
  print DNS<<__EOB__;
              check-names ignore;
       };
__EOB__
  }
}

foreach $intslave (@ihosted) {
  push(@idnszones,$intslave);
  print DNS<<__EOB__;
       zone "$intslave" {
              type master;
              notify yes;
              file "$intslave";
              also-notify {
                     127.0.0.1;
              };
              allow-update {
                     key $intslave;
                     key $dnsconf{'Domain'};
              };
__EOB__
  print DNS<<__EOB__;
              check-names ignore;
       };
__EOB__
}

#chop $othermatch;
#print DNS<<__EOB__;
#};
#view "other" {
#       match-clients {
#$othermatch
#       };
#       recursion yes;
#       zone "." {
#               type hint;
#               file "root.cache";
#       };
#__EOB__
#foreach $classc (@orevs) { 
#print DNS<<__EOB__;
#       zone "$classc" {
#              type master;
#              file "$classc";
#              allow-update {
#                     $intupsrc;
#              };
#       };
#__EOB__
#  push(@idnszones,"$classc");
#  if ( ! -e "zones/$classc" ){
#    open(ZONE,">zones/$classc");
#    chmod(0600,"zones/$classc");
#    print ZONE<<__EOB__;
#@                        $dnsconf{'DefaultTTL'} IN     SOA   $classc.     info@ (
#                                           $dnsconf{'Serial'} ; serial
#                                           $dnsconf{'Refresh'}
#                                           $dnsconf{'Retry'}
#                                           $dnsconf{'Expire'}
#                                           $dnsconf{'DefaultTTL'})
#                         $dnsconf{'DefaultTTL'} IN     NS    $dnsconf{'Hostname'}.$dnsconf{'Domain'}.
#__EOB__
#    ($ip3,$ip2,$ip1)=split(/\./,$classc);
#    for ($cnt=0;$cnt < 256;$cnt ++) {
#      printf ZONE ("%-25s%s IN     %-5s %s\n",$cnt,$dnsconf{'DefaultTTL'},"PTR","$ip1.$ip2.$ip3.$cnt.");
#    }
#    close(ZONE);
#  }
#  if ($revdns{$classc}) {
#    @revhosts=split(/,/,$revdns{$classc});
#    shift @revhosts;
#    print DUP "zone $classc\n";
#    print DUP "update add $classc. $dnsconf{'DefaultTTL'} NS $fqdn.\n";
#    foreach $rvdu (@revhosts) {
#      ($hname,$ipaddr)=split(/;/,$rvdu);
#      print DUP "update delete $ipaddr PTR\n";
#      if ($hname ne "") {
#        print DUP "update add $ipaddr $dnsconf{'DefaultTTL'} PTR $hname.$dnsconf{'Domain'}.\n";
#      } else {
#        print DUP "update add $ipaddr $dnsconf{'DefaultTTL'} PTR $dnsconf{'Domain'}.\n";
#      }
#    }
#    print DUP "send\n";
#  }
#}
  open(ZONE,">zones/domain.ext");
  chmod(0600,"zones/domain.ext");
  print ZONE<<__EOB__;
@                        $dnsconf{'DefaultTTL'} IN     SOA   $dnsconf{'Domain'}.     info (
                                           $dnsconf{'Serial'} ; serial
                                           $dnsconf{'Refresh'}
                                           $dnsconf{'Retry'}
                                           $dnsconf{'Expire'}
                                           $dnsconf{'DefaultTTL'})
                         $dnsconf{'DefaultTTL'} IN     NS    $dnsconf{'Hostname'}.$dnsconf{'Domain'}.
__EOB__
  printf ZONE ("%-25s%s IN     %-5s %s.\n","www",$dnsconf{'DefaultTTL'},"CNAME",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s %s.\n","mail",$dnsconf{'DefaultTTL'},"CNAME",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 4569 %s.\n","_iax._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 5060 %s.\n","_sip._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 5060 %s.\n","_sip._tcp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 5061 %s.\n","_sips._tcp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  printf ZONE ("%-25s%s IN     %-5s 0 1 3478 %s.\n","_stun._udp",$dnsconf{'DefaultTTL'},"SRV",$fqdn);
  $ldom=$dnsconf{'Domain'};
#  foreach $edns (@extdns) {
#    @words=split(/\|/,$edns);
#    if (@words[0] ne "A") {
#      @words[1].=".";
#    }
#    @words[1]=join(" ",split(/_/,@words[1]));
#    printf ZONE ("%-25s%s IN     %-5s %s\n",@words[2],$dnsconf{'DefaultTTL'},@words[0],join(" ",split(/_/,@words[1])));
#    if (@words[0] eq "NS") {
#      $allowtx{$ldom}.=",@words[1]";
#    }

#    if (@words[2] ne "") {
#      print DUP2 "update delete @words[2] @words[0]\n";
#      print DUP2 "update add @words[2] $dnsconf{'DefaultTTL'} @words[0] @words[1]\n";
#    } else {
#      print DUP2 "update delete $dnsconf{'Domain'}. @words[0]\n";
#      print DUP2 "update add $dnsconf{'Domain'}. $dnsconf{'DefaultTTL'} @words[0] @words[1]\n";
#    }
#  }
#  print DUP2 "send\n";
#  close(DUP2);

  close(ZONE);
  $txout="";
  @txsite=split(/,/,$allowtx{$ldom});
  shift @txsite;
  foreach $txs (@txsite) {
    $txout .="                        $txs;\n";
  }
if (! $dnsall ) {
  print DNS<<__EOB__;
};
view "external" {
       allow-query {
               any;
       };
       match-clients {
               any;
       };
__EOB__

  if (($dnsconf{'ExtServ'}) || ($sysconf{'Internal'} eq $sysconf{'External'})) {
    if ((($sysconf{'PrimaryDns'} ne "") || ($sysconf{'SecondaryDns'} ne "")) && ($dnsconf{'Usepeer'} ne "true")) {
      print DNS<<__EOB__;
         forward first;
         forwarders {
__EOB__
      if ($sysconf{'PrimaryDns'} ne "") {
        print DNS "               $sysconf{'PrimaryDns'};\n";
      }
      if ($sysconf{'SecondaryDns'} ne "") {
        print DNS "               $sysconf{'SecondaryDns'};\n";
      }
      print DNS<<__EOB__;
       };
__EOB__
    } elsif (($sysconf{'External'} eq "Dialup") && ($dnsconf{'Usepeer'} ne "true")) {
      print DNS "#FWD\n";
    }
    print DNS<<__EOB__;
       recursion yes;
       zone "." {
               type hint;
               file "root.cache";
       };
__EOB__
  } else {
       print DNS<<__EOB__;
       recursion no;
__EOB__
  }

    if ($dnsconf{'AuthX'} eq "true") {
      $extmasts="";
      if ( -e "/etc/dns.master") {
        open(DEM,"/etc/dns.master");
        while(<DEM>) {
          chop($_);
          @dmemasters=split(/\,/,$_);
        }
        foreach $dmemast (@dmemasters) {
          $extmasts.="\n                        " . $dmemast . ";";
        }
        close(DEM);
      }
      print DNS<<__EOB__;
       zone "$dnsconf{'Domain'}" {
              type master;
              notify yes;
              file "domain.ext";
              allow-transfer {
                        127.0.0.2;$extmasts
$txout              };
              allow-update {
                        key $dnsconf{'Domain'};
              };
              check-names ignore;
       };
__EOB__
    }

  foreach $hdom (@hosted) {
    $txout="";
    @txsite=split(/,/,$allowtx{$hdom});
    shift @txsite;
    foreach $txs (@txsite) {
      $txout .="                        $txs;\n";
    }
    chop $txout;
    print DNS<<__EOB__;
       zone "$hdom" {
              type master;
              notify yes;
              file "$hdom";
              also-notify {
                     127.0.0.1;
              };
              allow-transfer {
                        127.0.0.1/32;
$txout
              };
__EOB__
    if ($tsig{$hdom}) {
    push(@idnszones,$hdom);
  print DNS<<__EOB__;
              allow-update {
                        key $hdom;
                        key $dnsconf{'Domain'};
              };
              check-names ignore;
__EOB__
    } else {
      push(@ednszones,$hdom);
    }
    print DNS<<__EOB__;
       };
__EOB__
  }

  foreach $hdom (@slaves) {
    $txout="";
    @txsite=split(/,/,$allowtx{$hdom});
    shift @txsite;
    foreach $txs (@txsite) {
      $txout .="                        $txs;\n";
    }
    chop $txout;
    if ($txout != "") {
      print DNS<<__EOB__;
       zone "$hdom" {
              type slave;
              file "$hdom";
              allow-notify {
                        any;
              };
              masters {
$txout
              };
__EOB__
      print DNS<<__EOB__;
              check-names ignore;
       };
__EOB__
    }
  }
}
  print DNS "};\n";
  close(DNS);
}


sub printdhcp(){
  $intint=$sysconf{'Internal'};
  @iipdat=split(/\|/,$interface{$intint});

  @revs=();

  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'};
  }


  open(DHCP,">dhcpd.conf");
  chmod(0600,"dhcpd.conf");

  if ($sysconf{'PrimaryWins'} ne "") {
    $wins="option netbios-name-servers $sysconf{'PrimaryWins'}";
    if ($sysconf{'SecondaryWins'} ne "") {
      $wins .=", $sysconf{'SecondaryWins'}";
    }
    $wins.=";";
  } else {
    $wins="option netbios-name-servers @iipdat[1];";
  }
  if ($dnsconf{'IntFirst'} eq "true") {
    $dns=@iipdat[1];
  }
  if ($sysconf{'PrimaryDns'} ne "") {
    if ($dns ne "") {
      $dns.=",$sysconf{'PrimaryDns'}";
    } else {
      $dns="$sysconf{'PrimaryDns'}";
    }
  }
  if ($sysconf{'SecondaryDns'} ne "") {
    $dns.=",$sysconf{'SecondaryDns'}";
  }
  if ($dns eq "") {
    $dns="@iipdat[1]";
  }
print DHCP<<__EOL__;
option wpad-url code 252 = text;
option tftp-cisco-server-name code 150 = ip-address;
option polycom-vlanid code 251 = unsigned integer 16;
option nortel_ipt code 128 = string;

option domain-name "$dnsconf{'Domain'}";
option nis-domain "$dnsconf{'Domain'}";
option domain-name-servers $dns;
option wpad-url "http://$fqdn/proxy.pac";
option tftp-server-name "http://$fqdn";
option time-offset 7200;
option nortel_ipt "Nortel-i2004-A,@iipdat[1]:5000,1,10;@iipdat[1]:5000,1,10.";

__EOL__


if ($sysconf{'DHCPLease'} eq "") {
  $sysconf{'DHCPLease'}=43200;
}
if ($sysconf{'DHCPMaxLease'} eq "") {
  $sysconf{'DHCPMaxLease'}=86400;
}

print DHCP<<__EOL__;
ddns-update-style interim;

default-lease-time $sysconf{'DHCPLease'};
max-lease-time $sysconf{'DHCPMaxLease'};

$wins
__EOL__

#if ($sysconf{'NTPServer'}) {
#  print DHCP "option ntp-servers $fqdn;\n\n";
#}

foreach $iface (@ints){
  if (index($iface,":") eq "-1") {
    @idata=split(/\|/,$interface{$iface});
    if ((@idata[0] eq "Phones") && ($dhcpvid != "")) {
      $dhcpvid=substr(@idata[3],index(@idata[3],".")+1);
      print DHCP "option polycom-vlanid " . $dhcpvid . ";\n";
    }
    $snmask=getsn(@idata[2]);
    $nwaddr=getnw(@idata[2],@idata[1]);
    $bcaddr=getbc(@idata[2],@idata[1]);
    $intip=@idata[1];

    @nwipq=split(/\./,$nwaddr);  

    if ((@idata[4] ne "") && (@idata[4] ne "-")) {
      if (@idata[2] >= 24) {
        $revblk="@nwipq[2].@nwipq[1].@nwipq[0].in-addr.arpa";
        if (! $isrev{$revblk}) {
          $isrev{$revblk}=true;
          push(@revs,$revblk);
          $intduip{$revblk}=@idata[1];
        }
      } elsif ((@idata[2] >= 16 ) && (@idata[2] < 24)) {
        $cnum=(2**(8-(@idata[2] % 8)));
        for($cnt=@nwipq[2];$cnt < (@nwipq[2]+$cnum);$cnt++){
          $revblk="$cnt.@nwipq[1].@nwipq[0].in-addr.arpa";
          if (! $isrev{$revblk}) {
            $isrev{$revblk}=true;
            push(@revs,$revblk);
            $intduip{$revblk}=@idata[1];
          }
        }
      } elsif ((@idata[2] >= 8 ) && (@idata[2] < 16)) {
        $cnum=(2**(8-(@idata[2] % 8)));
        for($cnt=@nwipq[1];$cnt < (@nwipq[1]+$cnum);$cnt++){
          for ($cnt1=0;$cnt1 < 256;$cnt1++) {
            $revblk="$cnt1.$cnt.@nwipq[0].in-addr.arpa";
            if (! $isrev{$revblk}) {
              $isrev{$revblk}=true;
              push(@revs,$revblk);
              $intduip{$revblk}=@idata[1];
            }
          }
        }
      }
      if ($isslaverev{$revblk}) {
        $intduip{$revblk}=$isslaverev{$revblk};
      }
      if ($sysconf{'Internal'} eq @idata[3]) {
        $tftpserv=$intip;
      } else {
        $tftpserv="http://" . $intip;
      }
      if (($sysconf{'Internal'} eq $sysconf{'External'}) && (@idata[3] eq $sysconf{'External'}) && ($dns eq "")) {
        $dnssrv=$sysconf{'Nexthop'};
        $dhroute=$sysconf{'Nexthop'};
      } elsif (($sysconf{'Internal'} eq $sysconf{'External'}) && (@idata[3] eq $sysconf{'External'})) {
        $dnssrv=$dns;
        if ($sysconf{'Nexthop'} != "") {
          $dhroute=$sysconf{'Nexthop'};
        } else {
          $dhroute=@idata[1];
        }
      } else {
        if (@idata[9] != "") {
          $dhroute=@idata[9];
        } else {
          $dhroute=@idata[1];
        }
	if ($dns eq "") {
	        $dnssrv=@idata[1];
	} elsif ($dns ne @idata[1]) {
		if (($dnsconf{'Auth'} eq "false") && ($dnsconf{'IntFirst'} ne "true")) {
	        	$dnssrv=$dns . "," . @idata[1];
		} else {
	        	$dnssrv=@idata[1] . "," . $dns;
		}
	} else {
		$dnssrv=$dns;
	}
      }
      if ($dhroute != "") {
        $dhroute="\n  option routers " . $dhroute . ";";
      }

  if ($sysconf{'PrimaryWins'} eq "") {
    $lwins="\n  option netbios-name-servers @iipdat[1];";
  } else {
    $lwins="";
  }

print DHCP<<__EOL__;

#@idata[0]
subnet $nwaddr netmask $snmask { 
  authoritative;
  range @idata[4] @idata[5];$dhroute
  option ntp-servers @idata[1];
  option domain-name-servers $dnssrv;
  option subnet-mask $snmask;	
  option broadcast-address $bcaddr;
  option tftp-server-name "$tftpserv";$lwins
  option tftp-cisco-server-name @idata[1];
}
__EOL__
    } else {
print DHCP<<__EOL__;

#@idata[0]
subnet $nwaddr netmask $snmask { 
  not authoritative;
}
__EOL__
    }
  }
}


$ethint=$sysconf{'Internal'};
@idata=split(/\|/,$interface{$ethint});
if ($dnsconf{'Auth'} eq "false"){
  $intipa=$sysconf{'PrimaryDns'};
} else {
  $intipa=@idata[1];
}

foreach $wanl (@wans){
  @idata=split(/\|/,$routes{$wanl});
  $snmask=getsn(@idata[2]);
  $nwaddr=getnw(@idata[2],@idata[1]);
  $bcaddr=getbc(@idata[2],@idata[1]);

  @nwipq=split(/\./,$nwaddr);  

  if (@idata[5] ne "") {
    if (@idata[2] >= 24) {
      $revblk="@nwipq[2].@nwipq[1].@nwipq[0].in-addr.arpa";
      if (! $isrev{$revblk}) {
        $isrev{$revblk}=true;
        push(@revs,$revblk);
        $intduip{$revblk}=$intipa;
      }
    } elsif ((@idata[2] >= 16 ) && (@idata[2] < 24)) {
      $cnum=(2**(8-(@idata[2] % 8)));
      for($cnt=@nwipq[2];$cnt < (@nwipq[2]+$cnum);$cnt++){
        $revblk="$cnt.@nwipq[1].@nwipq[0].in-addr.arpa";
        if (! $isrev{$revblk}) {
          $isrev{$revblk}=true;
          push(@revs,$revblk);
          $intduip{$revblk}=$intipa;
        }
      }
    } elsif ((@idata[2] >= 8 ) && (@idata[2] < 16)) {
      $cnum=(2**(8-(@idata[2] % 8)));
      for($cnt=@nwipq[1];$cnt < (@nwipq[1]+$cnum);$cnt++){
        for ($cnt1=0;$cnt1 < 256;$cnt1++) {
          $revblk="$cnt1.$cnt.@nwipq[0].in-addr.arpa";
          if (! $isrev{$revblk}) {
            $isrev{$revblk}=true;
            push(@revs,$revblk);
            $intduip{$revblk}=$intipa;
          }
        }
      }
    }
  print DHCP<<__EOL__;

#@idata[0] Wan Link
subnet $nwaddr netmask $snmask { 
  authoritative;
  range @idata[5] @idata[6];
  option routers @idata[4];
  option subnet-mask $snmask;
  option broadcast-address $bcaddr;
}
__EOL__
  } else {
  print DHCP<<__EOL__;

#@idata[0]
subnet $nwaddr netmask $snmask { 
  not authoritative;
}
__EOL__
  }
}

foreach $hrec (@hsts) {
  @hdata=split(/\|/,$hosts{$hrec});
  if (@hdata[2] ne "") {
  print DHCP<<__EOL__;

host @hdata[0] {
  hardware ethernet @hdata[2];
  fixed-address @hdata[1];
  option host-name "@hdata[0]";
  option tftp-server-name "$fqdn";
  filename "pxelinux.0";
__EOL__
  $bpfile="";
  if ( -e "@hdata[0].cmp") {
    $bpfile="@hdata[0].cmp";
  } 
  if ( -e "@hdata[0].ini") {
    if ($bpfile ne "") {
      $bpfile.=";";
    }
    $bpfile.="@hdata[0].ini";
  }
  if ($bpfile ne "") {
    print DHCP "  filename \"" . $bpfile . "\";\n";
  }
  print DHCP<<__EOL__;
}
__EOL__
  }
}

$ethint=$sysconf{'Internal'};
@idata=split(/\|/,$interface{$ethint});
  print DHCP<<__EOL__;

host $dnsconf{'Hostname'} {
  hardware ethernet @idata[8];
  fixed-address @idata[1];
}
__EOL__


  if (1){

    if ($dnsconf{'DynKey'} ne "") {
      $tsigint=encode_base64($dnsconf{'DynKey'});
      chop $tsigint;
      print DHCP<<__EOB__;

key $dnsconf{'Domain'} {
        algorithm hmac-md5;
        secret $tsigint;
};
__EOB__
      $dnsdhcpkey="\n  key $dnsconf{'Domain'};";
    }
    if (($dnsconf{'Auth'} ne "false") && (@iipdat[1] ne "") && ($intipa ne "")) {
      print DHCP<<__EOL__;

zone $dnsconf{'Domain'}. {
  primary $intipa;$dnsdhcpkey
}
__EOL__
    } elsif ($sysconf{'PrimaryDns'} ne "") {
      print DHCP<<__EOL__;

zone $dnsconf{'Domain'}. {
  primary $sysconf{'PrimaryDns'};$dnsdhcpkey
}
__EOL__
    } elsif ($allowtx{$dnsconf{'Domain'}}) {
      $primdns=substr($allowtx{$dnsconf{'Domain'}},1);
      print DHCP<<__EOL__;

zone $dnsconf{'Domain'}. {
  primary $primdns;$dnsdhcpkey
}
__EOL__
    }
    foreach $cclass (@revs) {
      print DHCP<<__EOL__;

zone $cclass. {
  primary $intduip{$cclass};$dnsdhcpkey
}
__EOL__
    }
}

if ( -e "/etc/dhcpd.conf.local") {
  open(DHLOC,"/etc/dhcpd.conf.local");
  while(<DHLOC>) {
    print DHCP $_;
  }
  close(DHLOC);
}

close(DHCP);
}


sub printconf(){
  print "Interfaces\n";
  foreach $int (@ints) {
    print "$interface{$int}\n";
  }

  print "\nTCP/IP Conf\n";
  foreach $cnf (@scnf) {
    print "$cnf $sysconf{$cnf}\n"; 
  }

  print "\nModem Conf\n";
  foreach $cnf (@mcnf) {
    print "$cnf $mdmconf{$cnf}\n";
  }
}

sub getsn() {
  local($maskbits)=@_;
  if ($maskbits >= 24) {
    $snout="255.255.255";
    $eq="";
  } elsif ($maskbits >= 16) {
    $snout="255.255";
    $eq=".0";
  } elsif ($maskbits >= 8) {
    $snout="255";
    $eq=".0.0";
  }
  
  if ($maskbits eq "32") {
    $snm="255";
  } else {
    $snm=256-(2**(8-($maskbits % 8)));
  }
  return "$snout.$snm$eq";
}


sub getsncount() {
  local($maskbits)=@_;
  $sncount=2**(32-$maskbits);
  return $sncount
}

sub check_ip {
  if ((@_[0] eq "0.0.0.0") || (@_[1] eq "32"))	 {
    $ipaddr=NetAddr::IP->new(@_[0]);
    $ipgw=NetAddr::IP->new(@_[1]);
    return $ipgw->within($ipaddr);
  } else {
    return 0;
  }
}

sub getnw() {
  local($maskbits,$ipaddr)=@_;
  local($nwaddr);
  @ipq=split(/\./,$ipaddr);
 
  $snblk=(2**(8-($maskbits % 8)));

  if ($maskbits eq "32") {
    $nwaddr=$ipaddr;
  } elsif ($maskbits >= 24) {
    $npor=@ipq[3]-(@ipq[3] % $snblk);
    $nwaddr="@ipq[0].@ipq[1].@ipq[2].$npor";
  } elsif ($maskbits >= 16) {
    $npor=@ipq[2]-(@ipq[2] % $snblk);
    $nwaddr="@ipq[0].@ipq[1].$npor.0";
  } elsif ($maskbits >= 8) {
    $npor=@ipq[1]-(@ipq[1] % $snblk);
    $nwaddr="@ipq[0].$npor.0.0";
  }
  return $nwaddr;
}

sub getbc() {
  local($maskbits,$ipaddr)=@_;
  local($bcaddr);
  @ipq=split(/\./,$ipaddr);
 
  $snblk=(2**(8-($maskbits % 8)));

  if ($maskbits eq  "32") {
    $bcaddr=$ipaddr;
  } elsif ($maskbits >= 24) {
    $npor=@ipq[3]-(@ipq[3] % $snblk)+$snblk-1;
    $bcaddr="@ipq[0].@ipq[1].@ipq[2].$npor";
  } elsif ($maskbits >= 16) {
    $npor=@ipq[2]-(@ipq[2] % $snblk)+$snblk-1;
    $bcaddr="@ipq[0].@ipq[1].$npor.255";
  } elsif ($maskbits >= 8) {
    $npor=@ipq[1]-(@ipq[1] % $snblk)+$snblk-1;
    $bcaddr="@ipq[0].$npor.255.255";
  }
  return $bcaddr;
}

sub printemailconf() {
  open(SMMC,">sendmail.mc");
  chmod(0600,"sendmail.mc");
$mailconf{'MaxSize'}=$mailconf{'MaxSize'}*1024*1024;
$mailconf{'Delivery'}=lc($mailconf{'Delivery'});

if ($mailldap{'Login'} eq "") {
  $mailldap{'Login'}=$ldapserv{'Login'};
}

if ($dnsconf{'Hostname'}) {
  $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
} else {
  $fqdn=$dnsconf{'Domain'};
}

#define(`confTRUSTED_USERS', `nobody')

print SMMC<<__EOB__;
divert(-1)

OSTYPE(linux)dnl

divert(0)dnl
VERSIONID(\`\$Id: Network Sentry Config,2007/09/13 Greg Nietsky Exp \$')


define(\`STATUS_FILE',\`/var/db/sendmail.statistics')dnl
define(\`confFORWARD_PATH',\`\$z/.forward.\$w+\$h:\$z/.forward+\$h:\$z/.forward.\$w:\$z/.forward')dnl
define(\`confMAX_HEADERS_LENGTH', \`32768')dnl
define(`confLDAP_CLUSTER', `AllServers')
define(`confLDAP_DEFAULT_SPEC', `-h "$ldapserv{'Replicate'}" -d $mailldap{'Login'} -M simple -P /etc/mail/ldap')dnl
LDAPROUTE_DOMAIN_FILE(`\@LDAP')dnl
FEATURE(`ldap_routing')dnl
VIRTUSER_DOMAIN_FILE(`\@ldap:-k (&(objectClass=sendmailMTAClass)(sendmailMTAClassName=LDAPRoute)) -v sendmailMTAClassValue')dnl
FEATURE(`virtusertable',`LDAP')dnl
RELAY_DOMAIN_FILE(`\@LDAP')dnl
FEATURE(`access_db',`LDAP')dnl
FEATURE(`mailertable', `LDAP')dnl
FEATURE(`domaintable', `LDAP')dnl
FEATURE(`authinfo',`LDAP')dnl
define(`ALIAS_FILE', `ldap:')dnl
MASQUERADE_AS(`$dnsconf{'Domain'}')dnl
MASQUERADE_DOMAIN_FILE(`\@LDAP')dnl
FEATURE(`local_no_masquerade')
FEATURE(`limited_masquerade')
FEATURE(`masquerade_envelope')
FEATURE(`masquerade_entire_domain')
__EOB__

#FEATURE(`virtusertable',`ldap:-1 -k (&(objectClass=inetLocalMailRecipient)(mailLocalAddress=%0)) -v mailRoutingAddress')dnl
#LOCAL_DOMAIN(`\@ldap:-k (&(objectClass=sendmailMTAClass)(sendmailMTAClassName=LDAPRoute)) -v sendmailMTAClassValue')dnl

if ($sysconfig{'Type'} eq "full") {
  print SMMC<<__EOB__;
define(\`confDELIVERY_MODE',\`$mailconf{'Delivery'}')dnl
define(\`confMAX_MESSAGE_SIZE',\`$mailconf{'MaxSize'}')
define(\`SMART_HOST',\`$mailconf{'Smarthost'}')
define(`confCACERT_PATH', `/etc/ipsec.d/certs/')
define(`confSERVER_CERT', `/etc/openssl/server.signed.pem')
define(`confSERVER_KEY', `/etc/openssl/serverkey.pem')
define(`confAUTH_MECHANISMS', `LOGIN PLAIN')dnl
TRUST_AUTH_MECH(`LOGIN PLAIN')dnl
__EOB__
    if ( -e "/etc/ipsec.d/cacerts/server_cacert.pem" ) {
      print SMMC "define(`confCACERT', `/etc/ipsec.d/cacerts/server_cacert.pem')\n";
      if ( -e "/etc/ipsec.d/cacerts/server_cacert.pem" ) {
        print SMMC "define(`confCRL', `/etc/ipsec.d/crls/server_crl.pem')\n";
      }
    } else {
      print SMMC "define(`confCACERT', `/etc/ipsec.d/cacerts/cacert.pem')\n";
      print SMMC "define(`confCRL', `/etc/ipsec.d/crls/crl.pem')\n";
    }
  } else {
  print SMMC<<__EOB__;
define(\`confDELIVERY_MODE',\`background')dnl
__EOB__
  }
print SMMC "define(\`confDOMAIN_NAME',\`$fqdn')dnl\n";

#if (($pmailx eq $fqdn) && ($dnsconf{'Domain'} ne $fqdn)) {
#  print SMMC "MASQUERADE_AS(\`$dnsconf{'Domain'}')\n";
#  print SMMC "MASQUERADE_DOMAIN(\`$fqdn\')\n";
#  print SMMC "FEATURE(\`limited_masquerade')\n";
#  print SMMC "FEATURE(\`masquerade_envelope')\n";
#}


print SMMC "FEATURE(\`always_add_domain',\`$dnsconf{'Domain'}')\n";

print SMMC<<__EOB__;
define(\`confPRIVACY_FLAGS',\`goaway')

__EOB__
if (($mailconf{'AntiSpam'} eq "true") && ($sysconfig{'Type'} eq "full")) {
print SMMC<<__EOB__;
FEATURE(`delay_checks')dnl
FEATURE(`dnsbl',`dnsbl.sorbs.net',`"554 Rejected " $&{client_addr} " found in dnsbl.sorbs.net"')dnl
__EOB__
}
#FEATURE(\`dnsbl', \`relays.ordb.org', \`550 Rejected - see http://ordb.org/')dnl
print SMMC<<__EOB__;
FEATURE(\`redirect')dnl
FEATURE(\`local_procmail',\`/usr/libexec/dovecot/deliver',\`/usr/libexec/dovecot/deliver -d \$u')

MAILER(dovecot)dnl
MAILER(local)dnl
MAILER(smtp)dnl

LOCAL_CONFIG
H?M?Envelope-To: \$u
F{w}\@ldap:-k (&(objectClass=sendmailMTAClass)(sendmailMTAClassName=LDAPRoute)) -v sendmailMTAClassValue
C{w}$fqdn
__EOB__

if ($fqdn ne $dnsconf{'Domain'}) {
  print SMMC "C{M}" . $fqdn . "\n";
}

  close(SMMC);

  open(SMSC,">submit.mc");
  chmod(0600,"submit.mc");
  print SMSC<<__EOB__;
divert(-1)
divert(0)dnl
VERSIONID(`\$Id: submit.mc,v 8.6.2.7 2004/12/20 22:11:56 ca Exp \$')
define(`confCF_VERSION', `Submit')dnl
define(`__OSTYPE__',`')dnl dirty hack to keep proto.m4 from complaining
define(`_USE_DECNET_SYNTAX_', `1')dnl support DECnet
define(`confTIME_ZONE', `USE_TZ')dnl
define(`confDONT_INIT_GROUPS', `True')dnl
dnl
dnl If you use IPv6 only, change [127.0.0.1] to [IPv6:::1]
FEATURE(`msp', `[127.0.0.1]')dnl

LOCAL_CONFIG
Twww
Tmajordomo
__EOB__
  close(SMSC);

}


sub printmscanconf() {

  open(MSCF,">mailscanner.conf");
  chmod(0600,"mailscaner.conf");

  $mailconf{'Delivery'}=lc($mailconf{'Delivery'});
 
  if (($mailconf{'Delivery'} eq "deffered") || ($mailconf{'Delivery'} eq "queue")){
    $mscandel="queue";
  } else {
    $mscandel="batch";
  }

  if ($mailconf{'Quarantine'} eq "true") {
    $mscanq="yes";
  } else {
    $mscanq="no";
  }

  if ($mailconf{'AlertSender'} eq "true") {
    $mscanas="yes";
  } else {
    $mscanas="no";
  }

  if ($mailconf{'IFrame'} eq "true") {
    $mscanif="yes";
  } else {
    $mscanif="no";
  }

  if ($mailconf{'Object'} eq "true") {
    $mscanob="yes";
  } else {
    $mscanob="no";
  }

  if ($mailconf{'HTML'} eq "true") {
    $mscanhtml="yes";
  } else {
    $mscanhtml="no";
  }


  if ($mailconf{'MaxScore'} ne "") {
    $mscanst=$mailconf{'MaxScore'};
  } else {
    $mscanst="5";
  }

  if ($mailconf{'MinScore'} ne "") {
    $mscanse=$mailconf{'MinScore'};
  } else {
    $mscanse="0";
  }

  if ($mailconf{'ScanChildren'} eq "") {
    $mailconf{'ScanChildren'}="5";
  }

  if ($mailconf{'Archive'} eq "true") {
    $marchive="\nArchive Mail = /var/spool/mailscanner/archive\n";
  }
  
  if ($mailconf{'Rescan'} eq "") {
    $sinterval=10;
  } elsif ($mailconf{'Rescan'} < 5) {
    $sinterval=$mailconf{'Rescan'}*15;
  } else {
    $sinterval=$mailconf{'Rescan'};
  }

  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'};
  }

  if ($mailconf{'ZipLevel'} eq "") {
    $mailconf{'ZipLevel'}="0";
  }

  if ($mailconf{'AntiSpam'} eq "true") {
    $AntiSpam="SORBS-DNSBL";
  } else {
    $AntiSpam="";
  }
  

  if ((-e "/opt/MailScanner/etc/reports/en/inline.sig.txt") && (-e "/opt/MailScanner/etc/reports/en/inline.sig.html")) {
    $msgsign="yes";
  } else {
    $msgsign="no";
  }

print MSCF<<__EOF__;
%etc-dir% = /opt/MailScanner/etc
%mcp-dir% = /opt/MailScanner/etc/mcp
%org-long-name% = $fqdn
%org-name% = $dnsconf{'Domain'}
%report-dir% = /opt/MailScanner/etc/reports/en
%rules-dir% = /opt/MailScanner/etc/rules
%web-site% = www.$dnsconf{'Domain'}
Add Envelope From Header = yes
Add Envelope To Header = no
Add Watermark = yes
Allow External Message Bodies = no
Allow Filenames =
Allow Filetypes =
Allow Form Tags = yes
Allow IFrame Tags = $mscanif
Allow Object Codebase Tags = $mscanob
Allow Partial Messages = no
Allow Password-Protected Archives = no
Allow Script Tags = disarm
Allow WebBugs = disarm
Allowed Sophos Error Messages =
Also Find Numeric Phishing = yes
Always Include MCP Report = no
Always Include SpamAssassin Report = no
Always Looked Up Last = no
Always Looked Up Last After Batch = no$marchive
Attach Image To HTML Message Only = yes
Attach Image To Signature = no
Attachment Encoding Charset = ISO-8859-1
Attachment Extensions Not To Zip = .zip .rar .gz .tgz .jpg .jpeg .mpg .mpe .mpeg .mp3 .rpm .htm .html .eml
Attachment Warning Filename = %org-name%-Attachment-Warning.txt
Attachments Min Total Size To Zip = 100k
Attachments Zip Filename = MessageAttachments.zip
Block Encrypted Messages = no
Block Unencrypted Messages = no
Bounce MCP As Attachment = no
Bounce Spam As Attachment = no
Cache SpamAssassin Results = yes
Check SpamAssassin If On Spam List = yes
Check Watermarks To Skip Spam Checks = yes
Check Watermarks With No Sender = yes
ClamAV Full Message Scan = yes
ClamAVmodule Maximum Compression Ratio = 250
ClamAVmodule Maximum File Size = 10000000 # (10 Mbytes)
ClamAVmodule Maximum Files = 1000
ClamAVmodule Maximum Recursion Level = 8
Clamd Lock File = # /var/lock/subsys/clamd
Clamd Port = 3310
Clamd Socket = /tmp/clamd
Clamd Use Threads = yes
Clean Header Value       = Found to be clean
Content Modify Subject = start
Content Subject Text = {BLOCKED}
Convert Dangerous HTML To Text = $mscanhtml
Convert HTML To Text = no
Country Sub-Domains List = %etc-dir%/country.domains.conf
Custom Functions Dir = /opt/MailScanner/lib/MailScanner/CustomFunctions
Custom Spam Scanner Timeout = 20
Custom Spam Scanner Timeout History = 20
Dangerous Content Scanning = yes
Debug = no
Debug SpamAssassin = no
Definite MCP Is High Scoring = no
Definite Spam Is High Scoring = no
Deleted Bad Content Message Report  = %report-dir%/deleted.content.message.txt
Deleted Bad Filename Message Report = %report-dir%/deleted.filename.message.txt
Deleted Size Message Report        = %report-dir%/deleted.size.message.txt
Deleted Virus Message Report        = %report-dir%/deleted.virus.message.txt
Deliver Cleaned Messages = yes
Deliver Disinfected Files = no
Deliver In Background = yes
Deliver Unparsable TNEF = no
Delivery Method = $mscandel
Deny Filenames =
Deny Filetypes =
Detailed MCP Report = yes
Detailed Spam Report = yes
Disarmed Modify Subject = start
Disarmed Subject Text = {DISARMED}
Disinfected Header Value = Disinfected
Disinfected Report = %report-dir%/disinfected.report.txt
Enable Spam Bounce = %rules-dir%/bounce.rules
Envelope From Header = X-%org-name%-MailScanner-From:
Envelope To Header = X-%org-name%-MailScanner-To:
Expand TNEF = yes
File Command = #/usr/bin/file
File Timeout = 20
Filename Modify Subject = start
Filename Rules = %etc-dir%/filename.rules.conf
Filename Subject Text = {BLOCKED}
Filetype Rules = %etc-dir%/filetype.rules.conf
Find Archives By Content = yes
Find Phishing Fraud = yes
Find UU-Encoded Files = yes
First Check = mcp
Gunzip Command = /usr/bin/gunzip
Gunzip Timeout = 50
Hide Incoming Work Dir = yes
Hide Incoming Work Dir in Notices = yes
High Scoring MCP Actions = deliver
High Scoring MCP Modify Subject = start
High Scoring MCP Subject Text = {MCP?}
High Scoring Spam Actions = delete
High Scoring Spam Modify Subject = start
High Scoring Spam Subject Text = {SPAM}
High SpamAssassin Score = $mscanst
Highlight Phishing Fraud = yes
Hostname = the %org-name% (\$HOSTNAME) MailScanner
Ignore Spam Whitelist If Recipients Exceed = 20
Ignored Web Bug Filenames = spacer pixel.gif pixel.png gap
Include Scanner Name In Reports = yes
Include Scores In MCP Report = no
Include Scores In SpamAssassin Report = yes
Incoming Queue Dir = /var/spool/mqueue.in
Incoming Work Dir = /var/spool/mailscanner/incoming
Incoming Work Group =
Incoming Work Permissions = 0600
Incoming Work User =
Infected Header Value    = Found to be infected
Information Header = X-%org-name%-MailScanner-Information:
Information Header Value = Please contact Network Sentry  for more information (www.networksentry.co.za)
Inline HTML Signature = %report-dir%/inline.sig.html
Inline HTML Warning = %report-dir%/inline.warning.html
Inline Spam Warning = %report-dir%/inline.spam.warning.txt
Inline Text Signature = %report-dir%/inline.sig.txt
Inline Text Warning = %report-dir%/inline.warning.txt
Is Definitely MCP = no
Is Definitely Not MCP = no
Is Definitely Not Spam = %rules-dir%/spam.whitelist.rules
Is Definitely Spam = no
Keep Spam And MCP Archive Clean = no
Known Web Bug Servers = msgtag.com
Language Strings = %report-dir%/languages.conf
Local Postmaster = postmaster
Lock Type = flock
Lockfile Dir = /var/run
Log Dangerous HTML Tags = no
Log MCP = no
Log Non Spam = yes
Log Permitted Filenames = no
Log Permitted Filetypes = no
Log Silent Viruses = yes
Log Spam = yes
Log Speed = yes
MCP Actions = deliver
MCP Checks = no
MCP Error Score = 1
MCP Header = X-%org-name%-MailScanner-MCPCheck:
MCP High SpamAssassin Score = 10
MCP Max SpamAssassin Size = 100k
MCP Max SpamAssassin Timeouts = 20
MCP Modify Subject = start
MCP Required SpamAssassin Score = 1
MCP SpamAssassin Default Rules Dir = %mcp-dir%
MCP SpamAssassin Install Prefix = %mcp-dir%
MCP SpamAssassin Local Rules Dir = %mcp-dir%
MCP SpamAssassin Prefs File = %mcp-dir%/mcp.spam.assassin.prefs.conf
MCP SpamAssassin Timeout = 10
MCP SpamAssassin User State Dir =
MCP Subject Text = {MCP?}
MTA = sendmail
Mail Header = X-%org-name%-MailScanner:
MailScanner Version Number = 4.62.9
Mark Infected Messages = yes
Mark Unscanned Messages = yes
Max Children = $mailconf{'ScanChildren'}
Max Custom Spam Scanner Size = 20k
Max Custom Spam Scanner Timeouts = 10
Max Normal Queue Size = 800
Max Spam Check Size = 150000
Max Spam List Timeouts = 7
Max SpamAssassin Size = 100k
Max SpamAssassin Timeouts = 10
Max Unsafe Bytes Per Scan = 50m
Max Unsafe Messages Per Scan = 30
Max Unscanned Bytes Per Scan = 100m
Max Unscanned Messages Per Scan = 30
Maximum Archive Depth = $mailconf{'ZipLevel'}
Maximum Attachment Size = -1
Maximum Attachments Per Message = 200
Maximum Message Size = %rules-dir%/max.message.size.rules
Minimum Attachment Size = -1
Minimum Code Status = supported
Minimum Stars If On Spam List = 0
Monitors For Sophos Updates = /usr/local/Sophos/ide/*ides.zip
Monitors for ClamAV Updates = /var/spool/avirus/*.inc/* /var/spool/avirus/*.cvd
Multiple Headers = replace
Never Notify Senders Of Precedence = list bulk
Non MCP Actions = deliver
Non Spam Actions = deliver header "X-Spam-Status: No"
Non-Forging Viruses = Joke/ OF97/ WM97/ W97M/ eicar
Notice Signature = \\n---\\nNetwork Sentry Email Protection Administrator Alert\\n
Notices From = MailScanner
Notices Include Full Headers = no
Notices To = postmaster
Notify Senders = no
Notify Senders Of Blocked Filenames Or Filetypes = yes
Notify Senders Of Blocked Size Attachments = no
Notify Senders Of Other Blocked Content = yes
Notify Senders Of Viruses = no
Outgoing Queue Dir = /var/spool/mqueue
PID file = /var/run/mailscanner.pid
Phishing Modify Subject = yes
Phishing Safe Sites File = %etc-dir%/phishing.safe.sites.conf
Phishing Subject Text = {FRAUD}
Quarantine Dir = /var/spool/mailscanner/quarantine
Quarantine Group =
Quarantine Infections = $mscanq
Quarantine Modified Body = no
Quarantine Permissions = 0600
Quarantine Silent Viruses = no
Quarantine User =
Quarantine Whole Message = no
Quarantine Whole Messages As Queue Files = no
Queue Scan Interval = $sinterval
Rebuild Bayes Every = 0
Recipient MCP Report = %report-dir%/recipient.mcp.report.txt
Recipient Spam Report = %report-dir%/recipient.spam.report.txt
Reject Message = no
Rejection Report = %report-dir%/rejection.report.txt
Remove These Headers = X-Mozilla-Status: X-Mozilla-Status2:
Required SpamAssassin Score = $mscanse
Restart Every = 3600
Run As Group =
Run As User =
Run In Foreground = no
Scan Messages = yes
Scanned Modify Subject = no # end
Scanned Subject Text = {Scanned}
Send Notices = yes
Sender Bad Filename Report = %report-dir%/sender.filename.report.txt
Sender Content Report        = %report-dir%/sender.content.report.txt
Sender Error Report        = %report-dir%/sender.error.report.txt
Sender MCP Report = %report-dir%/sender.mcp.report.txt
Sender Size Report         = %report-dir%/sender.size.report.txt
Sender Spam List Report    = %report-dir%/sender.spam.rbl.report.txt
Sender Spam Report         = %report-dir%/sender.spam.report.txt
Sender SpamAssassin Report = %report-dir%/sender.spam.sa.report.txt
Sender Virus Report        = %report-dir%/sender.virus.report.txt
Sendmail = /usr/sbin/sendmail
Sendmail2 = /usr/sbin/sendmail
Sign Clean Messages = $msgsign
Sign Messages Already Processed = no
Signature Image <img> Filename = signature.jpg
Signature Image Filename = %report-dir%/sig.jpg
Silent Viruses = HTML-IFrame All-Viruses
Size Modify Subject = start
Size Subject Text = {SIZE}
Sophos IDE Dir = /usr/local/Sophos/ide
Sophos Lib Dir = /usr/local/Sophos/lib
Spam Actions = striphtml deliver header "X-Spam-Status: Yes"
Spam Checks = yes
Spam Domain List =
Spam Header = X-%org-name%-MailScanner-SpamCheck:
Spam List = $AntiSpam
Spam List Definitions = %etc-dir%/spam.lists.conf
Spam List Timeout = 10
Spam List Timeouts History = 10
Spam Lists To Be Spam = 1
Spam Lists To Reach High Score = 3
Spam Modify Subject = start
Spam Score = yes
Spam Score Character = s
Spam Score Header = X-%org-name%-MailScanner-SpamScore:
Spam Score Number Format = %d
Spam Subject Text = {SPAM}
SpamAssassin Auto Whitelist = no
SpamAssassin Cache Database File = /var/spool/mailscanner/incoming/SpamAssassin.cache.db
SpamAssassin Cache Timings = 1800,300,10800,172800,600
SpamAssassin Default Rules Dir =
SpamAssassin Install Prefix =
SpamAssassin Local Rules Dir =
SpamAssassin Local State Dir = # /var/lib/spamassassin
SpamAssassin Rule Actions =
SpamAssassin Site Rules Dir = /etc/mail/spamassassin
SpamAssassin Temporary Dir = /var/spool/mailscanner/incoming/SpamAssassin-Temp
SpamAssassin Timeout = 75
SpamAssassin Timeouts History = 30
SpamAssassin User State Dir =
SpamScore Number Instead Of Stars = no
Split Exim Spool = no
Still Deliver Silent Viruses = no
Stored Bad Content Message Report  = %report-dir%/stored.content.message.txt
Stored Bad Filename Message Report = %report-dir%/stored.filename.message.txt
Stored Size Message Report        = %report-dir%/stored.size.message.txt
Stored Virus Message Report        = %report-dir%/stored.virus.message.txt
Syslog Facility = mail
TNEF Expander = /opt/MailScanner/bin/tnef --maxsize=100000000
TNEF Timeout = 120
Treat Invalid Watermarks With No Sender as Spam = nothing
Unrar Command = /usr/bin/unrar
Unrar Timeout = 50
Unscanned Header Value = Not scanned: please contact your Internet E-Mail Service Provider for details
Use Custom Spam Scanner = no
Use Default Rules With Multiple Recipients = no
Use SpamAssassin = yes
Use Stricter Phishing Net = yes
Use TNEF Contents = replace
Use Watermarking = yes
Virus Modify Subject = start
Virus Scanner Definitions = %etc-dir%/virus.scanners.conf
Virus Scanner Timeout = 300
Virus Scanners = clamd
Virus Scanning = yes
Virus Subject Text = {VIRUS}
Wait During Bayes Rebuild = no
Warning Is Attachment = yes
Watermark Header = X-%org-name%-MailScanner-Watermark:
Watermark Lifetime = 604800
Watermark Secret = %org-name%-WilliWonka
Web Bug Replacement = http://www.sng.ecs.soton.ac.uk/mailscanner/images/1x1spacer.gif
Zip Attachments = no
__EOF__

}


sub setldapdom() {

  if ($sysconfig{'Type'} eq "full") {
    $ldap = Net::LDAPS->new($repmaster,port=>"636",verify => 'none',timeout => "10");
  } else {
    $ldap = Net::LDAP->new($repmaster,timeout => "10");
  }

  if ($ldap ne "") {
    $ldap->bind($ldapserv{'Login'},password => $ldapserv{'Password'});

    %lrhash = ( sendmailMTAClassValue => $dnsconf{'Domain'});

    if ($dnsconf{'Hostname'}) {
      $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
    } else {
      $fqdn=$dnsconf{'Domain'};
    }

    if ($pmailx eq $fqdn) {
      $mesg = $ldap->search(base=>"ou=Email",filter =>"(&(objectClass=sendmailMTAClass)(sendmailMTAClassName=LDAPRoute))",
                            attrs=>['sendmailMTAClassValue']);

      $gotdom="false";
      while($entry = $mesg->shift_entry) {
         @cent=$entry->get_value("sendmailMTAClassValue");
         $nume=scalar(@cent);
         if (($nume == 1) && (@cent[0] ne $dnsconf{'Domain'}) && (@cent[0] ne $fqdn)) {
           $ldap->modify("sendmailMTAClassName=LDAPRoute,ou=Email",replace => { %lrhash });
           $ldap->modify("sendmailMTAClassName=R,ou=Email",add => { %lrhash });
         }
         foreach $rent (@cent) {
           if (($rent eq $dnsconf{'Domain'}) || ($rent eq $fqdn)) {
             $gotdom="true";
           }
         }
      }
      if ($gotdom eq "false") {
        $ldap->modify("sendmailMTAClassName=LDAPRoute,ou=Email",add => { %lrhash });
      }
    } else {
      $mesg = $ldap->search(base=>"ou=Email",filter =>"(&(objectClass=sendmailMTAClass)(sendmailMTAClassName=LDAPRoute))",
                            attrs=>['sendmailMTAClassValue']);

      while($entry = $mesg->shift_entry) {
         @cent=$entry->get_value("sendmailMTAClassValue");
         $nume=scalar(@cent);
         if (($nume == 1) && (@cent[0] ne $fqdn)) {
           $ldap->modify("sendmailMTAClassName=LDAPRoute,ou=Email",replace => { sendmailMTAClassValue => $fqdn });
         }
      }

      $mesg = $ldap->search(base=>"ou=Email",filter =>"(&(objectClass=sendmailMTAClass)(sendmailMTAClassName=R))",
                            attrs=>['sendmailMTAClassValue']);

      $gotdom="false";
      while($entry = $mesg->shift_entry) {
        @cent=$entry->get_value("sendmailMTAClassValue");
        foreach $rent (@cent) {
          if ($rent eq $dnsconf{'Domain'}) {
            $gotdom="true";
          }
        }
      }
      if ($gotdom eq "false") {
        $ldap->modify("sendmailMTAClassName=R,ou=Email",add => { %lrhash });
      }
    }

    foreach $abook (@ldapbook) {
      $nabook="cn=$abook";
      $addrbook{$nabook}=1;
    }

    $mesg = $ldap->search(base=>"cn=Addressbooks",filter =>"(&(cn=Addressbooks)(objectClass=groupofnames))",
                        attrs=>['member']);

    while($entry = $mesg->shift_entry) {
      @members=$entry->get_value("member");
      foreach $abook (@members) {
        if ($addrbook{$abook} eq 1) {
          $addrbook{$abook}=0;
        } else {
          push(@delbook,$abook);
        }
      }
    }


    foreach $abook (@ldapbook) {
      $nabook="cn=$abook";
      if ($addrbook{$nabook} eq 1) {
        $ldap->modify("cn=Addressbooks",add => { member => $nabook });
      }
    }

    foreach $abook (@delbook) {
      $ldap->modify("cn=Addressbooks",delete => { member => $abook });
    }
  }
}


sub printradpmap() {
  open(RC,">port-id-map");
  chmod(0600,"port-id-map");

  open(MC,">mgetty.conf");
  chmod(0600,"mgetty.conf");

  open(IT,">inittab");
  chmod(0600,"inittab");

  print MC<<__EOF__;
debug 4
data-only y

__EOF__


  $idnum=1;

  $conntype{'Dialup'}="dial";
  $conntype{'Leased'}="lease";

  $porttype{'Async'}="0";
  $porttype{'ISDN'}="2";
  $porttype{'ISDN-V120'}="3";
  $porttype{'ISDN-V110'}="4";
  $porttype{'xDSL'}="16";

  foreach $rlink (@radlink) {
    @lidata=split(/\|/,$rlink);
    @lidata[3]=$conntype{@lidata[3]};
    @lidata[5]=$porttype{@lidata[5]};

    $port=shift(@lidata);
    $pdat=join("\t",$port,$idnum,@lidata);
    print RC "$pdat\n";

    @portd=split(/\/dev\//,$port);

    print MC "port @portd[1]\n  speed @lidata[3]\n  post-init-chat \"\" ATL0M0 OK\n";
    if (@lidata[2] ne "dial") {
      print MC "  direct y\n";
    }

    print IT "ML$idnum:3:respawn:/usr/sbin/mgetty @portd[1]\n";

    print MC "\n";
    $idnum++;

  }
  close(RC);
  close(MC);
  close(IT);
}



sub printradserver() {
  open(RC,">radcserver");
  chmod(0600,"radcserver");
  printf RC ("%-50s%s\n",$radserver,$radssecret);
  close(RC);

  open(RC,">radiusclient.conf");
  chmod(0600,"radiusclient.conf");

print RC<<__EOF__;
auth_order	radius
login_tries	4
login_timeout	60
nologin		/etc/nologin
issue		/etc/issue
authserver	$radserver:$radauport
acctserver	$radserver:$radacport
servers		/etc/radiusclient/servers
dictionary	/etc/radiusclient/dictionary
login_radius	/usr/sbin/login.radius
seqfile		/var/run/radius.seq
mapfile		/etc/radiusclient/port-id-map
default_realm
radius_timeout	10
radius_retries	3
login_local	/bin/login
__EOF__

  close(RC);

}


sub printradclient() {
  open(RC,">clients.conf");
  chmod(0600,"clients.conf");

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

  print RC<<__EOB__;
client 127.0.0.1 {
	secret      = $radssecret
	shortname   = localhost
	nastype     = other
}

client $localip {
       secret      = $radssecret
       shortname   = internal
       nastype     = other
}


__EOB__

  foreach $radent (@radclient) {
  @rcdat=split(/\|/,$radent);
print RC<<__EOB__;
client @rcdat[0] {
	secret      = @rcdat[1]
	shortname   = @rcdat[2]
	nastype     = other
}

__EOB__
}
  close(RC);
}


sub printradrealm() {
  open(RR,">proxy.conf");
  chmod(0600,"proxy.conf");

print RR<<__EOB__;
proxy server {
        synchronous = no
        retry_delay = 5
        retry_count = 3
        dead_time = 120
        servers_per_realm = 15
        default_fallback = yes
}

realm $dnsconf{'Domain'} {
       type        = radius
       authhost    = LOCAL
       accthost    = LOCAL
}
__EOB__

foreach $radent (@radrealm) {
  @rrdat=split(/\|/,$radent);
  if (@rrdat[4] eq "true" ){
    @rrdat[4]="       nostrip\n";
  } else {
    @rrdat[4]="";
  }

  if (@rrdat[5] ne "" ){
    @rrdat[5]="       secret      = @rrdat[5]\n";
  } else {
    @rrdat[5]="";
  }

  if (@rrdat[3] eq "true" ){
    @rrdat[3]="       ldflag      = round_robin\n";
  } else {
    @rrdat[3]="";
  }

  if (index(@rrdat[1],"127.0.0.1") ne "-1") {
    @rrdat[1]="LOCAL";
    @rrdat[5]="";
    @rrdat[3]="";
  }

  if (index(@rrdat[2],"127.0.0.1") ne "-1") {
    @rrdat[2]="LOCAL";
  }

  
print RR<<__EOB__;
realm @rrdat[0] {
       type        = radius
       authhost    = @rrdat[1]
       accthost    = @rrdat[2]
@rrdat[5]@rrdat[3]@rrdat[4]}

__EOB__
}

#print RR<<__EOB__;
#realm DEFAULT {
#        type            = radius
#        authhost        = LOCAL
#        accthost        = LOCAL
#}
#__EOB__
  close(RR);
}


sub printautofsconf() {
  open(AFMC,">autofs.conf");
  open(AMRC,">rc.mount");
  open(UPEX,">exclude.nfs");
  chmod(0600,"autofs.conf");
  chmod(0600,"exclude.nfs");
  print AMRC<<__EOB__;
#!/bin/bash

#Stop Automount
AMPID=`/bin/pidof automount`
if [ "\$AMPID" ];then
  while [ "\$AMPID" ] && [ "\$KFLAG" != "aaaaaaaaaaaaaaa" ];do
    killall -USR2 automount
    sleep 1
    AMPID=`/bin/pidof automount`
    KFLAG=a\$KFLAG
  done
fi;

#Allow CD To Be Ejected
echo 0 > /proc/sys/dev/cdrom/lock

#Start Automounter
automount -t 180 /mnt/autofs file /etc/autofs.conf

#Bind Mounts
__EOB__

  foreach $nfsmnt (@nfsmount) {
    @nfsdat=split(/\|/,$nfsmnt);
    if (index(@nfsdat[2],"//") eq 0) {
      $options=",";
      if (@nfsdat[4] ne "-") {
        $options .="username=@nfsdat[4],";
      } else {
        $options .="guest,";
      }
      if (@nfsdat[5] ne "-") {
        $options .="password=@nfsdat[5],";
      }
      if (@nfsdat[6] ne "-") {
        $options .="uid=@nfsdat[6],";
      }
      if (@nfsdat[7] ne "-") {
        $options .="gid=@nfsdat[7],";
      }
      if (@nfsdat[8] eq "true") {
        $options .="ro,";
      }
      chop $options;
      printf AFMC ("%-15s%-75s%s\n",@nfsdat[1],"-fstype=smb$options",":@nfsdat[2]");
    } else {
      printf AFMC ("%-15s%-75s%s\n",@nfsdat[1],"-fstype=nfs,hard,intr","@nfsdat[2]");
    }
    print UPEX @nfsdat[3] . "\n";
    if (@nfsdat[3] ne "-") {
      print AMRC<<__EOB__;
if [ -e "@nfsdat[3]" ];then
  mv "@nfsdat[3]" "@nfsdat[3]-`date "+%d%m%Y"`"
  ln -s "/mnt/autofs/@nfsdat[1]" "@nfsdat[3]"
 else
  if [ -h "@nfsdat[3]" ];then
    rm "@nfsdat[3]"
    ln -s "/mnt/autofs/@nfsdat[1]" "@nfsdat[3]"
   else
    ln -s "/mnt/autofs/@nfsdat[1]" "@nfsdat[3]"
  fi;
fi;
__EOB__
    }
  }
  if ( -e "/dev/cdrom") {
    printf AFMC ("%-15s%-75s%s\n","cd","-fstype=auto,nosuid,nodev,ro",":/dev/cdrom");
  }
  close(AFMC);
  close(AMRC);
  close(UPEX);
}


sub printfaxconf() {
  open(FC,">faxconfig");
  chmod(0600,"faxconfig");

print FC<<__EOB__;
LogFacility:		daemon
CountryCode:		$faxconf{'Country'}
AreaCode:		$faxconf{'AreaCode'}
LongDistancePrefix:	$faxconf{'LongDistPrefix'}
InternationalPrefix:	$faxconf{'InatPrefix'}
DialStringRules:	etc/dialrules
ServerTracing:		1
__EOB__
#DestControls:		etc/destrules
#MaxDials:               $faxconf{'Retry'}
#MaxSendPages:           $faxconf{'MaxPages'}
#PostScriptTimeout:      300
#JobReqOther:            $faxconf{'TimeOut'}

close(FC);
}


sub printfaxstart() {
  $faxport="ttyIAX";
  $faxpn=$faxport;

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

  open(FS,">rc.hfax");
  chmod(0600,"rc.hfax");
  print FS<<__EOB__;
#!/bin/bash

#
#Update Cover Page
#

sed -e "s/XXXCNAMEXXX/$faxconf{'TagName'}/ " /usr/lib/fax/faxcover.ps.in > /usr/lib/fax/faxcover.ps

if [ ! -d /var/spool/samba/share/fax-software ];then
  mkdir -p /var/spool/samba/share/fax-software
fi;

cp /usr/lib/fax/faxcover.ps /var/spool/samba/share/fax-software
rm /var/spool/hylafax/etc/config.*

/usr/sbin/hfaxd -i hylafax
/usr/sbin/faxq

__EOB__

  close(FS);


  open(FS,">t38modem_start");
  chmod(0600,"t38modem_start");
  print FS<<__EOB__;
#!/bin/bash

while [ "\`pidof t38modem\`" ];do
  killall t38modem
done;

sleep 10

rm /dev/ttyF*

/usr/bin/t38modem --listenport 1722 -u t38modem --old-asn -i $localip -g $localip -D ulaw -P alaw\\\
__EOB__

print FS "                        -p +/dev/ttyF0";

for($faxcnt=1;$faxcnt <= 9;$faxcnt++) {
 print FS ",+/dev/ttyF$faxcnt";
}

print FS " &\n\n";

for($faxcnt=0;$faxcnt <= 9;$faxcnt++) {
  print FS "ln -s /var/spool/hylafax/etc/faxtty /var/spool/hylafax/etc/config.ttyF$faxcnt\n";
  print FS "/usr/sbin/faxmodem ttyF$faxcnt\n";
}

close(FS);
}


sub printfaxtty() {
  open(FT,">faxtty");
  chmod(0600,"faxtty");

  print FT<<__EOB__;
# \$Id\$
#
# HylaFAX configuration for a T38FAX Pseudo Modem
#
# This file was originally sourced with permission from 
# Vyacheslav Frolov's t38modem software in OpenH323 package.
#


#
CountryCode:		$faxconf{'Country'}
AreaCode:		$faxconf{'AreaCode'}
FAXNumber:		$faxconf{'TagNum'}
LongDistancePrefix:	$faxconf{'LongDistPrefix'}
InternationalPrefix:	$faxconf{'InatPrefix'}
DialStringRules:	etc/dialrules
ServerTracing:		1
SessionTracing:		11
RecvFileMode:		0600
LogFileMode:		0600
DeviceMode:		0600
RingsBeforeAnswer:	$faxconf{'RingDelay'}
SpeakerVolume:		off
GettyArgs:		"-h %l dx_%s"
LocalIdentifier:	"$faxconf{'TagName'}"
TagLineFont:		etc/lutRS18.pcf
TagLineFormat:		"From %%l|%%n|%d/%m/%y %H:%M:%S Page %%P of %%T"
MaxRecvPages:		$faxconf{'MaxPages'}
JobReqOther:		$faxconf{'TimeOut'}
NoCarrierRetrys:	$faxconf{'Retry'}
JobReqBusy:		$faxconf{'TimeOut'}
JobReqNoCarrier:	$faxconf{'TimeOut'}
JobReqNoAnswer:		$faxconf{'TimeOut'}
JobReqDataConn:		$faxconf{'TimeOut'}
JobReqNoFCon:		$faxconf{'TimeOut'}
JobReqProto:		$faxconf{'TimeOut'}
#PercentGoodLines:       90
#MaxConsecutiveBadLines: 10
#QualifyCID:             etc/cid
#CIDNumber:              "$faxconf{'CIDNumber'}"
#CIDName:                "$faxconf{'CIDNumber'}"
#

ModemType:		Class1		# use class 1 interface
ModemFlowControl:	rtscts		# default
ModemRevQueryCmd:	AT+FREV?
#ModemDialCmd:		ATDF%s
__EOB__

close(FT);
}

sub printmrtg() {
#indexmaker /etc/mrtg.conf --section=h1  --columns 1 --nolegend --addhead "<link rel=stylesheet type=text/css href=/netsentry.css>"  --title "Network Sentry Traffic Graphs" --output /var/spool/apache/htdocs/mrtg/index.html

  open(MC,">mrtg.conf");
  chmod(0600,"mrtg.conf");

  $sess = new SNMP::Session(DestHost => localhost, Community => public, Version => 1);
  $val = $sess->get('ifNumber.0');
  
  print MC "WorkDir: /var/spool/apache/htdocs/mrtg\n";
  print MC "LoadMibs: /usr/share/snmp/mibs/SQUID-MIB.txt\n";
  print MC "LogFormat: rrdtool\n\n";

  for($cnt=1;$cnt <= int($val);$cnt++) {
    $val2 = $sess->get("ifDescr." . "$cnt");
    $linknum=chop($val2);
    if ((($val2 eq "ppp") && ($linknum <= 10)) || ((index($val2,"ppp") eq -1) && (index($val2,"imq") eq -1))) {
      if (($val2 eq "lo") || ($val2 . $linknum eq  "lo")) {
        $val2=$val2 . $linknum; 
        @idata[0]="Loopback Interface";
        @idata[3]=$val2;
        @idata[1]="127.0.0.1";
      } else {
        $intp=$val2;
        $val2=$val2 . $linknum; 
        @idata=split(/\|/,$interface{$val2});
        @idata[0]=join(" ",split(/_/,@idata[0]));
      }

      $speed=$sess->get("ifSpeed." . "$cnt");
      if (index($val2,"ppp") ne -1) {
        @idata[3]=$val2;
        @idata[1]="Dynamicaly Assigned";
        if (($speed eq "0") && ($val2 eq "ppp0") && ($tcctl{'Ingress'} ne "")) {
          $speed=$tcctl{'Ingress'}/8;
          @idata[0]="Primary PPP Link";
        } elsif (($speed eq "0") && ($val2 eq "ppp0")) {
          $speed=1024/8;
          @idata[0]="Primary PPP Link";
        } elsif ($speed eq "0") {
          $speed=1024/8;
          @idata[0]="Load Balancing Link";
        }
        $speed2=$speed*1024;
        $speedmax=$speed*1024;
      } else {
        if ($speed eq "10000000") {
          $speed2=1280*1024*8;
          $speed=1280;
          $speedmax=$speed2*10;
        } else {
          $speed2=12800*1024*8;
          $speed=12800;
          $speedmax=$speed2;
        } 
      }
      if (@idata[0] ne "") {
        print MC <<__EOB__;
Target[int-$val2]: $cnt:public\@localhost:
SetEnv[int-$val2]: MRTG_INT_DESCR="@idata[3]"
MaxBytes[int-$val2]: $speed2
AbsMax[int-$val2]: $speedmax
Title[int-$val2]: @idata[0]
Options[int-$val2]: nobanner, avgpeak
AddHead[int-$val2]: <link rel=stylesheet type=text/css href=/style.php>
Colours[int-$val2]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
PageTop[int-$val2]: <H1>Traffic Data For @idata[0]</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>@idata[0]</TD></TR>
   <TR><TD>ifName:</TD>     <TD>@idata[3]</TD></TR>
   <TR><TD>Max Speed:</TD>  <TD>$speed kBytes/s</TD></TR>
   <TR><TD>Ip:</TD>         <TD>@idata[1]</TD></TR>
 </TABLE>

__EOB__
      }
    }
  }

  $maxswap=$sess->get(".1.3.6.1.4.1.2021.4.3.0");
  $maxmem=$sess->get(".1.3.6.1.4.1.2021.4.5.0");

print MC <<__EOF__;
Target[loadavg]: 1.3.6.1.4.1.2021.10.1.3.1&1.3.6.1.4.1.2021.10.1.3.2:public\@localhost
Title[loadavg]: Load Average
Legend1[loadavg]: 1 Min Avg
Legend2[loadavg]: 5 Min Avg
LegendO[loadavg]: 5 Min Avg
LegendI[loadavg]: 1 Min Avg
YLegend[loadavg]: 
ShortLegend[loadavg]: 
MaxBytes[loadavg]: 100
Options[loadavg]: nobanner, gauge, nopercent
AddHead[loadavg]: <link rel=stylesheet type=text/css href=/style.php>
Colours[loadavg]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
PageTop[loadavg]: <H1>Load Average</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>Load Average</TD></TR>
 </TABLE>

Target[idlewait]: .1.3.6.1.4.1.2021.11.54.0&.1.3.6.1.4.1.2021.11.53.0:public\@localhost
Title[idlewait]: CPU Idle/Wait
Legend1[idlewait]: Wait
Legend2[idlewait]: idle
LegendO[idlewait]: Idle
LegendI[idlewait]: Wait
YLegend[idlewait]: 
ShortLegend[idlewait]: 
MaxBytes[idlewait]: 1000000
Options[idlewait]: nobanner, nopercent
AddHead[idlewait]: <link rel=stylesheet type=text/css href=/style.php>
Colours[idlewait]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
PageTop[idlewait]: <H1>CPU Idle/Wait</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>CPU Idle/Wait</TD></TR>
 </TABLE>

Target[swap-avail]: 1.3.6.1.4.1.2021.4.6.0&1.3.6.1.4.1.2021.4.4.0:public\@localhost
Title[swap-avail]: Available Memory
Legend1[swap-avail]: Physical Memory
Legend2[swap-avail]: Swap Space
LegendO[swap-avail]: Swap
LegendI[swap-avail]: Memory
YLegend[swap-avail]: MB
ShortLegend[swap-avail]: B
kMG[swap-avail]: k,M,G,T,P
MaxBytes1[swap-avail]: $maxmem
MaxBytes2[swap-avail]: $maxswap
Options[swap-avail]: nobanner, gauge
kilo[swap-avail]: 1000
AddHead[swap-avail]: <link rel=stylesheet type=text/css href=/style.php>
Colours[swap-avail]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
PageTop[swap-avail]: <H1>Available Memory</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>Available Memory</TD></TR>
 </TABLE>

Target[mail-traffic]: 1.3.6.1.2.1.28.1.1.4.1&1.3.6.1.2.1.28.1.1.6.1:public\@localhost
MaxBytes[mail-traffic]: 64
AbsMax[mail-traffic]: 12800
Title[mail-traffic]: Mail Traffic (SMTP)
Legend1[mail-traffic]: Incoming Mail
Legend2[mail-traffic]: Outgoing Mail
YLegend[mail-traffic]: KBytes/Second
ShortLegend[mail-traffic]: KB/s
Options[mail-traffic]: nobanner, avgpeak
AddHead[mail-traffic]: <link rel=stylesheet type=text/css href=/style.php>
Colours[mail-traffic]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
PageTop[mail-traffic]: <H1>Mail Traffic Data (SMTP)</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>Mail Traffic (SMTP)</TD></TR>
 </TABLE>


Target[proxy-traffic]: 1.3.6.1.4.1.3495.1.3.2.1.12.0&1.3.6.1.4.1.3495.1.3.2.1.13.0:public\@localhost:3401
MaxBytes[proxy-traffic]: 64
AbsMax[proxy-traffic]: 12800
Title[proxy-traffic]: Web Traffic
Legend1[proxy-traffic]: Incoming Requests
Legend2[proxy-traffic]: Outgoing Requests
YLegend[proxy-traffic]: KBytes/Second
ShortLegend[proxy-traffic]: KB/s
Options[proxy-traffic]: nobanner, avgpeak
Colours[proxy-traffic]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
AddHead[proxy-traffic]: <link rel=stylesheet type=text/css href=/style.php>
PageTop[proxy-traffic]: <H1>Web Traffic</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>Web Traffic</TD></TR>
  </TABLE>

Target[mail-msg]: 1.3.6.1.2.1.28.1.1.1.1&1.3.6.1.2.1.28.1.1.3.1:public\@localhost
MaxBytes[mail-msg]: 1250000
Title[mail-msg]: Mail Messages (SMTP)
Legend1[mail-msg]: Incoming Mail
Legend2[mail-msg]: Outgoing Mail
YLegend[mail-msg]: Msg./Minute
ShortLegend[mail-msg]: msg/min
Options[mail-msg]: nobanner, avgpeak, perminute
AddHead[mail-msg]: <link rel=stylesheet type=text/css href=/style.php>
Colours[mail-msg]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff
PageTop[mail-msg]: <H1>Mail Message Data (SMTP)</H1>
 <TABLE>
   <TR><TD>Description:</TD><TD>Mail Messages (SMTP)</TD></TR>
 </TABLE>

Target[proxy-hit]: 1.3.6.1.4.1.3495.1.3.2.1.2.0&1.3.6.1.4.1.3495.1.3.2.1.1.0:public\@localhost:3401
MaxBytes[proxy-hit]: 1250000
Title[proxy-hit]: Proxy Server HTTP Hits
LegendI[proxy-hit]:  HTTP hits
LegendO[proxy-hit]:  HTTP requests
Legend1[proxy-hit]:  HTTP hits
Legend2[proxy-hit]:  HTTP requests
YLegend[proxy-hit]: Request/Minute
ShortLegend[proxy-hit]: req/min
AddHead[proxy-hit]: <link rel=stylesheet type=text/css href=/style.php>
Options[proxy-hit]: nopercent, dorelpercent, perminute, nobanner, unknaszero
Colours[proxy-hit]: GREEN#008000,BLUE#1000ff,DARK GREEN#006600,VIOLET#ff00ff,AMBER#ef9f4f
PageTop[proxy-hit]: <H1>Proxy Performance Hits/Requests</H1>
  <TABLE>
    <TR><TD>Description:</TD><TD>Proxy Performance Hits/Requests</TD></TR>
  </TABLE>
__EOF__

  open(MCL,"/etc/mrtg.conf.local");
  while(<MCL>) {
    print MC $_;
  }
  close(MCL);
  close(MC);
}

sub printbackup() {
  open(BUS,">backup");
  chmod(0600,"backup");

  $fcnt=1;
  print BUS<<__EOF__;
#!/bin/bash

if [ ! -d /var/spool/backup ];then
	mkdir /var/spool/backup
fi;

openssl pkcs12 -export -chain -CApath /etc/ipsec.d/certs \\
               -inkey /etc/openssl/serverkey.pem \\
               -in /etc/openssl/server.signed.pem \\
               -password file:/etc/mail/ldap -out /etc/openssl/server.p12

openssl pkcs12 -export -chain -CApath /etc/ipsec.d/certs \\
               -inkey /etc/openssl/private/cakey.pem \\
               -in /etc/ipsec.d/cacerts/cacert.pem \\
               -password file:/etc/mail/ldap -out /etc/openssl/ca.p12

#Get Key
#openssl pkcs12 -in server.p12 -nodes -password pass:seeme -nocerts 2>/dev/null | \
#         openssl rsa
#Get Client Cert
#openssl pkcs12 -in server.p12 -password pass:seeme -nokeys -clcerts 2>/dev/null | \
#         openssl x509
#Get CA Cert
#openssl pkcs12 -in server.p12 -password pass:seeme -nokeys -cacerts 2>/dev/null | \
#         openssl x509


/usr/bin/tdbbackup /etc/samba/private/secrets.tdb

touch /tmp/backup

cd /


BDATE=`date +%Y-%m-%d`
BFILE=/var/spool/backup/backup-\${BDATE}.tar

if [ `"whoami"` == "root" ] || [ `"whoami"` == "admin" ];then
  /usr/bin/pg_dump -U asterisk -h 127.0.0.1 -aDt users -t astdb -t queues -t queue_members -t queue_table -t dynspan -t zapspan -t zapchan -t zapgroup -t gsmchannels -t provider -t trunk -t officehours -t cc_callerid |/usr/bin/grep -vE "(^\$)|(^--)" |/usr/bin/gzip -c > /var/spool/backup/pbxdata-\${BDATE}.sql.gz
fi;

rm /var/spool/backup/pbxdata.sql.gz
ln -s /var/spool/backup/pbxdata-\${BDATE}.sql.gz /var/spool/backup/pbxdata.sql.gz

/usr/bin/mysqldump -uadmin -p"$sqladminpass" osticket |gzip -c |dd of=/var/spool/backup/osticket-\${BDATE}.sql.gz
rm /var/spool/backup/osticket.sql.gz
ln -s /var/spool/backup/osticket-\${BDATE}.sql.gz /var/spool/backup/osticket.sql.gz


SYSFILES="var/spool/apache/htdocs/ns/config/netsentry.conf \\
          var/spool/apache/htdocs/ns/config/server.conf \\
          var/spool/apache/htdocs/ns/config/ca.conf etc/mrtg.conf.local \\
          var/spool/apache/htdocs/mrtg/*old etc/firewall.local etc/rc.local \\
          var/spool/apache/htdocs/mrtg/*log etc/crontab.local etc/nsswitch.conf.local \\
          var/spool/apache/htdocs/mrtg/index.html etc/ppp/mangle \\
          etc/openssl/ etc/ipsec.d/certs etc/custdb etc/rc.d/rc.mangle \\
          var/lib/asterisk/astdb etc/asterisk/ivrmenu.conf \\
          etc/asterisk/local.conf root/slapd.local etc/sogo_ad.conf \\
          etc/asterisk/iaxtel.conf etc/asterisk/capi.conf \\
          etc/asound.state etc/zebra/Zebra.conf etc/dhcp.conf.local \\
          etc/ipsec.d/cacerts/cacert.pem /etc/ppp/mangle /etc/dyndnsconf \\
          etc/rc.d/rc.mangle etc/ipsec.secrets etc/*.local \\
          etc/asterisk/pgsql.local etc/asterisk/pgsql.access etc/dns.master"


/bin/touch \$BFILE
/bin/chmod 600 \$BFILE

if [ -e /dev/tapes/tape0/mtn ];then
  export TAPE=/dev/tapes/tape0/mtn
  /usr/bin/mt load
  /usr/bin/mt rewind
  TAROPT="-cf";
 else
  export TAPE=\$BFILE
  TAROPT="-rf";
fi;

#Send System Backup As A Mime Attachment
(
MIMEBOUNDARY="NextPart\$\$"
echo "Mime-Version: 1.0"
echo "Content-Type: Multipart/Mixed; Boundary=\"\$MIMEBOUNDARY\""
echo "Content-Transfer-Encoding: 7bit"
echo "From: root\@$dnsconf{'Domain'}"
echo "To: Server Administrator <root>"
echo "Subject: Backup";
echo
echo "--\$MIMEBOUNDARY"
echo "Content-Type: text/plain; charset=us-ascii"
echo Content-Transfer-Encoding: 7bit
echo

__EOF__

foreach $fshare (@nfsmount) {
  @shdat=split(/\|/,$fshare);
  if (((@shdat[10] eq "true") && (index(@shdat[2],"//") eq 0)) || 
      ((@shdat[5] eq "true") && (index(@shdat[2],"//") ne 0))) {
    @shdat[0]=join(" ",split(/_/,@shdat[0]));
    print BUS "#Virus Scan @shdat[0] Mounted Partition\n";
    print BUS "echo Virus Scaning @shdat[0] Mounted Partition\n";
    print BUS "/usr/bin/clamdscan --stdout mnt/autofs/@shdat[1]\n\n";
  }
}

  print BUS<<__EOF__;
#Core System Backup
echo Backup Index
echo $fcnt System Config Files
/usr/bin/tar -cf \${TAPE} \${SYSFILES} > /dev/null 2>&1

__EOF__

$fcnt++;

if ( $ldapbackup eq "true") {
  print BUS "#Backup LDAP Database\n";
  print BUS "echo $fcnt LDAP Database\n";
  print BUS "/bin/touch /tmp/ldap.bak.gz\n/bin/chmod 600 /tmp/ldap.bak.gz\n";
  print BUS "/usr/sbin/slapcat -b \"\"|grep -vE \"(^ )|(::.*[a-zA-Z0-9]\$)\" |/usr/bin/gzip -c > /tmp/ldap.bak.gz\n";
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} tmp/ldap.bak.gz 2>&1\n"; 
  print BUS "/bin/rm /tmp/ldap.bak.gz\n\n";
  $fcnt++;

  print BUS "#Backup LDAP Database Binary Objects Excluding Photos\n";
  print BUS "echo $fcnt LDAP Database Binary Objects Excluding Photos\n";
  print BUS "/bin/touch /tmp/ldap.mod.gz\n/bin/chmod 600 /tmp/ldap.mod.gz\n";
  print BUS "/usr/bin/ldapsearch -U admin -Y PLAIN -w \"\`cat /etc/mail/ldap\`\" -LLL -Z \`slapcat -b \"\"|grep \"::\" |grep -vE \"(jpegPhoto)|(.*=\$)\" |cut -d: -f1\ |sort |uniq` > /tmp/ldap.mod.gz\n";
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} tmp/ldap.mod.gz 2>&1\n"; 
  print BUS "/bin/rm /tmp/ldap.mod.gz\n\n";
  $fcnt++;
}

if ( $voipbackup eq "true") {
#  print BUS "#Backup MySQL VOIP Config\n";
#  print BUS "echo $fcnt MySQL VOIP Config\n";
#  print BUS "/bin/touch /tmp/asterisk.sql.gz\n/bin/chmod 600 /tmp/asterisk.sql.gz\n";
#  print BUS "/usr/bin/mysqldump -uasterisk -p$sqlvoippass -h$sqlserver asterisk |gzip -cf > /tmp/asterisk.sql.gz\n";
#  print BUS "/usr/bin/tar \$TAROPT \${TAPE} tmp/asterisk.sql.gz 2>&1\n"; 
#  print BUS "/bin/rm /tmp/asterisk.sql.gz\n\n";
#  $fcnt++;

#  print BUS "#Backup PgSQL VOIP Config - Prepaid Data\n";
#  print BUS "echo $fcnt PgSQL VOIP Config - Prepaid Data\n";
#  print BUS "/bin/touch /tmp/asterisk.psql.gz\n/bin/chmod 600 /tmp/asterisk.psql.gz\n";
#  print BUS "pg_dump -U asterisk -h 127.0.0.1 -t trunk -t tariffrate -t card -a -D |gzip -cf > /tmp/asterisk.psql.gz\n";
#  print BUS "/usr/bin/tar \$TAROPT \${TAPE} tmp/asterisk.psql.gz 2>&1\n"; 
#  print BUS "/bin/rm /tmp/asterisk.psql.gz\n\n";
#  $fcnt++;

  print BUS "#Backup PgSQL VOIP Config - Prepaid Data\n";
  print BUS "echo $fcnt VOIP Configuration\n";
  print BUS "/bin/touch /tmp/asterisk.psql.gz\n/bin/chmod 600 /tmp/asterisk.psql.gz\n";
  print BUS <<__EOF__;
pg_dump -U asterisk -h 127.0.0.1 -dat users -t astdb -t queue_members -t queue_tables -t officehours -t dynspan \\
                                 -t zapchan -t zapspan -t zapgroup -t gsmchannels -t trunk -t localrates \\
                                 -t provider -t tariff -t tariffrate -t reseller |gzip -c |dd of=/tmp/asterisk.psql.gz

__EOF__
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} tmp/asterisk.psql.gz 2>&1\n"; 
  print BUS "/bin/rm /tmp/asterisk.psql.gz\n\n";
  $fcnt++;

  print BUS "#Backup VOIP Sounds\n";
  print BUS "echo $fcnt VOIP Custom Sounds\n";
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} var/lib/asterisk/sounds/custom 2>&1\n"; 
  $fcnt++;

  print BUS "#Backup VOIP Voicemail Greetings\n";
  print BUS "echo $fcnt VOIP Voicemail Greetings\n";
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} var/spool/asterisk/voicemail/6/*/*.* 2>&1\n"; 
  $fcnt++;
}

if ($dnsconf{'Backup'} eq "true") {
  print BUS "#Backup DNS Data Directory\n";
  print BUS "echo $fcnt DNS Data Directory\n";
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} var/named 2>&1\n\n";
  $fcnt++;
}

if ($mailconf{'MSBackup'} eq "true") {
  print BUS "#Backup Email Scanner Message Files\n";
  print BUS "echo $fcnt Email Scanner Message Files\n";
  print BUS "/usr/bin/tar \$TAROPT \${TAPE} opt/MailScanner/etc/reports/en 2>&1\n\n";
  $fcnt++;
}

print BUS<<__EOF__;

if [ -e /dev/tapes/tape0/mtn ];then
  #Shut down AV
  while [ -S /tmp/clamd -a "\$ctest" != "xxxxxxxxxxxxxxx" ];do
    kill `cat /var/run/clamd.pid`
    sleep 1
    ctest=x\$ctest
  done;
  CLAMPID=`/bin/pidof clamd`;
  while [ "\$CLAMPID" ];do
    killall -9 clamd
    CLAMPID=`/bin/pidof clamd`;
  done;
#  /usr/sbin/dazunreg
  if [ -S /tmp/clamd ];then
    rm /tmp/clamd> /dev/null 2>&1
  fi;
  sleep 5
  /sbin/rmmod dazuko
  /usr/sbin/clamd;
#  /usr/sbin/dazunreg

__EOF__

$fcnt++;

if ($smbclam{'BUShare'} eq "true") {
  print BUS "  #Backup Share Directory\n";
  print BUS "  echo $fcnt Share Directory\n";
  print BUS "  /usr/bin/tar \$TAROPT \${TAPE} var/spool/samba/share 2>&1\n\n";
  $fcnt++;
}

if ($smbclam{'BUHome'} eq "true") {
  print BUS "  #Backup Home Directory\n";
  print BUS "  echo $fcnt Home Directory\n";
  print BUS "  /usr/bin/tar \$TAROPT \${TAPE} var/home 2>&1\n\n";
  $fcnt++;
}

if ($mailconf{'Backup'} eq "true") {
  print BUS "  #Backup Email (Inboxes)\n";
  print BUS "  echo \"$fcnt Email (Inboxes)\"\n";
  print BUS "  /usr/bin/tar \$TAROPT \${TAPE} var/spool/mail 2>&1\n\n";
  $fcnt++;
}

if ($smbclam{'BUWWW'} eq "true") {
  print BUS "  #Backup Frontpage Websites/Admin Site\n";
  print BUS "  echo $fcnt Frontpage Websites/Admin Site\n";
  print BUS "  /usr/bin/tar \$TAROPT \${TAPE} var/spool/apache/htdocs \\\n";
  print BUS "                                 var/spool/apache/vhosts 2>&1\n\n";
  $fcnt++;
}

if ($smbclam{'BUFTP'} eq "true") {
  print BUS "  #Backup Anonymous FTP Data\n";
  print BUS "  echo $fcnt Anonymous FTP Data\n";
  print BUS "  /usr/bin/tar \$TAROPT \${TAPE} var/spool/samba/ftp 2>&1\n\n";
  $fcnt++;
}

if ($sqlbackup eq "true") {
  print BUS "  #Backup SQL Database\n";
  print BUS "  echo $fcnt SQL Database\n";
  print BUS "  /bin/touch /tmp/sql.bak.gz\n/bin/chmod 600 /tmp/sql.bak.gz\n";
  print BUS "  /usr/bin/mysqldump -aA -u admin -p$sqladminpass  |/usr/bin/gzip -c > /tmp/sql.bak.gz\n";
  print BUS "  /usr/bin/tar \$TAROPT \${TAPE} tmp/sql.bak.gz 2>&1\n"; 
  print BUS "  /bin/rm /tmp/sql.bak.gz\n\n";
  $fcnt++;
}

foreach $fshare (@smbshare) {
  @shdat=split(/\|/,$fshare);
  if (@shdat[6] eq "true") {
    @shdat[0]=join(" ",split(/_/,@shdat[0]));
    print BUS "  #Backup @shdat[0] File Share\n";
    print BUS "  echo $fcnt @shdat[0] File Share\n";
    print BUS "  /usr/bin/tar \$TAROPT \${TAPE} \"var/spool/samba/@shdat[1]\" 2>&1\n\n";
    $fcnt++;
  }
}

foreach $fshare (@nfsmount) {
  @shdat=split(/\|/,$fshare);
  if (((@shdat[9] eq "true") && (index(@shdat[2],"//") eq 0)) || 
      ((@shdat[4] eq "true") && (index(@shdat[2],"//") ne 0))) {
    @shdat[0]=join(" ",split(/_/,@shdat[0]));
    print BUS "  #Backup @shdat[0] Mounted Partition\n";
    print BUS "  echo $fcnt @shdat[0] Mounted Partition\n";
    print BUS "  /usr/bin/tar \$TAROPT \${TAPE} \"mnt/autofs/@shdat[1]\" 2>&1\n\n";
    $fcnt++;
  }
}

print BUS<<__EOF__;
  #Restart AV
  while [ -S /tmp/clamd -a "\$ctest" != "xxxxxxxxxxxxxxx" ];do
    kill `cat /var/run/clamd.pid`
    sleep 1
    ctest=x\$ctest
  done;
  CLAMPID=`/bin/pidof clamd`;
  while [ "\$CLAMPID" ];do
    killall -9 clamd
    CLAMPID=`/bin/pidof clamd`;
  done;
  /usr/sbin/dazunreg
  if [ -S /tmp/clamd ];then
    rm /tmp/clamd> /dev/null 2>&1
  fi;
  sleep 5
  /sbin/modprobe dazuko
  /usr/sbin/clamd;

  #Rewind And Eject Tape
__EOF__

print BUS "  /usr/bin/mt rewind\n";
print BUS "  /usr/bin/mt eject\n else\n";

if ($dnsconf{'Hostname'}) {
  $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
} else {
  $fqdn=$dnsconf{'Domain'}
}

print BUS<<__EOF__;
  #Core System Backup For Systems With No Backup Device
  echo
  echo "This is the main system config and user database backup no tape backup device was detected."
  echo "No data or file server directories were backed up."
fi;

rm /tmp/backup

echo
echo "--\$MIMEBOUNDARY"
echo "Content-Type: application/x-tar; name=backup.$fqdn.tar.gz"
echo "Content-Description: System Backup"
echo "Content-Transfer-Encoding: base64"
echo "Content-Disposition: attachment; filename=backup.tar.gz"
echo
/usr/bin/gzip -f \$BFILE
/bin/chmod 600 \${BFILE}.gz
/usr/bin/uuenview -b \${BFILE}.gz
) |/usr/sbin/sendmail -t
__EOF__

}

sub printrctos() {
  open(RT,">rc.tos");
  chmod(0600,"rc.tos");
  print RT "#!/bin/bash\n\n";

  if ($sysconf{'Internal'} eq $sysconf{'External'} ) {
    close(RT);
    return;
  }

  print RT "#Flushing Rules\n";
  print RT "/sbin/iptables -t mangle -F SYSTOS\n";
  print RT "/sbin/iptables -t mangle -F NOSYSTOS\n";
  print RT "/sbin/iptables -t mangle -F SYSINGRESS\n\n";
  print RT "/sbin/iptables -t mangle -F SYSEGRESS\n\n";

  print RT <<__EOB__;
#Set Tos For RTP
/sbin/iptables -t mangle -A SYSTOS -j TOS -p udp -d 0/0 --dport 10000:20000 --sport 1024:65535 --set-tos Minimize-Delay
/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -s 0/0 --sport 10000:20000 --dport 1024:65535
/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -d 0/0 --dport 10000:20000 --sport 1024:65535

#Set Tos For TCP H.323 Signaling
/sbin/iptables -t mangle -A SYSTOS -j TOS -p tcp -d 0/0 --sport 10000:11999 --dport 1024:65535 --set-tos Minimize-Delay

#Set Tos For IAX
/sbin/iptables -t mangle -A SYSTOS -j TOS -p udp -d 0/0 --dport 4569 --sport 1024:65535 --set-tos Minimize-Delay
/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -s 0/0 --sport 4569 --dport 1024:65535
/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -d 0/0 --dport 4569 --sport 1024:65535

#Set Tos For IAX2
/sbin/iptables -t mangle -A SYSTOS -j TOS -p udp -d 0/0 --dport 5036 --sport 1024:65535 --set-tos Minimize-Delay
/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -s 0/0 --sport 5036 --dport 1024:65535
/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -d 0/0 --dport 5036 --sport 1024:65535

#Set Tos For SIP
/sbin/iptables -t mangle -A SYSTOS -j TOS -p udp -d 0/0 --dport 5060 --sport 1024:65535 --set-tos Minimize-Delay
/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -s 0/0 --sport 5060 --dport 1024:65535
/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -d 0/0 --dport 5060 --sport 1024:65535

/sbin/iptables -t mangle -A SYSTOS -j TOS -p udp -d 0/0 --dport 5000 --sport 1024:65535 --set-tos Minimize-Delay
/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -s 0/0 --sport 5000 --dport 1024:65535
/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p udp -d 0/0 --dport 5000 --sport 1024:65535

/sbin/iptables -t mangle -A SYSTOS -j TOS -p tcp -d 0/0 --dport 5060:5061 --sport 1024:65535 --set-tos Minimize-Delay
/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p tcp -s 0/0 --sport 5060:5061 --dport 1024:65535
/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark 0x101 -m mark --mark 0x102 -p tcp -d 0/0 --dport 5060:5061 --sport 1024:65535

__EOB__

  foreach $tosrule (@adsltos) {
    @lbrule=split(/\|/,$adsllb{$tosrule});
    if (@lbrule[4] eq "UDP") {
      $proto=" -p udp";
    } elsif (@lbrule[4] eq "TCP") {
      $proto=" -p tcp";
    } elsif (@lbrule[4] eq "ESP") {
      $proto=" -p esp";
    } elsif (@lbrule[4] eq "AH") {
      $proto=" -p ah";
    } elsif (@lbrule[4] eq "GRE") {
      $proto=" -p 47";
    } else {
      $proto="";
    }

    if (@lbrule[6] eq "High") {
      @lbrule[6]="0x101";
    } elsif (@lbrule[6] eq "Med") {
      @lbrule[6]="0x102";
    } elsif (@lbrule[6] eq "Low") {
      @lbrule[6]="0x103";
    } else {
      @lbrule[6]="0x102";
    }

    @lbrule[0]=join(" ",split(/_/,@lbrule[0]));
    print RT "#Set Tos For @lbrule[0]\n";
    if (@lbrule[5] ne "Normal-Service") {
      if (($proto eq " -p udp" ) | ($proto eq " -p tcp")) {
        print RT "/sbin/iptables -t mangle -A SYSTOS -j TOS$proto -d @lbrule[1] --dport @lbrule[2] --sport @lbrule[3] --set-tos @lbrule[5]\n";
      } else {
        print RT "/sbin/iptables -t mangle -A SYSTOS -j TOS$proto -d @lbrule[1] --set-tos @lbrule[5]\n";
      }
    } else {
      if (($proto eq " -p udp" ) | ($proto eq " -p tcp")) {
        print RT "/sbin/iptables -t mangle -A NOSYSTOS -j ACCEPT$proto -d @lbrule[1] --dport @lbrule[2] --sport @lbrule[3]\n";
      } else {
        print RT "/sbin/iptables -t mangle -A NOSYSTOS -j TOS$proto -d @lbrule[1]\n";
      }
    }

    if (($proto eq " -p udp" ) | ($proto eq " -p tcp")) {
      print RT "/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -s @lbrule[1] --sport @lbrule[2] --dport @lbrule[3]\n";
      print RT "/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -d @lbrule[1] --dport @lbrule[2] --sport @lbrule[3]\n\n";
      if (@lbrule[3] eq "80") {
        print RT "/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -s @lbrule[1] --sport @lbrule[2] --dport 3128\n";
        print RT "/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -d @lbrule[1] --dport @lbrule[2] --sport 3128\n\n";
      } elsif (@lbrule[2] eq "80") {
        print RT "/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -s @lbrule[1] --dport @lbrule[3] --sport 3128\n";
        print RT "/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -d @lbrule[1] --sport @lbrule[3] --dport 3128\n\n";
      }
    } else {
      print RT "/sbin/iptables -t mangle -A SYSINGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -s @lbrule[1]\n";
      print RT "/sbin/iptables -t mangle -A SYSEGRESS -j MARK --set-mark @lbrule[6] -m mark --mark 0x102$proto -d @lbrule[1]\n\n";
    }
    print RT "\n";
  }
  if ($sysconf{'External'} ne "Dialup") {
    print RT "/sbin/iptables -t mangle -A NOSYSTOS -j ACCEPT -i $sysconf{'External'}\n";
  } else {
    print RT "/sbin/iptables -t mangle -A NOSYSTOS -j ACCEPT -i ppp0\n";
  }
  close(RT);
}


sub printntpconf() {
  open(NTP,">ntp.conf");
  chmod(0600,"rc.tos");
  if ($sysconf{'NTPServer'}) {
    @ntps=split(/ /,$sysconf{'NTPServer'});
    $cnt=0;
    foreach $tserv (@ntps) {
      print NTP "server $tserv iburst burst minpoll 4";
      if ($cnt eq 0) {
        print NTP " prefer dynamic\n";
      } else {
        print NTP "\n";
      }
      $cnt++;
    }
  }
  print NTP<<__EOF__;
driftfile /tmp/ntp.drift
restrict default nopeer noquery nomodify
restrict 127.0.0.1
__EOF__
  close(NTP);

}

sub printastmod() {
  open(AM,">astmod.conf");
  chmod(0600,"astmod.conf");


print AM<<__EOB__;
[modules]
autoload=yes

;Make sure the db bits are loaded.
preload => res_odbc.so
preload => res_config_odbc.so

;Fax Changes
noload => app_faxdetect.so

;Old Presence Crap
noload => app_adndelivered.so
noload => app_pogpbridge.so

;Asterisk 1.8
noload => chan_h323.so
noload => cel_custom.so
noload => cel_manager.so
noload => cel_odbc.so
noload => cel_pgsql.so
noload => cel_sqlite3_custom.so
noload => cdr_syslog.so
noload => cdr_mysql.so
noload => res_calendar.so
noload => app_fax.so
noload => app_faxgateway.so

;Asterisk 1.6
noload => res_timing_timerfd.so
noload => res_timing_pthread.so
noload => res_phoneprov.so
noload => test_dlinklists.so
noload => res_config_ldap.so
noload => chan_jingle.so
noload => app_minivm.so
noload => chan_usbradio.so
noload => chan_unistim.so
noload => cdr_sqlite3_custom.so
noload => cdr_odbc.so
__EOB__

if (! -e "/etc/asterisk/woomera.conf") {
  print AM "noload => chan_woomera.so\n";
}

if ( -e "/dev/dahdi") {
  print AM<<__EOB__;
noload => chan_zap.so
noload => app_zapbarge.so
noload => app_zapras.so
noload => app_zapscan.so
noload => app_zapateller.so
noload => codec_zap.so

__EOB__
}

#noload => app_rpt.so
#noload => chan_oh323.so
#noload => codec_speex.so
#noload => app_fax.so

if ( -e "/usr/lib/asterisk/modules-1.8/codec_g723.so") {
  print AM ";Load g723\nload => codec_g723.so\n\n";
}

if ( -e "/usr/lib/asterisk/modules-1.8/codec_g729.so") {
  print AM ";Load g729\nload => codec_g729.so\n\n";
}

if ( ! -e "/dev/mISDN" )  {
#|| (-e "/usr/lib/asterisk/modules-1.8/chan_lcr.so")) {
  print AM<<__EOB__;
;Disable mISDN Module Bellow
noload => chan_misdn.so
__EOB__
}

if ( ! -e "/dev/capi20" ){
  print AM<<__EOB__;
;Disable ISDN Modules Bellow
noload => chan_capi.so
noload => app_capiCD.so
noload => app_capiHOLD.so
noload => app_capiRETRIEVE.so
noload => app_capiECT.so
noload => app_capiMCID.so

__EOB__
  } else {
  print AM<<__EOB__;
;enable ISDN Modules
load => chan_capi.so

__EOB__
  }

if ( ! -d "/dev/snd" ){
  print AM<<__EOB__;
;Disable ALSA
noload => chan_alsa.so

;Disable OSS
noload => chan_oss.so

__EOB__
} elsif ( -e "/dev/sound/dsp" ) {
  print AM<<__EOB__;
;Disable ALSA
noload => chan_alsa.so
__EOB__
} else {
  print AM<<__EOB__;
;Disable OSS
noload => chan_oss.so
__EOB__
}
print AM<<__EOB__;
;Disable Some Modules Not Used
noload => res_config_pgsql.so
noload => pbx_ael.so
noload => app_txfax.so
noload => app_rxfax.so
noload => app_skel.so
noload => app_ivrdemo.so
noload => app_devstate.so
noload => func_netsentry.so
noload => res_jabber.so
noload => chan_gtalk.so

;Disable Old Depricated Modules
noload => app_muxmon.so

;Disable OGG Vorbis
noload => format_ogg_vorbis.so

;Disable Will Call u
noload => pbx_wilcalu.so

;Disable Q Call
noload => app_qcall.so

;Disable PGSQL CDR
noload => cdr_pgsql.so

;Disable Phone Module
noload => chan_phone.so

;Disable GUI Console
noload => pbx_gtkconsole.so
noload => pbx_kdeconsole.so

;Disable Intercom
noload => app_intercom.so

;Disable Skinny and mgcp
noload => chan_skinny.so
noload => chan_mgcp.so

;Dont load modem channels
noload => chan_modem.so
noload => chan_modem_aopen.so
noload => chan_modem_bestdata.so
noload => chan_modem_i4l.so

;disable old modules
noload => func_uri.so

[global]
__EOB__
if ( -e "/dev/capi20" ){
  print AM<<__EOB__;
chan_capi.so=yes
__EOB__
  }
  close(AM);
}

sub printastsip() {
  open(SC,">sip.conf");
  chmod(0600,"sip.conf");

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

print SC<<__EOF__;
[general]
context=ddi
port=5060
srvlookup=yes
bindaddr=$localip
localnet=0.0.0.0/0
dbuser=asterisk
dbpass=$sqlvoippass
dbhost=$sqlvoipserv
dbname=asterisk
nat=yes
disallow=all
rtcachefriends=yes
vmexten=100
rtautoclear=yes
subscribecontext=busyline
notifyringing=yes
notifyhold=no
limitonpeer=yes
limitpeersonly=yes
videosupport=yes
;tos_sip=lowdelay
;tos_audio=lowdelay
;tos_video=lowdelay
mohinterpret=default
mohsuggest=default
encryption=try
tcpenable=yes
tcpbindaddr=$localip
transport=udp,tcp,tls
t38pt_udptl=yes,redundancy
callcounter=yes
faxdetect=yes
t38pt_rtp=yes
t38pt_tcp=no
rtptimeout=60
rtpholdtimeout=300
alwaysauthreject=yes
prematuremedia=no

__EOF__

if ( -d "/etc/openssl/voipca") {
  print SC "tlscertfile=/etc/openssl/voipca/server.pem\n";
  print SC "tlsprivatekey=/etc/openssl/voipca/private/serverkey.pem\n";
  print SC "tlscapath=/etc/openssl/voipca/cacerts\n";
  print SC "tlsenable=yes\n";
  print SC "tlsbindaddr=$localip:5061\n";
#  print SC "tlsdontverifyserver=no\n";
#  print SC "tlsverifyclient=yes\n";
#  print SC "tlsclientmethod=tlsv1\n";
} else {
  print SC "tlsenable=no\n";
}

if ( -e "/usr/lib/asterisk/modules-1.8/codec_g729.so") {
  print SC "allow=g729\n";
}

print SC "allow=gsm\n";
print SC "allow=speex\n";
print SC "allow=ilbc\n";
print SC "allow=g726\n";

if ( -e "/usr/lib/asterisk/modules-1.8/codec_g723.so") {
  print SC "allow=g723.1\n";
}

print SC "allow=alaw\n";
print SC "allow=ulaw\n";
print SC "allow=h263p\n";
print SC "allow=h263\n";
print SC "allow=h261\n";

print SC "\n";

if (-e "/etc/asterisk/sip.conf.local") {
  print SC "\n#include /etc/asterisk/sip.conf.local\n\n";
}

foreach $proxy (@sipproxys) {
  @sipreg=split(/\|/,$proxy);
  if (@sipreg[0] eq $parentnumber) {
    if (@sipreg[1] ne "") {
      $pass=":" . @sipreg[1];
    } else {
      $pass="";
    }
    if (@sipreg[6] eq "true") {
      print SC "register=>@sipreg[0]" . $pass . "\@@sipreg[2]/@sipreg[0]\n";
    }
  } else {
    if ((@sipreg[1] ne "") && (@sipreg[0] ne "")) {
      print SC "register=>@sipreg[0]:@sipreg[1]\@@sipreg[2]/";
    } elsif ((@sipreg[0] ne "") && (@sipreg[1] eq "")) {
      print SC "register=>@sipreg[0]\@@sipreg[2]/\n";
    }
    print SC (@sipreg[4] eq "")?@sipreg[0]:@sipreg[4] . "\n";
  }
}

print SC "\n";

foreach $proxy (@sipproxys) {
  @sipreg=split(/\|/,$proxy);
  @siphost=split(/:/,@sipreg[2]);
  @sipreg[2]=@siphost[0];

  if (($issipuser{@sipreg[3]} eq "") && (@sipreg[3] ne "")){
    if ((@sipreg[5] ne "") && (@sipreg[0] ne $parentnumber)){
      $sipcodec="\ndisallow=all\nallow=" . @sipreg[5];
    } else {
      $sipcodec="";
    }
    if (@sipreg[4] ne "") {
      $sipexten=@sipreg[4];
    } else {
      $sipexten=@sipreg[0];
    }
    if (@sipreg[0] eq $parentnumber) {
      if (@sipreg >= 8) {
        $dtmfmode=@sipreg[7];
      } else {
        $dtmfmode="auto";
      }
      if (@sipreg >= 10) {
        $sipvideo=(@sipreg[9] eq "false")?"yes":"no";
      } else {
        $sipvideo="yes";
      }
      if (@sipreg >= 11) {
        $sipsrtp=(@sipreg[10] eq "true")?"try":"no";
      } else {
        $sipsrtp="try";
      }
      print SC<<__EOB__;
[parent]
type=peer
__EOB__
      if (@sipreg[1] ne "") {
        print SC "secret=@sipreg[1]\n";
      }
      if (@sipreg[0] ne "") {
        print SC "defaultuser=@sipreg[0]\n";
	if ((@sipreg[8] eq "true") || (@sipreg <= 9)){
          print SC "fromuser=@sipreg[0]\n";
        }
      }
      print SC<<__EOB__;
fromdomain=@sipreg[2]
host=@sipreg[2]
context=sipddi
nat=yes
qualify=yes
canreinvite=yes
insecure=port,invite$sipcodec
sendrpid=yes
trustrpid=yes
t38pt_udptl=yes
t38pt_rtp=yes
dtmfmode=$dtmfmode
encryption=$sipsrtp
videosupport=$sipvideo
t38pt_usertpsource=yes
__EOB__
    if (@siphost[1] ne "") {
      print SC "port=@siphost[1]\n";
    }
    print SC "\n";
    } else {
      print SC<<__EOB__;
[@sipreg[3]]
type=peer
secret=@sipreg[1]
defaultuser=@sipreg[0]
;fromuser=@sipreg[0]
fromdomain=@sipreg[2]
host=@sipreg[2]
context=sipddi
qualify=yes
regexten=$sipexten
canreinvite=yes
insecure=port,invite$sipcodec
sendrpid=yes
trustrpid=yes

__EOB__
    }
    $issipuser{@sipreg[3]}="TRUE";
  }
}

  print SC <<__EOB__;
[guest]
type=user
context=ddi
__EOB__

  close(SC)
}

sub printastcli() {
  open(PRO,">providers.conf");
  chmod(0600,"providers.conf");
  $intif=$sysconf{'Internal'};
  @ipdat=split(/\|/,$interface{$intif});

  print PRO<<__EOF__;
IAXTELNUM=$iaxtelnum
FWDTELNUM=$fwdnumber
PARENTNUM=$parentnumber
HOSTNAME=$dnsconf{'Hostname'}
PARENTDIAL=$parentdial
PARENTCNT=$vparent
AGISERVER=$sqlmvoipserv
GOSSIPTEL=$gossipnum
FRESHNUM=$freshtelnum
DOMAIN=$dnsconf{'Domain'}
IPADDR=@ipdat[1]
__EOF__
  close(PRO);
}

sub printastvm() {
  open(VM,">voicemail.conf");
  chmod(0600,"voicemail.conf");

print VM<<__EOF__;
[general]
format=wav49
serveremail=asterisk
attach=yes
maxsecs=180
minsecs=2
maxgreet=60
skipms=3000
maxsilence=3
silencethreshold=128
maxlogins=3
sendvoicemail=yes
mailcmd=/usr/sbin/sendmail -f asterisk\@$dnsconf{'Domain'} -t
dbuser=asterisk
externpass=/usr/sbin/voippass
operator=yes
dbpass=$sqlvoippass
dbhost=$sqlvoipserv
dbname=asterisk
imapfolder=INBOX
imapserver=127.0.0.1
authuser=asterisk
authpassword=password
imapflags=novalidate-cert

[zonemessages]
eastern=America/New_York|'vm-received' Q 'digits/at' IMp
central=America/Chicago|'vm-received' Q 'digits/at' IMp
central24=America/Chicago|'vm-received' q 'digits/at' H 'digits/hundred' M 'hours'

__EOF__
  close(VM)
}

sub printastiax() {
  open(IC,">iax.conf");
  chmod(0600,"iax.conf");

  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

print IC<<__EOF__;
[general]
bindport=4569
bindaddr=$localip
;tos=none
bandwidth=low
dbuser=asterisk
dbpass=$sqlvoippass
dbhost=$sqlvoipserv
dbname=asterisk
jitterbuffer=yes
transfer=mediaonly
trunkfreq=20
trunktimestamps=yes
iaxcompat=no
disallow=all
codecpriority=host
mohinterpret=default
mohsuggest=default
iaxthreadcount=16
iaxmaxthreadcount=512 
rtcachefriends=yes
__EOF__

if ( -e "/usr/lib/asterisk/modules-1.8/codec_g723.so") {
  print IC "allow=g723.1\n";
}

if ( -e "/usr/lib/asterisk/modules-1.8/codec_g729.so") {
  print IC "allow=g729\n";
} else {
  print IC "allow=gsm\n";
  print IC "allow=ilbc\n";
  print IC "allow=speex\n";
}
print IC "allow=gsm\n";
print IC "allow=speex\n";
print IC "allow=ilbc\n";
print IC "allow=g726\n";
print IC "allow=alaw\n";
print IC "allow=ulaw\n";
print IC "allow=h263p\n";
print IC "allow=h263\n";
print IC "allow=h261\n";

print IC "\n";

  if (-e "/etc/asterisk/iax.conf.local") {
    print IC "\n#include /etc/asterisk/iax.conf.local\n\n";
  }

  foreach $proxy (@iaxproxys) {
    @iaxreg=split(/\|/,$proxy);
    if ((@iaxreg[0] ne "") && (((@iaxreg[11] eq "parent") && (@iaxreg[6] eq "true")) || (@iaxreg[11] ne "parent"))) { 
      if (@iaxreg[1] ne "") {
        $pass=":@iaxreg[1]";
      } else {
        $pass="";
      }
      print IC "register=>@iaxreg[0]" . $pass . "\@@iaxreg[2]\n";
    }
  }
  print IC "\n";
  foreach $proxy (@iaxproxys) {
    @iaxreg=split(/\|/,$proxy);
    if ($isiaxuser{@iaxreg[0]} eq "") {
      if (@iaxreg[3] eq "rsa") {
        print IC<<__EOB__;
[@iaxreg[4]]
type=friend
auth=rsa
context=ddi
inkeys=@iaxreg[5]
username=@iaxreg[0]
host=@iaxreg[2]
qualify=yes
trunk=yes

__EOB__
      } else {
        if (@iaxreg[11] eq "parent") {
          if (@iaxreg[0] ne "") {
            $user="\nusername=@iaxreg[0]";
            if (@iaxreg[1] ne "") {
              $user .="\nsecret=@iaxreg[1]";
            }
          }
          print IC<<__EOB__;
[parent]
type=friend
auth=md5,plaintext$user
host=@iaxreg[2]
qualify=yes
trunk=yes
context=ddi

__EOB__
  if (@iaxreg[0] ne "") {
    print IC<<__EOB__;
[@iaxreg[0]]
type=user
auth=md5,plaintext$user
context=ddi
trunk=yes

__EOB__
          }
        } else {
        print IC<<__EOB__;
[@iaxreg[4]]
type=friend
auth=@iaxreg[3]
context=ddi
secret=@iaxreg[1]
username=@iaxreg[0]
host=@iaxreg[2]
qualify=yes
trunk=yes

__EOB__
        }
      } 
      $isiaxuser{@iaxreg[0]}="TRUE";
    }
    if (@iaxreg[2] eq "gateway.freshtel.net") {
      print IC<<__EOB__;
[*@iaxreg[4]]
type=friend
auth=@iaxreg[3]
context=ddi
secret=@iaxreg[1]
username=@iaxreg[0]
host=@iaxreg[2]
trunk=yes

__EOB__
    }
  }

  print IC<<__EOB__;
[default]
requirecalltoken=no
type=user
auth=plaintext
context=ddi
trunk=yes

[guest]
requirecalltoken=no
type=user
auth=plaintext
context=ddi
trunk=yes

__EOB__
  close(IC);
}

sub printastagent() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk", $sqlvoippass) or return;
  open(AAC,">agents.conf");
  chmod(0600,"agents.conf");
  print AAC "[agents]\n";
  print AAC "autologoffunavail=yes\n";
  print AAC "ackcall=no\n";
  print AAC "endcall=no\n";
  $getagent=$dbh->prepare("SELECT 'agent => '||name||',,'||fullname from users left outer join astdb on (family='LocalPrefix' AND key=substr(name,1,2)) where value='1' ORDER BY name");
#  $getagent=$dbh->prepare("SELECT 'agent => '||name||','||secret||','||fullname from users left outer join astdb on (family='LocalPrefix' AND key=substr(name,1,2)) where value='1'");
  $getagent->execute;
  
  while(@row=$getagent->fetchrow_array) {
    print AAC @row[0] . "\n";
  }

  close(AAC);
}

sub printgenmon() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk", $sqlvoippass) or return;
  open(BF,">ast_monitor");

  $getsip=$dbh->prepare("select ipaddr from sipfriends where ipaddr != '0.0.0.0' AND length(name) < 4");
  $getsip->execute;

  while(@row=$getsip->fetchrow_array) {
    if ($seenp{@row[0]} eq "") {
      $seenp{@row[0]}=1;
      push(@peers,@row[0]);
    }
  }
  $getiax=$dbh->prepare("select ipaddr from iaxfriends where ipaddr != '0.0.0.0' AND ipaddr != '' AND length(name) < 4;"); 
  $getiax->execute;
  while(@row=$getiax->fetchrow_array) {
    if ($seenp{@row[0]} eq "") {
      $seenp{@row[0]}=1;
      push(@peers,@row[0]);
    }
  }

  print BF<<__EOF__;
#!/bin/bash

__EOF__

  sort(@peers);
  foreach $peer (@peers) {
    print BF "/usr/sbin/asterisk_monitor --host=" . $peer . "\n";
  }
  close(BF)
}

sub printmisdn() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk","$sqlvoippass") or return;
  $isdnportq="SELECT astdb.value,ians.value,irrr.value,rxgain.value,txgain.value,iports.value,fports.value FROM astdb LEFT OUTER JOIN astdb AS ians ON (ians.family=astdb.family AND ians.key='mISDNimm') LEFT OUTER JOIN astdb AS irrr ON (irrr.family=astdb.family AND irrr.key='mISDNrr') LEFT OUTER JOIN astdb AS rxgain ON (rxgain.family=astdb.family AND rxgain.key='mISDNgainrx') LEFT OUTER JOIN astdb AS txgain ON (txgain.family=astdb.family AND txgain.key='mISDNgaintx') LEFT OUTER JOIN astdb AS iports ON (iports.family=iports.family AND iports.key='mISDNinports') LEFT OUTER JOIN astdb AS fports ON (fports.family=fports.family AND fports.key='mISDNfwdports') WHERE astdb.family='Setup' AND astdb.key='mISDNports'";
  $getisdnport=$dbh->prepare($isdnportq);
  $getisdnport->execute;
  @row=$getisdnport->fetchrow_array;
  if (@row[0] >= 0) {
    open(IC,">misdn.conf");

    if (length(@row[0]) == 1) {
      for($cnt=1;$cnt<=@row[0];$cnt++) {
        $conts .=$cnt . ",";
      }
      chop $conts;
    } else {
      $conts=@row[0];
    }

    $iconts=@row[5];
    $fconts=@row[6];

    if ((@row[2] eq "1")  && (@row[0] > "1")) {
      $method="round_robin";
    } else {
      $method="standard";
    }
    if (@row[3] eq "") {
      @row[3]=2;
    }
    if (@row[4] eq "") {
      @row[4]=-1;
    }
    print IC<<__EOF__;
[general]
debug=0
tracefile=/var/log/asterisk/misdn.log
bridging=yes
stop_tone_after_first_digit=yes
append_digits2exten=yes
dynamic_crypt=no
ntdebugflags=0
ntdebugfile=/var/log/asterisk/misdn-nt.log

[default]
allowed_bearers=all
far_alerting=no
rxgain=@row[3]
txgain=@row[4]
te_choose_channel=yes
l1watcher_timeout=180
pmp_l1_check=yes
hdlc=no
context=ddi
language=en
musicclass=default
method=$method
dialplan=4
localdialplan=0
cpndialplan=0
nationalprefix=0
internationalprefix=09
presentation=-1
screen=-1
block_on_alarm=yes
always_immediate=no
senddtmf=yes
hold_allowed=no
early_bconnect=yes
incoming_early_audio=no
echocancel=yes
;echocancelwhenbridged=yes
;echotraining=no
need_more_infos=no
jitterbuffer=4000
jitterbuffer_upper_threshold=0
;callgroup=1
;pickupgroup=1
max_incoming=-1
max_outgoing=-1
faxdetect_context=ddi
faxdetect=incoming
faxdetect_timeout=60
msns=*
__EOF__
    if ($conts ne "") {
      print IC<<__EOF__;

[out]
ports=$conts
context=ddi
__EOF__
    }
    if (@row[1] eq "1") {
      print IC "immediate=yes\n";
    }

    if ((@row[5] ne "") && (@row[5] ne "0")) {
      print IC "\n[in]\n";
      print IC "ports=" . $iconts . "\n";
      print IC "context=ddi\n";
      if (@row[1] eq "1") {
        print IC "immediate=yes\n";
      }
    }
    if ((@row[6] ne "") && (@row[6] ne "0")) {
      print IC "\n[fwd]\n";
      print IC "ports=" . $fconts . "\n";
      print IC "context=ddi\n";
      if (@row[1] eq "1") {
        print IC "immediate=yes\n";
      }
    }
    $isdngrpq="SELECT 'out'||substr(key,11,1),value FROM astdb WHERE family='Setup' AND key ~ '^mISDNports[0-9]' ORDER BY key";
    $getigrps=$dbh->prepare($isdngrpq);
    $getigrps->execute;
    while(@grow=$getigrps->fetchrow_array) {
      if ((@grow[1] ne "") && (@grow[1] ne "0")) {
        print IC "\n[" . @grow[0] . "]\n";
        print IC "ports=" . @grow[1] . "\n";
        print IC "context=ddi\n";
        if (@row[1] eq "1") {
          print IC "immediate=yes\n";
        }
      }
    }
    close(IC);
  }
}

sub printzapata() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk","$sqlvoippass") or return;

  if ((! -e "/etc/.firstboot") && (! -e "/etc/.needsreconf")) {
    $index=0;

    $getsdef=$dbh->prepare("SELECT substr(key,4),value from astdb where family = 'Setup' AND key ~ '^PRI'");
    $getsdef->execute;
    while(@sdrow=$getsdef->fetchrow_array) {
      if (@sdrow[0] eq "coding") {
        if (@sdrow[1] eq "hdb3") {
          $spandef{'t1setup'}.=@sdrow[0] . "='b8zs',";
        }
      } elsif (@sdrow[0] eq "crc4") {
        if (@sdrow[1] eq "1") {
          $spandef{'t1setup'}.=@sdrow[0] . "='f',";
        }
        @sdrow[1]=@sdrow[1]?"t":"f";
      } elsif (@sdrow[0] eq "framing") {
        $spandef{'t1setup'}.=@sdrow[0] . "='" . ((@sdrow[1] eq "cas")?"d4":"esf") . "',";
      }
      $spandef{'fields'}.="," . @sdrow[0];
      $spandef{'values'}.=",'" . @sdrow[1] . "'";
    }
    chop $spandef{'t1setup'};

    $getstime=$dbh->prepare("SELECT max(timingsource)+1 FROM zapspan");
    $getstime->execute;
    if ($getstime->rows > 0) {
      @trow=$getstime->fetchrow_array;
      $time=@trow[0];
    }

    if ($time eq "") {
      $time=1;
    }

    $pgrp{'E1'}=0;
    $getprigrp=$dbh->prepare("SELECT zaptrunk from zapgroup where signalling='pri_cpe' AND switchtype='euroisdn' order by zaptrunk LIMIT 1");
    $getprigrp->execute;        
    if ($getprigrp->rows > 0) {
      @zgrp=$getprigrp->fetchrow_array;
      $pgrp{'E1'}=@zgrp[0];
    }

    $pgrp{'T1'}=0;
    $getprigrp=$dbh->prepare("SELECT zaptrunk from zapgroup where signalling='pri_cpe' AND switchtype='national' order by zaptrunk LIMIT 1");
    $getprigrp->execute;        
    if ($getprigrp->rows > 0) {
      @zgrp=$getprigrp->fetchrow_array;
      $pgrp{'T1'}=@zgrp[0];
    }


    foreach $span (Dahdi::spans()) {
      if ($span->proto ne "") {
        $pristype=($span->proto eq "E1")?"euroisdn":"national";
        $getspan=$dbh->prepare("SELECT * FROM zapspan WHERE spannum = " . $span->num);
        $getspan->execute;
        if ($getspan->rows == 0) {
          if ($span->proto eq "E1") {
            $dchan=$index+16;
          } else {
            $dchan=$index+24;
          }

          if ($span->proto eq "E1") {
            $bchan=($index+1) . "-" . ($index+15) . "," . ($index+17) . "-" . ($index+31);
          } else {
            $bchan=($index+1) . "-" . ($index+23);
          }
          $dbh->do("INSERT INTO zapspan (spannum,timingsource,dchannel" . $spandef{'fields'} . ") VALUES (" . $span->num . "," . $time . "," . $dchan . $spandef{'values'} . ")");
          $time++;
          if ($span->proto ne "E1") {
            $dbh->do("UPDATE zapspan SET " . $spandef{'t1setup'} . " WHERE spannum = " . $span->num);
          }

          if ($pgrp{$span->proto} == 0) {
            $getdgrp=$dbh->prepare("SELECT count(zaptrunk)+1 FROM zapgroup");
            $getdgrp->execute;
            if ($getdgrp->rows > 0) {
              @zgrp=$getdgrp->fetchrow_array;
              if (@zgrp < 4) {
                $pgrp{$span->proto}=@zgrp[0];
              }
              if ($pgrp{$span->proto} eq "") {
                $pgrp{$span->proto}=1;
              }
              $dbh->do("INSERT INTO zapgroup (zaptrunk,signalling,faxdetect,busydetect,switchtype) VALUES (" . $pgrp{$span->proto} . ",'pri_cpe','no','no','" . $pristype . "')");
            }
          }
          if ($pgrp{$span->proto} > 0) {
            $dbh->do("INSERT INTO zapchan (zaptrunk,channel) VALUES (" . $pgrp{$span->proto} . ",'" . $bchan . "')");
          }
        }
      } else {
        $firsta=$index+1;
        $lasta=$firsta;
        $firstas=$index+1;
        $lastas=$firstas;
        foreach $chan ($span->chans()) {
          $checkchan=$dbh->prepare("SELECT id FROM astdb WHERE key='ZAPLine' AND value='" . $chan->num . "'");
          $checkchan->execute;
          $chantype{$chan->num}=$chan->type;
          if (($chan->type eq "FXO") && ($chan->info eq "")) {
            if ($lasta == ($chan->num-1)) {
              $lasta=$chan->num;
            } else {
              if (($lasta == $firsta) && ($chan->num > ($lasta+1))) {
                if ($chantype{$firsta} eq "FXO") {
                  push(@fxo,$firsta);
                }
                $firsta=$chan->num;
                $lasta=$firsta;
              }
            }
            if ($lasta < $chan->num) {
              push(@fxo,$firsta . "-" . $lasta);
              $firsta=$chan->num;
              $lasta=$firsta;
            }
          } elsif (($chan->type eq "FXO") && ($chan->info ne "")) {
            if ($chan->num < $lasta) {
              push(@fxo,$lasta);
            }
            $firsta=$chan->num+1;
            $lasta=$firsta;
          } elsif (($chan->type eq "FXS") && ($checkchan->rows == 0)) {
            if ($lastas == ($chan->num-1)) {
              $lastas=$chan->num;
            } else {
              if (($lastas == $firstas) && ($chan->num > ($lastas+1))) {
                if ($chantype{$firstas} eq "FXS") {
                  push(@fxs,$firstas);
                }
                $firstas=$chan->num;
                $lastas=$firstas;
              }              
            }
            if ($lastas < ($chan->num)) {
              push(@fxs,$firstas . "-" . $lastas);
              $firstas=$chan->num;
              $lastas=$firstas;
            }
          } elsif (($chan->type eq "FXS") && ($checkchan->rows != 0)) {
            if (($chan->num < $lastas) && ($chantype{$lastas} eq "FXS")) {
              push(@fxs,$lastas);
            } elsif ($chan->num == ($lastas + 1)) {
              if ($lastas > $firstas) {
                push(@fxs,$firstas . "-" . $lastas);
              } elsif ($chantype{$lastas} eq "FXS") {
                push(@fxs,$lastas);
              }
            }            
            $firstas=$chan->num+1;
            $lastas=$firstas;
          }
        }
        if ($lasta > $firsta) {
          push(@fxo,$firsta . "-" . $lasta);
        }
        if ($lastas > $firstas) {
          push(@fxs,$firstas . "-" . $lastas);
        }
      }
      if (($lastas ne "" ) && ($lastas == $firstas)  && (-e "/dev/dahdi/" . $firstas) && ($chantype{$lastas} eq "FXS")) {
        $checkchan=$dbh->prepare("SELECT id FROM astdb WHERE key='ZAPLine' AND value='" . $lastas . "'");
        $checkchan->execute;
        if ($checkchan->rows == 0) {
          push(@fxs,$firstas);
        }
      }
      if (($lasta == $firsta)  && (-e "/dev/dahdi/" . $firsta) && ($chantype{$lasta} eq "FXO")) {
        push(@fxo,$firsta);
      }
      $index=$index+$span->chans();
    }

    $agrp=0;
    $getanagrp=$dbh->prepare("SELECT zaptrunk from zapgroup where signalling='fxs_ks' order by zaptrunk LIMIT 1");
    $getanagrp->execute;        
    if ($getanagrp->rows > 0) {
      @dagrp=$getanagrp->fetchrow_array;
      $agrp=@dagrp[0];
    }
    if (@fxo > 0) {
      if ($agrp == 0) {
        $getdgrp=$dbh->prepare("SELECT count(zaptrunk)+1 FROM zapgroup");
        $getdgrp->execute;
        if ($getdgrp->rows > 0) {
          @dagrp=$getdgrp->fetchrow_array;
          if (@dagrp < 4) {
            $agrp=@dagrp[0];
          }
          $dbh->do("INSERT INTO zapgroup (zaptrunk,faxdetect) VALUES (" . $agrp . ",'no')");
        }
      }
      $achan=join(",",@fxo);
      $dbh->do("INSERT INTO zapchan (zaptrunk,channel) VALUES (" . $agrp . ",'" . $achan . "')");
    }

    $gettrunk=$dbh->prepare("SELECT key,value from astdb where family = 'Setup' and key ~ '(^Trunk\$)|(^Trunk[0-9]\$)' AND value != 'NONE'");
    $gettrunk->execute;
    if ($gettrunk->rows == 0) {
      $tnum="";
      if ($pgrp{'E1'} > 0) {
        $dbh->do("UPDATE astdb SET VALUE='Zap/r" . $pgrp{'E1'} . "/' WHERE family='Setup' AND key='Trunk" . $tnum . "'");
        $tnum++;
        if ($tnum == 1) {
          $tnum++;
        }
      }
      if ($pgrp{'T1'} > 0) {
        $dbh->do("UPDATE astdb SET VALUE='Zap/r" . $pgrp{'T1'} . "/' WHERE family='Setup' AND key='Trunk" . $tnum . "'");
        $tnum++;
        if ($tnum == 1) {
          $tnum++;
        }
      }
      if (-e "/dev/mISDN") {
        $dbh->do("UPDATE astdb SET VALUE='mISDN/g:out/' WHERE family='Setup' AND key='Trunk" . $tnum . "'");
        $tnum++;
        if ($tnum == 1) {
          $tnum++;
        }
      }
      if ($agrp > 0) {
        $dbh->do("UPDATE astdb SET VALUE='Zap/r" . $agrp . "/' WHERE family='Setup' AND key='Trunk" . $tnum . "'");
        $tnum++;
        if ($tnum == 1) {
          $tnum++;
        }
      }
    }
  }

  if ( -e "/dev/dahdi") {
    $tdmtransfer="useincomingcalleridondahditransfer=yes";
    open(ZC,">chan_dahdi.conf");
  } else {
    $tdmtransfer="useincomingcalleridonzaptransfer=yes";
    open(ZC,">zapata.conf");
  }

print ZC <<__EOB__;
;[trunkgroups]
;trunkgroup=1,16
;spanmap=1,1

[channels]
mohinterpret=default
mohsuggest=default

;MFC/R2 Configuration
mfcr2_call_files => no
mfcr2_logging => nothing
mfcr2_mfback_timeout => -1
mfcr2_metering_pulse_timeout => -1
__EOB__

  $mfcr2q="SELECT substr(key,3)||' => '||case when ( value = '1' ) then  'yes' ELSE CASE when ( value = '0' ) then 'no' ELSE value END END from astdb where family='Setup' AND key ~ '^E1' order by key";
  $getmfcr2=$dbh->prepare($mfcr2q);
  $getmfcr2->execute;
  while(@row=$getmfcr2->fetchrow_array) {
    print ZC @row[0] . "\n";
  }

print ZC <<__EOB__;

;PRI Settings
prilocaldialplan=local
pridialplan=local
pritimer => t309,90000
;pritimer => t203,20000
;pritimer => K,21
;pritimer => N,0
hidecallerid=no

;internationalprefix = 00
;nationalprefix = 0
;localprefix = 011
;privateprefix = 07115678
;unknownprefix =

;Common Settings For All Extensions
immediate=no
usecallerid=yes
hidecallerid=no
callwaitingcallerid=yes
threewaycalling=yes
transfer=yes
cancallforward=yes
callreturn=yes
$tdmtransfer
callwaiting=yes
group=63
flash=250
rxflash=100
__EOB__

#  if (@fxs > 0) {
#    print ZC "context=6\n";
#    print ZC "signalling=fxo_ks\n";
#    print ZC "channel=" . join(",",@fxs) . "\n\n";
#  } else {
#    print ZC "\n";
#  }

  $zapchanq=" SELECT name as label,'\"'||fullname||'\" <'||name||'>' as callerid,mailbox||'\@'||context as mailbox,context,callgroup,pickupgroup,case when (zsig.value is not null) then zsig.value else 'fxo_ks' end as signalling,case when (zaprxgain.value is not null) then zaprxgain.value else '0' end as rxgain,case when (zaptxgain.value is not null) then zaptxgain.value else '0' end as txgain,case when (zap.value is not null and zap.value != '0') then zap.value else '' end as channel from users left outer join astdb as zap on (zap.family=name AND zap.key='ZAPLine') left outer join astdb as cli on (cli.family=name AND cli.key='CLI') left outer join astdb as zsig on (zsig.family=name and zsig.key='ZAPProto') left outer join astdb as zaprxgain on (zaprxgain.family=name and zaprxgain.key='ZAPRXGain') left outer join astdb as zaptxgain on (zaptxgain.family=name and zaptxgain.key='ZAPTXGain') left outer join astdb as lpre on (lpre.family='LocalPrefix' AND lpre.key=substring(name,1,2)) where lpre.value=1 and length(name) = 4 and zap.value is not null and zap.value != '0' ORDER BY name";

  $getzap=$dbh->prepare($zapchanq);
  $getzap->execute;

  while(@row=$getzap->fetchrow_array) {
#    $zapfaxq="SELECT value FROM astdb where family='" . @row[0] . "' AND key='EFAXD'";
#    $zapfax=$dbh->prepare($zapfaxq);
#    $zapfax->execute;
#    @fax=$zapfax->fetchrow_array;
#    if (@fax[0] eq "1") {
#      print @fax[0] . "\n";
#    }
    print ZC ";Exten " . @row[1] . " (" . @row[0] . ")\n";
    for($rdcnt=1;$rdcnt<$#row;$rdcnt++){
      print ZC $getzap->{NAME}[$rdcnt] . "=" . @row[$rdcnt] . "\n";
    }
    if (@row[$#row] != "") {
      print ZC "channel=" . @row[$#row] . "\n"; 
    }
    print ZC "\n";
  }

print ZC <<__EOB__;
;Common Settings For All Trunk Lines
context=ddi
callerid=asreceived
mailbox=
callgroup=0
pickupgroup=0

__EOB__

  $zapchanq="SELECT * FROM zapgroup WHERE zaptrunk > 0 AND zaptrunk < 5 ORDER BY zaptrunk";
  $getzap=$dbh->prepare($zapchanq);
  $getzap->execute;

  while(@row=$getzap->fetchrow_array) {
    print ZC ";Digium Trunk Group @row[0]\n";
    print ZC "group=@row[0]\n";
    for($rcnt=1;$rcnt<=$#row;$rcnt++) {
      $name=$getzap->{NAME}[$rcnt];
      if ($name eq "overlapdial") {
        if ($row[$rcnt] eq "yes") {
          print ZC "immediate=no\n";
        } else {
          print ZC "immediate=yes\n";
        }
      }
      print ZC $name . "=" . $row[$rcnt] . "\n";
    }
    $zapchansq="SELECT rxgain,txgain,channel FROM zapchan WHERE zaptrunk ='" . @row[0] . "'";
    $getzapc=$dbh->prepare($zapchansq);
    $getzapc->execute;
    while(@crow=$getzapc->fetchrow_array) {
      for($rcntc=0;$rcntc<=$#crow;$rcntc++) {
        print ZC $getzapc->{NAME}[$rcntc] . "=" . $crow[$rcntc] . "\n";
      }
    }
    print ZC "\n";
  }

  close(ZC);

  if ( -e "/dev/dahdi") {
    open(ZCR,">dahdir.conf");
    open(ZC,">dahdi.conf");
    open(ZDC,">dahdi_dyn.conf");
  } else {
    open(ZCR,">zaptelr.conf");
    open(ZC,">zaptel.conf");
    open(ZDC,">zaptel_dyn.conf");
  }
  $zapspanq="SELECT 'span='||spannum||','||timingsource||','||lbo||','||framing||','||coding||case when (crc4) then '' else ',crc4' end||case when (yalarm) then ',yellow' else '' end from zapspan ORDER BY spannum";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  $zrcnt=0;
  while(@row=$getzap->fetchrow_array) {
    print ZCR @row[0] . "\n";
    $zrcnt++;
  }
  if ($zrcnt > 0) {
    print ZCR "loadzone=za\ndefaultzone=za\n";
  }
  close(ZCR);

  $chans="";
  $zapspanq="SELECT 'span='||spannum||','||timingsource||','||lbo||','||framing||','||coding||case when (crc4) then ',crc4' else '' end||case when (yalarm) then ',yellow' else '' end,dchannel from zapspan ORDER BY spannum";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    print ZC @row[0] . "\n";
    if ((@row[1] ne "") && (@row[1] ne "0")){
      $chans.=@row[1] . ",";
    }
  }

  if ($chans ne "") { 
    chop($chans);
    print ZC "dchan=" . $chans . "\n";
  }

  $zapspanq="SELECT driver||','||address||','||channels||','||timing,dchannel FROM dynspan WHERE channels > 0 ORDER BY id";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    print ZDC "dynamic=" . @row[0] . "\n";
    if ((@row[1] ne "") && (@row[1] ne "0")){
      $chans.=@row[1] . ",";
    }
  }

  if ($chans ne "") { 
    chop($chans);
    print ZDC "dchan=" . $chans . "\n";
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where channel > '0' AND signalling ~ '^pri_(cpe)|(net)\$' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }

  $ecchans="";
  if ($chans ne "") { 
    chop($chans);
    print ZC "bchan=" . $chans . "\n";
    $ecchans=$chans
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where (zaptrunk = 0 OR signalling = 'fxs_ks') AND channel > '0' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }
  if ($chans ne "") { 
    chop($chans);
    print ZC "fxsks=" . $chans . "\n";
    if ($ecchans ne "") {
      $ecchans.="," . $chans
    } else {
      $ecchans=$chans
    }
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where signalling = 'fxo_ks' AND channel > '0' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }
  if ($chans ne "") { 
    chop($chans);
    print ZC "fxoks=" . $chans . "\n";
    if ($ecchans ne "") {
      $ecchans.="," . $chans
    } else {
      $ecchans=$chans
    }
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where signalling = 'fxs_ls' AND channel > '0' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }
  if ($chans ne "") { 
    chop($chans);
    print ZC "fxsls=" . $chans . "\n";
    if ($ecchans ne "") {
      $ecchans.="," . $chans
    } else {
      $ecchans=$chans
    }
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where signalling = 'fxo_ls' AND channel > '0' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }
  if ($chans ne "") { 
    chop($chans);
    print ZC "fxols=" . $chans . "\n";
    if ($ecchans ne "") {
      $ecchans.="," . $chans
    } else {
      $ecchans=$chans
    }
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where signalling = 'fxs_gs' AND channel > '0' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }
  if ($chans ne "") { 
    chop($chans);
    print ZC "fxsgs=" . $chans . "\n";
    if ($ecchans ne "") {
      $ecchans.="," . $chans
    } else {
      $ecchans=$chans
    }
  }

  $chans="";
  $zapspanq="SELECT channel from zapchan left outer join zapgroup using (zaptrunk) where signalling = 'mfcr2' AND channel > '0' ORDER BY channel";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    $chans.=@row[0] . ",";
  }
  if ($chans ne "") { 
    chop($chans);
    print ZC "cas=" . $chans . ":1101\n";
    if ($ecchans ne "") {
      $ecchans.="," . $chans
    } else {
      $ecchans=$chans
    }
  }


  $chans="";
  $zapspanq="SELECT zap.value,case when (zsig.value is null) then 'fxoks' else case when (substr(zsig.value,1,3) = 'fxo') then 'fxo'||substr(zsig.value,5) else zsig.value end end from astdb as zap left outer join astdb as zsig ON (zap.family=zsig.family AND zsig.key='ZAPProto') where zap.key='ZAPLine' and zap.value != 0 and zap.value is not null order by zap.value";
  $getzap=$dbh->prepare($zapspanq);
  $getzap->execute;
  while(@row=$getzap->fetchrow_array) {
    if ($echans{@row[1]} eq "") {
      push(@ctypes,@row[1]);
    }
    $echans{@row[1]}.=@row[0] . ",";
  }

#  if (@fxs > 0) {
#    if ($echans{'fxoks'} eq "") {
#      push(@ctypes,"fxoks");
#    }
#    $echans{'fxoks'}.=join(",",@fxs) . ",";
#  }

  foreach $ctype (@ctypes) {
    chop($echans{$ctype});
    print ZC $ctype . "=" . $echans{$ctype} . "\n";
    if ($ecchans ne "") {
      $ecchans.="," . $echans{$ctype};
    } else {
      $ecchans=$echans{$ctype};
    }
 }
  
  print ZC "loadzone=za\ndefaultzone=za\n";


  if (( -e "/dev/dahdi") && ($ecchans != "")) {
    print ZC "echocanceller=oslec," . $ecchans . "\n";
  }

  close(ZC);
  close(ZDC);
}

sub printblf() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk","$sqlvoippass") or return;

  open(BLF,">exten_blf.conf");

  print BLF<<__EOF__;
;Busy Lamp Field Indication
;DO NOT MODIFY


;Parked Calls
__EOF__
  for ($pcnt=1;$pcnt < 50;$pcnt++) {
    if ($pcnt < 10) {
      $pcnto="0" . $pcnt;
    } else {
      $pcnto=$pcnt;
    }
    print BLF "exten => 7" . $pcnto . ",hint,park:7" . $pcnto . "\@parkedcalls\n";
  }

  print BLF<<__EOF__;

;Extensions
__EOF__

  $blfquery="SELECT CASE WHEN (zapuser.value > 0) THEN 'exten => '||name||',hint,Zap/'||zapuser.value WHEN (iaxuser.value > 0) THEN 'exten => '||name||',hint,IAX2/'||name ELSE 'exten => '||name||',hint,SIP/'||name END FROM users left outer join astdb as iaxuser on (iaxuser.family=name AND iaxuser.key='IAXLine') left outer join astdb as zapuser on (zapuser.family=name AND zapuser.key='ZAPLine') left outer join astdb as h323user on (h323user.family=name AND h323user.key='H323Line') where length(name)=4 ORDER BY name";

#  $blfquery="SELECT CASE WHEN (zapuser.value > 0) THEN 'exten => '||name||',hint,SLA:Zap/'||zapuser.value WHEN (iaxuser.value > 0) THEN 'exten => '||name||',hint,SLA:IAX2/'||name ELSE 'exten => '||name||',hint,SLA:SIP/'||name END FROM users left outer join astdb as iaxuser on (iaxuser.family=name AND iaxuser.key='IAXLine') left outer join astdb as zapuser on (zapuser.family=name AND zapuser.key='ZAPLine') left outer join astdb as h323user on (h323user.family=name AND h323user.key='H323Line') where length(name)=4 ORDER BY name";

  $getblf=$dbh->prepare($blfquery);
  $getblf->execute;
  while(@row=$getblf->fetchrow_array) {
    print BLF @row[0] . "\n";
  }

#  $blfquery="SELECT DISTINCT peer FROM blflist ORDER BY peer";
#  $getblf=$dbh->prepare($blfquery);
#  $getblf->execute;
#  while(@row=$getblf->fetchrow_array) {
#    print BLF "exten => " . @row[0] . ",hint,SIP/" . @row[0] . "\n";
#    print BLF "exten => " . @row[0] . ",1,NoOp\n";
#  }

  close(BLF);
}

sub printasth323() {
  $lint=$sysconf{'Internal'};
  @eidat=split(/\|/,$interface{$lint});
  $localip=@eidat[1];

  if ($h323number eq "") {
    $h323gwid=$dnsconf{'Hostname'};
  } else {
    $h323gwid=$h323number;
  }

#  $dsn = "DBI:ODBC:Asterisk";
#  $dbh = DBI->connect($dsn,"asterisk","$sqlvoippass") or return;
#  $getid=$dbh->prepare("select secret from users where name = '" . $h323gwid . "'");
#  $getid->execute;
#  @row=$getid->fetchrow_array;

  open(OHC,">
ooh323.conf");
  print OHC<<__EOF__;
[general]
port=1721   
bindaddr=$localip
tos=lowdelay 
amaflags = default
;accountcode=h3230101
disallow=all
allow=g723 
allow=g729 
allow=gsm  
allow=ulaw
allow=alaw
t38support=yes
faxdetect=yes
dtmfmode=rfc2833
gatekeeper=$localip
h323id=$h323gwid
gateway=yes
faststart=no
h245tunneling=yes   
mediawaitforconnect=yes
;e164=100
;callerid=asterisk
context=h323 
rtptimeout=60
;t35country=9F
;manufacturer=Distrotech Solutions PTY (LTD)
;vendorid=Asterisk

__EOF__
  close(OHC);

#  open(HC,">h323.conf");
#  print HC<<__EOF__;
#[general]
#port = 1721
#bindaddr = $h323permip
#tos_audio=ef
#cos_audio=5
#amaflags = default
#;accountcode=lss0101
#disallow=all
#allow=g723,g729,gsm,alaw
#dtmfmode=rfc2833
#gatekeeper = $h323permip
#gatewayid = $h323gwid
#secret = @row[0]
#AllowGKRouted = yes
#AcceptAnonymous = yes
#UserByAlias = yes
#context=h323
#progress_setup = 0
#progress_alert = 0
#progress_audio = yes
#tunneling=qsig
#hold=h450
#jbenable = yes
#jbforce = no
#jbmaxsize = 200
#jbresyncthreshold = 1000
#jbimpl = adaptive
#jblog = no
#
#[$h323gwid]
#type=h323
#context=h323
#fastStart=no
#__EOF__
#  close(HC);
}

sub printgnugkh323() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk","$sqlvoippass") or return;
  open(HC,">gnugk.conf");

  $ethint=$sysconf{'Internal'};
  @intidata=split(/\|/,$interface{$ethint});
  $intnm=@intidata[2];
  $localip=@intidata[1];


  foreach $iface (@ints) {
    if ($iface ne $sysconf{'Internal'}) {
      @idata=split(/\|/,$interface{$iface});
      if ((@idata[1] ne "0.0.0.0") && ($hlindone{@idata[1]} eq "")) {
        $hlinkip.="," . @idata[1];
        $hlindone{@idata[1]}=1;
      }
    }
  }

  if ($h323number ne "") {
    $h323gwid=$h323number;
    $h323gwpre="!" . $h323prefix;
  } else {
    $h323gwid=$dnsconf{'Hostname'};
    $h323prefix="";
    $h323gwpre="";
#0009,09,9,8,7,6,5,4,3,2,1";
  }

  if ($dnsconf{'Hostname'}) {
    $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
  } else {
    $fqdn=$dnsconf{'Domain'}
  }

  if ($sysconf{'Internal'} ne $sysconf{'External'}) {
    $gkrouted=0;
  } else {
    $gkrouted=1;
  }

  $getid=$dbh->prepare("select h323gkid,ipaddr,h323neighbor,fullname from users where name = '" . $h323gwid . "'");
  $getid->execute;
  $h323gkid=$dnsconf{'Hostname'} . "GK";
  @row=$getid->fetchrow_array;
  if (@row eq "0") {
    do {
      $_=join('',(0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64, rand 64, rand 64, rand 64, rand 64, rand 64,rand 64]);
    } until ((/[0-9]/) && (/[a-z]/) && (/[A-Z]/));
    $addast=$dbh->prepare("INSERT INTO users (defaultuser,name,secret,password,h323permit,h323gkid,ipaddr,h323neighbor,agentid) VALUES ('" . $h323gwid . "','" . $h323gwid . "','" . $_ . "','" . $_ . "','allow','" . $h323gkid . "','" . $localip . "','t',0)");
    $addast->execute;
  } else { 
    if (@row[0] ne "") {
      $h323gkid=@row[0];
    }
    if ((@row[1] ne  $localip) || (@row[2] ne "1") || (@row[3] ne $fqdn)){
      $addast=$dbh->prepare("UPDATE users set fullname='" . $fqdn . "',h323neighbor='t',h323gkid='" . $h323gkid ."',agentid=0,h323permit='allow',ipaddr='" . $localip . "' WHERE name='" . $h323gwid . "'");
      $addast->execute;
    }
  }
  $getlpre=$dbh->prepare("select lpad(trunkprefix,7,'0') from trunk where h323reggk = '" . $h323gkid . "' AND (protocol != 'OH323' OR h323gkid='" . $h323gwid . "')");
  $getlpre->execute;
  while(@rowpre=$getlpre->fetchrow_array) {
    if (@rowpre[0] ne "") {
      $h323gwpre=$h323gwpre . "," . @rowpre[0];
    }
  }


  $getpre=$dbh->prepare("select h323outprefix,h323aprefix,description from trunk where h323gkid='" . $h323gwid . "' AND h323reggk='" . $h323gkid . "' AND providerip='" . $localip . "'");
  $getpre->execute;
  @int=$getpre->fetchrow_array;
  if (@int eq "0") {
    $addast=$dbh->prepare("INSERT INTO trunk (providerip, h323outprefix, h323gkid, h323reggk, port, h323aprefix,description) VALUES ('" . $localip . "','" . $h323prefix . "','" . $h323gwid . "','" . $h323gkid . "','1721','" . $h323gwpre . "','" . $fqdn . "')");
    $addast->execute;
  } elsif ((@int[0] ne $h323prefix) || (@int[1] ne $h323gwpre) || (@int[2] ne $fqdn)) {
    $addast=$dbh->prepare("UPDATE trunk set description='" . $fqdn . "',h323outprefix = '" . $h323prefix . "',port='1721' where h323gkid='" . $h323gwid . "' AND h323reggk='" . $h323gkid . "' AND providerip='" . $localip . "'");
#    $addast=$dbh->prepare("UPDATE trunk set description='" . $fqdn . "',h323outprefix = '" . $h323prefix . "',h323aprefix='" . $h323gwpre . "',port='1721' where h323gkid='" . $h323gwid . "' AND h323reggk='" . $h323gkid . "' AND providerip='" . $localip . "'");
    $addast->execute;
  }

print HC<<__EOF__;
[Gatekeeper::Main]
Fourtytwo=42
TimeToLive=90
Name=$h323gkid
Home=$localip$hlinkip,127.0.0.1
TimestampFormat=ISO8601

[GkStatus::Auth]
rule=explicit
127.0.0.1=yes

[RoutedMode]
GKRouted=$gkrouted
H245Routed=0
RemoveH245AddressOnTunneling=1
ShowForwarderNumber=1
ForwardOnFacility=1
RemoveCallOnDRQ=0
DropCallsByReleaseComplete=1
SendReleaseCompleteOnDRQ=1
AcceptUnregisteredCalls=1
SetupTimeout=15000
SignalTimeout=30000
AlertingTimeout=120000
CallSignalHandlerNumber=4
RtpHandlerNumber=2
CallSignalPort=1720
SocketCleanupTimeout=1000
Q931PortRange=10000-11999
H245PortRange=12000-12999

[Proxy]
Enable=0
ProxyForNAT=1
T120PortRange=13000-13999
RTPPortRange=15000-20000
InternalNetwork=$locallan/$intnm

[ModeSelection]
192.168.0.0/16=H245ROUTED,ROUTED,PROXY
172.16.0.0/12=H245ROUTED,ROUTED,PROXY
10.0.0.0/8=H245ROUTED,ROUTED,PROXY

[RoutingPolicy]
default=explicit,internal,neighbor,parent,catchall

[Routing::CatchAll]
CatchAllAlias=$h323gwid

[Gatekeeper::Auth]
AliasAuth=alternative;RRQ
SQLPasswordAuth=optional;RRQ
SQLAuth=sufficient;ARQ,LRQ,RRQ
default=deny;RRQ,ARQ,LRQ

[RasSrv::RRQAuth]
$h323gwid=sigip:$localip:1721
t38modem=sigip:$localip:1722

[SQLPasswordAuth]
Driver=PostgreSQL
Host=$sqlvoipserv
Database=asterisk
Username=asterisk
Password=$sqlvoippass
CacheTimeout=300
Query=SELECT secret FROM users WHERE name = '%1' OR h323gkid = '%1'
MinPoolSize=5

[SQLAuth]
Driver=PostgreSQL
Host=$sqlvoipserv
Database=asterisk
Username=asterisk
Password=$sqlvoippass
CacheTimeout=300
RegQuery=SELECT 1 FROM users WHERE (name='%u' OR h323gkid= '%g') AND (h323permit='%{gkip}' OR h323permit='%{callerip}' OR h323permit='allow');
NbQuery=SELECT 1 FROM users WHERE (name='%u' OR h323gkid= '%g' OR h323permit='%{gkip}' OR h323permit='%{nbip}' OR h323gkid= '%{nbid}') AND h323permit != '' AND h323permit != 'deny' AND h323gkid= '%g';
CallQuery=SELECT 1 FROM users WHERE (name='%u' OR h323gkid= '%g') AND (h323permit='%{callerip}' OR h323permit = 'allow' OR (h323permit = '' AND name='%u')) AND (h323prefix=SUBSTRING('%{Called-Station-Id}',1,length(h323prefix)) OR (name=SUBSTRING('%{Called-Station-Id}',1,length(name)) AND name='%u') OR ((h323prefix is NULL OR h323prefix='') AND h323gkid= '%g') OR (h323neighbor='t' AND h323gkid= '%g'));
MinPoolSize=5

[Gatekeeper::Acct]
SQLAcct=required;start,update,stop

[SQLAcct]
Driver=PostgreSQL
Host=$sqlvoipserv
Database=asterisk
Username=asterisk
Password=$sqlvoippass
StartQuery=INSERT INTO h323cdr (gkname,callnum,sessid,username,gkip,callid,confid,callerport,calleeport,srcinfo,destinfo,callingstationid,calledstationid,dialednumber,callerip,calleeip,setuptime) VALUES ('%g','%n','%s','%u','%{gkip}',replace('%{CallId}',' ',''),'%{ConfId}','%{caller-port}','%{callee-port}','%{src-info}','%{dest-info}','%{Calling-Station-Id}','%{Called-Station-Id}','%{Dialed-Number}','%{caller-ip}','%{callee-ip}','%{setup-time}')
UpdateQuery=UPDATE h323cdr SET callduration=%d,pdd=%p,ringtime=%{ring-time},totalduration=%t WHERE gkname = '%g' AND sessid = '%s'
StopQuery=UPDATE h323cdr SET callduration=%d,disconnectcause='%c',disconnecttime='%{disconnect-time}',connecttime='%{connect-time}' WHERE gkname = '%g' AND sessid = '%s'
StopQueryAlt=UPDATE h323cdr SET disconnectcause='%c',disconnecttime='%{disconnect-time}' WHERE gkname = '%g' AND sessid = '%s'

[SQLConfig]
Driver=PostgreSQL
Host=$sqlvoipserv
Database=asterisk
Username=asterisk
Password=$sqlvoippass
ConfigQuery=SELECT DISTINCT ON (gkid) 'RasSrv::GWRewriteE164',h323gkid AS gkid,CASE WHEN (trunk.h323gkid='$h323gwid' AND h323outprefix = '' AND trunkprefix >= 0) THEN 'out='||lpad(trunkprefix,7,'0')||'='||trunk.h323prefix WHEN (trunk.h323gkid='$h323gwid' AND trunkprefix is null AND h323outprefix != '') THEN 'in=.='||trunk.h323outprefix||'.' WHEN (trunk.h323gkid='$h323gwid' AND h323outprefix != '' AND trunkprefix >= 0) THEN 'out='||lpad(trunkprefix,7,'0')||'='||trunk.h323prefix||';in=.='||h323outprefix ELSE 'out='||lpad(trunkprefix,7,'0')||'='||trunk.h323prefix END AS rule from trunk  where h323reggk='%1' AND (h323outprefix != '' OR trunkprefix >= 0) AND protocol = 'OH323' order by gkid,rule DESC;
#PermanentEndpointsQuery=SELECT providerip,port,h323gkid,CASE WHEN trunkprefix >= 0 THEN CASE WHEN h323aprefix > '' THEN lpad(trunkprefix,7,'0')||','||h323aprefix ELSE lpad(trunkprefix,7,'0') END ELSE h323aprefix END from trunk where h323gkid !='' AND h323reggk = '%1' AND protocol = 'OH323'
NeighborsQuery=SELECT h323gkid,ipaddr,'1719',CASE WHEN (trunkprefix > 0 ) THEN lpad(trunkprefix,7,0) ELSE '*' END,NULL,NULL from users left outer join trunk using (h323gkid) where h323neighbor = 't' AND h323gkid != '%1'
rewriteE164Query=SELECT lpad(trunkprefix,7,'0'),'090'||lpad(trunkprefix,7,'0') from trunk where protocol != 'OH323'  AND h323reggk = '%1'

[RasSrv::RRQFeatures]
AcceptGatewayPrefixes=0

[RasSrv::ARQFeatures]
ArjReasonRouteCallToGatekeeper=0

[RasSrv::LRQFeatures]
ForwardHopCount=5
NeighborTimeout=1

[RewriteCLI]
out:any=any pi=allow,forward cli:.*=.

#[RasSrv::GWPrefixes]
#$h323gwid=$h323gwpre
__EOF__
  if ($h323number != "") {

#    $getpre=$dbh->prepare("SELECT lpad(trunkprefix,7,0) from trunk where h323gkid='" . $h323number . "'");
#    $getpre->execute;
#    @row=$getpre->fetchrow_array; 
#    if (@row[0] != "") {
#      @row[0]="," . @row[0];
#    }
#    $getlpre=$dbh->prepare("SELECT key FROM astdb WHERE family='LocalPrefix' AND value='1'");
#    $getlpre->execute;
#    while(@rowpre=$getlpre->fetchrow_array) {
#      $localpre=$localpre . "," . @rowpre[0];
#    }

print HC<<__EOB__

[Endpoint]
Gatekeeper=$h323server
UnregisterOnReload=1
NATKeepaliveInterval=180
RRQRetryInterval=1
H323ID=$h323number
Password=$h323password
EndpointIdentifier=$h323number
__EOB__
  }
  close(HC);
}

sub initcallshop() {
  $dsn = "DBI:ODBC:Asterisk";
  $dbh = DBI->connect($dsn,"asterisk","$sqlvoippass") or return;
  $getadmin=$dbh->prepare("select * from reseller where username = 'admin' and id=0");
  $getadmin->execute;

  $getrealm=$dbh->prepare("select domain from realm where id=0");
  $getrealm->execute;

  $csarow=$getadmin->rows;
  if ($csarow <= 0) {
    $adduser=$dbh->prepare("INSERT INTO reseller (username,userpass,description,credit,discount,realmid,id,buyrate,admin,oratio,minperiod)
                                          VALUES ('admin','admin','Master Account',0,0,0,0,'A','t',1000,0)");
    $adduser->execute;
  }

  $csrrow=$getrealm->rows;
  if ($csrrow <= 0) {
    $addrealm=$dbh->prepare("INSERT INTO realm VALUES 
                           (0,'Master Realm','callshop." . $dnsconf{'Domain'} . "')");
    $addrealm->execute;
  } else {
    @row=$getrealm->fetchrow_array;
    if (@row[0] ne "callshop." . $dnsconf{'Domain'}) {
      $uprealm=$dbh->prepare("UPDATE realm SET domain='callshop." . $dnsconf{'Domain'} . "' WHERE id=0");
      $uprealm->execute;
    }
  }
}

sub printrrdlim() {
  open(II,">intinfo.inc");
  chmod(0600,"intinfo.inc");
  $lcnt=0;
  print II "<%\n";
  if ($sysconf{'External'} eq "Dialup") {
    print II "\$ints[\"ppp0\"]=" . $tcctl{'Egress'}/8 . ";\n";
    print II "\$imq[\"ppp0\"]=0" . ";\n";
    print II "\$imqmax[0]=" . $tcctl{'Ingress'}/8 . ";\n";;
  } else {
    print II "\$ints[\"" . $sysconf{'External'} . "\"]=" . $tcctl{'Egress'}/8 . ";\n";
    print II "\$imq[\"" . $sysconf{'External'} . "\"]=0" . ";\n";
    print II "\$imqmax[0]=" . $tcctl{'Ingress'}/8 . ";\n";
  }
  foreach $alink (@vadsllink) {
    $lcnt++;
    @ldata=split(/\|/,$adsllink{$alink});
    print II "\$ints[\"ppp" . $lcnt . "\"]=" . @ldata[4]/8 . ";\n";;
    print II "\$imq[\"ppp" . $lcnt . "\"]=" . $lcnt . ";\n";
    print II "\$imqmax[" . $lcnt . "]=" . @ldata[3]/8 . ";\n";
  }
  print II "%>\n";
  close(II);
}


sub printiftab(){
  open(IFTAB,">iftab");
  chmod(0600,"iftab");
  foreach $iface (@ints) {    
    @idata=split(/\|/,$interface{$iface});
    @idata[0]=join(" ",split(/_/,@idata[0]));
    if ((index(@idata[3],"gtun") eq -1) && (index(@idata[3],":") eq -1) && (@idata[8] ne "00:00:00:00:00:00") && (@idata[8] ne "")) {
      printf(IFTAB"%-30smac  %s\n",@idata[3],@idata[8])
    }
  }
  close(IFTAB);
}

sub printodbcdsn() {
  open(DSN,">odbc.ini");
  chmod(0600,"odbc.ini");
print DSN<<__EOB__;
[Asterisk]
Description             = Asterisk Database DSN
Driver                  = /usr/lib/psqlodbc/psqlodbcw.so
Trace                   = Yes
TraceFile               = /var/log/asterisksql.log
Database                = asterisk
Servername              = $sqlvoipserv
Port                    = 5432
Protocol                = 6.4
ReadOnly                = No
RowVersioning           = No
ShowSystemTables        = No
ShowOidColumn           = No
FakeOidIndex            = No
Pooling                 = Yes
CPTimeout               = 120
SSL			= Yes
SSLMode			= require

[Master]
Description             = Asterisk Master Database DSN
Driver                  = /usr/lib/psqlodbc/psqlodbcw.so
Trace                   = Yes
TraceFile               = /var/log/mastersql.log
Database                = asterisk
Servername              = $sqlmvoipserv
Port                    = 5432
Protocol                = 6.4
ReadOnly                = No
RowVersioning           = No
ShowSystemTables        = No
ShowOidColumn           = No
FakeOidIndex            = No
Pooling                 = Yes
CPTimeout               = 120
SSL			= Yes
SSLMode			= require

__EOB__
  close(DSN);
}

sub printnfsexport() {
  open(NFE,">exports");
  chmod(0600,"exports");
  foreach $nfssh (@nfsshare) {
    @nfsdat=split(/\|/,$nfssh);
    $options=",";

    if (@nfsdat[2] ne "-") {
      $options .="anonuid=@nfsdat[2],";
      if (@nfsdat[3] ne "-") {
        $options .="anongid=@nfsdat[3],";
      }
    }

    if ((@nfsdat[5] eq "true") && (@nfsdat[2] ne "-")) {
      $options .="all_squash,";
    } elsif ((@nfsdat[5] eq "false") && (@nfsdat[2] ne "-")) {
      $options .="root_squash,";
    } else {
      $options .="no_root_squash,";
    }

    if (@nfsdat[4] eq "true") {
      $options .="ro,";
    } else {
      $options .="rw,";
    }
    chop $options;
    printf NFE ("%-50s%s(sync,no_subtree_check%s)\n",@nfsdat[1],@nfsdat[0],$options);
  }
  close(NFE);
}

sub printetcshadow() {
   local($pwcrypt)=@_;
   open(ESP,">shadow");
   chmod(0600,"shadow");
   if ($pwcrpt eq "") {
     $salt=join('',('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64, rand 64, rand 64, rand 64, rand 64, rand 64,rand 64]);
     $pwcrypt=unix_md5_crypt($ldapserv{'Password'},$salt);
   }
   print ESP "root:" . $pwcrypt . ":13305:0:99999:7:::\n";
   close(ESP);
}


sub printchilli() {
  open(CSC,">chilli.conf");
  open(CUS,">chilli-up");
  open(CWC,">chilli.php");

  if (($hspotint ne "") && ($hspotrange ne "")) {
    if ($dnsconf{'Hostname'}) {
      $fqdn="$dnsconf{'Hostname'}.$dnsconf{'Domain'}";
    } else {
      $fqdn=$dnsconf{'Domain'}
    }
    $ethint=$sysconf{'Internal'};
    @idata=split(/\|/,$interface{$ethint});

    @wrdat=split(/\//,$hspotrange);
    @ipwqu=split(/\./,@wrdat[0]);
    @ipwqu[3]++;
    $wrstart=join(".",@ipwqu);


    $salt=md5_hex($fqdn . $wrstart . $hspotrange . $hspotint . $sysconfig{'Serial'});

    print CSC <<__EOF__;
radiusserver1 127.0.0.1
radiusauthport 1645
radiusacctport 1646
radiussecret $radssecret
dhcpif $hspotint
uamserver https://$fqdn/hotspot
uamallowed 192.168.0.0/16
uamallowed 172.16.0.0/12
uamallowed 10.0.0.0/8
dns1 @idata[1]
domain $dnsconf{'Domain'}
uamsecret $salt
ipup /usr/bin/chilli-up
net $hspotrange
__EOF__

    print CUS<<__EOF__;
#!/bin/bash

/sbin/ip route add $hspotrange dev tun0 src $wrstart table Link
__EOF__

    print CWC<<__EOF__;
<?php
define('HOTSPOT_NAME', 'dns Telecom Hotspot');
\$lg = 'en';
define('UAMIP', '$wrstart');
define('UAMPORT', '3990');
define('UAM_URL', 'http://' . UAMIP . ':' . UAMPORT);
define('BASE_URL', 'https://$fqdn/hotspot/');
define('LOGINPATH', BASE_URL);
define('ENABLE_LOGIN_COOKIE', true);
define('DEBUG_MODE', false);
define('UAMSECRET', '$salt');
define('USERPASSWORD', true);
?>
__EOF__

  }
close(CSC);
close(CUS);
close(CWC);
}


sub printovpnconf() {
  @ovpnipdat=split(/\//,$sysconf{'OVPNNet'});
  @ovpnipdat[1]=&getsn(@ovpnipdat[1]);

  open(OVPN,">openvpn.conf");
  chmod(0600,"openvpn.conf");
  if ((@ovpnipdat[0] ne "") && (@ovpnipdat[1] ne "")) {
    print OVPN<<__EOF__;
server @ovpnipdat[0] @ovpnipdat[1]
dev vpn0
dev-type tun
dh /etc/openvpn/serverdh.pem
ca /etc/ipsec.d/cacerts/cacert.pem
crl-verify /etc/ipsec.d/crls/crl.pem
cert /etc/openssl/server.signed.pem
key /etc/openssl/serverkey.pem
proto tcp-server
keepalive 10 60
script-security 2
daemon
client-connect /etc/openvpn/client-connect
client-disconnect /etc/openvpn/client-disconnect
__EOF__

    @privnet=("172.16.0.0/12","192.168.0.0/16","10.0.0.0/8");
    foreach $iface (@ints) {
      if ($sysconf{'OVPNInt'} ne "") {
        @ovpnint=split(/\|/,$interface{$sysconf{'OVPNInt'}});
        push(@privnet,@ovpnint[1] . "/" . @ovpnint[2]);
      }
      @lidata=split(/\|/,$interface{$iface});
      if ((index($iface,"gtun") eq -1) && (index($iface,"$sysconf{'OVPNInt'}:") eq -1) && (@lidata[2] < 32) && ($iface ne $sysconf{'OVPNInt'}) && ($iface ne $mdmconf{'ComPort'})){
        if (@lidata[1] ne "0.0.0.0") {
          $intpri=0;
          foreach $priv (@privnet) {
            if (! check_ip(@lidata[1] . "/" . @lidata[2],$priv)) {
              $intpri++;
            }
          }
          if ($intpri < @privnet) {
              $inwa=&getnw(@lidata[2],@lidata[1]);
              $isnm=&getsn(@lidata[2]);
              print OVPN "push \"route $inwa $isnm\"\n"
          }
        }
      }
    }
    print OVPN<<__EOF__;
push "route 172.16.0.0 255.240.0.0"
push "route 192.168.0.0 255.255.0.0"
push "route 10.0.0.0 255.0.0.0"
__EOF__
  }
  close(OVPN)
}

sub printsogo() {
  if ( -e "/etc/sogo_ad.conf") {
    open(SAD,"/etc/sogo_ad.conf");
    while(<SAD>) {
      chop $_;
      $sogoconf=$_;
    }
    close(SAD);
    @sogodb=split(/\|/,$sogoconf);


    @keys=("host","user","password","base","filter","sqlserver");
    for ($kcnt=0;$kcnt < @keys;$kcnt++) {
      $sogo{@keys[$kcnt]}=@sogodb[$kcnt];
    }

    ($host,$port)=split(/:/,$sogo{'host'});

    $ldap = Net::LDAP->new($host,port=>$port,version => "3",timeout => "10") or return;
    $ldap->bind($sogo{'user'},password => $sogo{'password'}) or return;
    $user=$ldap->search(base=>$sogo{'base'},filter=>"(&(sAMAccountName=" . $sogo{'user'} . ")(objectClass=user))",attrs=>["dn"]);
    if ($user->count <= 0) {
      return;
    } else {
      $entry = $user->shift_entry;
      $dn=$entry->dn;
    }
  }

  open(SGW,">sogo.conf");
  chmod(0600,"sogo.conf");

  @dninf=split(/\./,$dnsconf{'Domain'});
  $vsuf="";
  foreach $dndat (@dninf) {
    $vsuf.="dc=" . $dndat . ",";
  }
  chop $vsuf;

  if ( -e "/usr/GNUstep/Local/Tools/Admin/sogod") {
    $sogover="";
  } else {
    $sogover="-0.9";
  }
  $imapserv="127.0.0.1";
  if ( -e "/etc/dovecot-sogo.conf") {
    $imapserv.=":286";
  }
  $sqlserver=($sogo{'sqlserver'} ne "")?$sogo{'sqlserver'}:"127.0.0.1";
  print SGW<<__EOF__;
{
    NSGlobalDomain = {
    };
    gdnc = {
    };
    sogod$sogover = {
	OCSFolderInfoURL = "postgresql://exchange:$exchangepass\@$sqlserver:5432/exchange/sogo_folder_info";
	SOGoAppointmentSendEMailNotifications = YES;
	SOGoDraftsFolderName = Drafts;
	SOGoIMAPAclConformsToIMAPExt = YES;
	SOGoIMAPAclStyle = rfc4314;
	SOGoIMAPAclUsernamesAreQuoted = YES;
	SOGoIMAPServer = $imapserv;
	SOGoLDAPQueryLimit = 20;
	SOGoLanguage = English;
	SOGoLoginModule = Mail;
	SOGoMailDomain = $dnsconf{'Domain'};
	SOGoMailShowSubscribedFoldersOnly = NO;
	SOGoMailSpoolPath = "/tmp";
	SOGoMailingMechanism = smtp;
	SOGoOtherUsersFolderName = Shared;
	SOGoProfileURL = "postgresql://exchange:exchange\@$sqlserver:5432/exchange/sogo_user_profile";
	SOGoSMTPServer = 127.0.0.1;
	SOGoSentFolderName = Sent;
	SOGoSharedFolderName = Public;
	SOGoSpecialFoldersInRoot = YES;
	SOGoTimeZone = Africa/Johannesburg;
	SOGoTrashFolderName = Trash;
	SOGoUseLocationBasedSentFolder = YES;
	SOGoUserSources = (
__EOF__
  if (! -e "/etc/sogo_ad.conf") {
    print SGW<<__EOF__;
	    {
		CNFieldName = cn;
		IDFieldName = uid;
		UIDFieldName = uid;
		baseDN = "ou=users,$vsuf";
		bindDN = "$ldapserv{'Login'},$vsuf";
		bindPassword = $ldapserv{'Password'};
		canAuthenticate = YES;
		displayName = "Corporate Directory";
		hostname = 127.0.0.1;
		id = public;
		isAddressBook = YES;
		port = 389;
	    }
__EOF__
  } else {
    print SGW <<_EOF_;
            {   
                CNFieldName = cn;
                IDFieldName = cn;
                UIDFieldName = sAMAccountName;
                baseDN = "$sogo{'base'}";
                bindDN = "$dn";
                bindFields = sAMAccountName;
                bindPassword = $sogo{'password'};
		filter = "$sogo{'filter'}";
                canAuthenticate = YES;
                displayName = "Global Address Book";
                hostname = $host;
                id = public;
                isAddressBook = YES;
                port = $port;
            }
_EOF_
     }
$sogoprefrk=$mailconf{'ScanChildren'}*4;
print SGW<<__EOF__;
	);
	WOMessageUseUTF8 = YES;
	WOParsersUseUTF8 = YES;
	WOUseRelativeURLs = YES;
	WOWorkersCount = $sogoprefrk
    };
__EOF__
  print SGW "}";
  close(SGW);
}

#sub getsn() {
#  local($maskbits)=@_;
#  if ($maskbits >= 24) {
#    $snout="255.255.255";
#    $eq="";
#  } elsif ($maskbits >= 16) {
#    $snout="255.255";
#    $eq=".0";
#  } elsif ($maskbits >= 8) {
#    $snout="255";
#    $eq=".0.0";
#  }
#  
#  if ($maskbits eq "32") {
#    $snm="255";
#  } else {
#    $snm=256-(2**(8-($maskbits % 8)));
#  }
#  return "$snout.$snm$eq";
#}

unlink("/var/run/netsentry-config");
 
