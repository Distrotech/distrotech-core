#!/bin/bash

SERV=pbx.distrotech.co.za
BASE=/var/spool/distrotech
MNTP=/mnt/floppy
CORE=/mnt/dev
AMNT=/media
CWD=`pwd`

OFFSET=511705088
LIMIT=3167748096

UOFFSET=1048576
ULIMIT=510656512

ROPT="-avHKOPz --inplace --timeout=60"
ROPT_LOC="-avHKOP"
ROPT_FAT="-rtvcOP --chmod=ugo=rwX --no-p --no-g --inplace"

Make_GPT() {
  parted -s ${1} mklabel msdos
  parted -s ${1} mkpart primary fat32 1 512
  if [ "${2}" == "loop" ];then
    parted -s ${1} "mkpart primary ext2 512 3679453183B"
   elif [ "${2}" == "tiny" ];then
    parted -s ${1} "mkpart primary ext2 512 -1"
   else
    parted -s ${1} mkpart primary ext2 512 3679453183B
    parted -s ${1} "mkpart primary fat32 3680 -1"
    parted -s ${1} set 3 boot on
  fi;
  parted -s ${1} set 2 lvm on
}

Make_LVM() {
  pvremove -ff -y ${2} > /dev/null 2>&1
  pvcreate -ff -y ${2}
  vgcreate ${1} ${2}
  if [ "${3}" == "tiny" ];then
    lvcreate -n install -l "100%FREE" ${1}
   else
    lvcreate -n install -L 1435M ${1}
    lvcreate -n upgrade -l "100%FREE" ${1}
    mkfs.ext4 -L UPGRADE /dev/${1}/upgrade
  fi;
  mkfs.ext4 -L INSTALL /dev/${1}/install
}

Make_Flash() {
  if [ -e "/dev/${2}" ] && [ -b "/dev/${2}" ];then
    if [ "`cat /sys/block/${2}/removable 2> /dev/null`" == 0 ];then
      echo "non removable block device"
      exit 255
    fi;
    vgchange -a n ${1} > /dev/null 2>&1
    (dmsetup remove /dev/${1}/install
    dmsetup remove /dev/${1}/upgrade) > /dev/null 2>&1
    vgremove -f flash /dev/${2} > /dev/null 2>&1
    vgremove -f ${1} > /dev/null 2>&1
    vgchange -a n ${1} > /dev/null 2>&1

    if [ -d /dev/${1} ];then
      echo "LVM ${1} Active on /dev/${2} ??"
      exit 255
    fi;

    BSIZE=`cat /sys/block/${2}/size`;
    BSIZE=`echo "${BSIZE} / 2048" | bc`;
    if (( ${BSIZE} >= 7500 ));then
      Make_GPT /dev/${2}
      mkdosfs -n BOOTISO /dev/${2}3
      Make_LVM ${1} /dev/${2}2
     elif (( ${BSIZE} >= 3680 ));then
      Make_GPT /dev/${2} loop
      Make_LVM ${1} /dev/${2}2
     elif (( ${BSIZE} >= 1900 ));then
      Make_GPT /dev/${2} tiny
      Make_LVM ${1} /dev/${2}2 tiny
     else
       echo "Device is too small"
       exit 255
    fi;
    mkdosfs -n DISTROTECH /dev/${2}1
   else
    echo "Invalid block device or flash lvm active"
    return 255
  fi;
  (dmsetup remove_all
  vgchange -a y ${1}) > /dev/null 2>&1
  vgmknodes
}

Mount_Flash() {
  if [ "${1}" == "clean" ];then
    FSCKO="-Dfy";
   else
    FSCKO="-p";
  fi;

  e2fsck -C 0 ${FSCKO} /dev/flash/install
  if (( $? >=  4 ));then
    echo "File System Error"
    exit 255
  fi;
  if [ -w /dev/flash/upgrade ];then
    e2fsck -C 0 ${FSCKO} /dev/flash/upgrade
    if (( $? >=  4 ));then
      echo "File System Error"
      exit 255
    fi;
  fi;

  mount /dev/flash/install ${MNTP}
  if [ $? != 0 ];then
    echo Mount failure
    exit -1
  fi;

  for sdir in dev proc sys;do
    if [ ! -d ${MNTP}/${sdir} ];then
      mkdir ${MNTP}/${sdir}
    fi;
  done

  mount --bind /dev ${MNTP}/dev/
  mount --bind /proc ${MNTP}/proc
  mount --bind /sys ${MNTP}/sys

  if [ ! -d ${MNTP}/install/tools ];then
    mkdir -p ${MNTP}/install/tools
  fi;
  sleep 2
  if [ -e /dev/loop-flash ];then
    DUFS=`findfs LABEL=DTSUTIL`
   else
    DUFS=`findfs LABEL=DISTROTECH`
  fi;
  dosfsck -a ${DUFS}
  mount ${DUFS} ${MNTP}/install/tools

  if [ -d ${MNTP}/etc ];then
    rm ${MNTP}/etc/mtab
    touch ${MNTP}/etc/mtab
    chroot ${MNTP}/ mount -f /
    chroot ${MNTP}/ mount -fa
  fi;

  if [ -e ${MNTP}/install/netsentry-version ];then
    eval `cat ${MNTP}/install/netsentry-version`
  fi;
}

Umount_Flash() {
  (rm ${MNTP}/root/.bash_history ${MNTP}/var/lib/nfs/rmtab ${MNTP}/etc/lvm/*/*
  rm ${MNTP}/var/spool/samba/ftp/welcome.txt ${MNTP}/var/state/dhcp/dhcpd.leases
  rm ${MNTP}/root/.bash_history ${MNTP}/etc/lvm/cache/.cache
  rm -rf ${MNTP}/intall/mnt/* ${MNTP}/var/run/* ${MNTP}/var/spool/ldap/* ) > /dev/null 2>&1


  if [ -d ${MNTP}/mnt/update/${CORE}/lost+found ];then
    while [ "`pidof rsync`" ];do
      killall rsync
      sleep 1
     done
     (umount ${MNTP}/var/run
     umount ${MNTP}/mnt/update/${CORE}/install/tools
     umount ${MNTP}/mnt/update/${CORE}) > /dev/null 2>&1
  fi;

  if [ -d ${MNTP}/mnt/update/lost+found ];then
    umount ${MNTP}/mnt/update
  fi;

  if [ -d ${MNTP}/install/mnt/install/tools ];then
    umount ${MNTP}/install/mnt/install/tools > /dev/null 2>&1
  fi;

  if [ -d ${MNTP}/install/mnt/lost+found ];then
    umount ${MNTP}/install/mnt
  fi;

  sleep 2

  (umount ${MNTP}/sys
  umount ${MNTP}/dev
  umount ${MNTP}/proc
  umount ${MNTP}/install/tools
  umount ${MNTP}) > /dev/null 2>&1

  vgchange -a n flash > /dev/null 2>&1

  sleep 2
  (dmsetup remove /dev/flash/install
  dmsetup remove /dev/flash/upgrade) > /dev/null 2>&1

  if [ -e /dev/loop-flash ];then
    vgchange -a n flash > /dev/null 2>&1
    sleep 2
    losetup -d /dev/loop-flash
    if [ $? == 0 ] && [ -e /dev/loop-flash ];then
      rm /dev/loop-flash
      unset LOOP
    fi;
  fi;
  if [ -e /dev/loop-util ];then
    losetup -d /dev/loop-util
    if [ $? == 0 ] && [ -e /dev/loop-util ];then
      rm /dev/loop-util
      unset ULOOP
    fi;
  fi;
  if [ -f /mnt/cdrom/flash.hdd ];then
    umount /mnt/cdrom
  fi;
}

Check_Grub() {
  Make_Grubcfg > /tmp/grub.cfg
  if [ ! -e ${MNTP}/boot/grub/grub.cfg ] || [ "`diff /tmp/grub.cfg ${MNTP}/boot/grub/grub.cfg`" ];then
    cp /tmp/grub.cfg ${MNTP}/boot/grub/
   else
    rm /tmp/grub.cfg
  fi;

  if [ ! -e ${MNTP}/boot/grub/core.img ] || [ ${MNTP}/usr/lib/grub/i386-pc/ -nt ${MNTP}/boot/grub/core.img ];then
    if [ "${LOOP}" ] || [ -e /dev/loop-flash ];then
      RLOOP=`losetup -f`
      RLOOP=`readlink -f ${RLOOP}`
      losetup ${RLOOP} ${BASE}/flash.hdd
      echo "(hd0)	${RLOOP}" > ${MNTP}/boot/grub/device.map
      chroot ${MNTP} /usr/sbin/grub-install --force ${RLOOP}
      rm ${MNTP}/boot/grub/device.map
      sleep 2
      losetup -d ${RLOOP}
     else
         chroot ${MNTP} /usr/sbin/grub-mkdevicemap
         pvdisplay -c |awk -F: -v mpt=${MNTP} '$2 == "flash" {printf "chroot %s /usr/sbin/grub-install --force%s\n",mpt,substr($1,1,length($1)-1)}' |sh
    fi;
  fi;

  NEED_INITRD=0
  if [ "${KERNEL}-install" ] && [ ! -e ${MNTP}/lib/modules/${KERNEL}-install/modules.dep ];then
    NEED_INITRD=1
  fi;
  if [ ${NEED_INITRD} == 1 ] || \
     [ ${MNTP}/install/core/kernel.tar.bz2 -nt ${MNTP}/boot/initrd-install ] || \
     [ ${MNTP}/install/mkbootimg -nt ${MNTP}/boot/initrd-install ];then
    chroot ${MNTP} /install/mkbootimg
  fi;

  if [ -d ${BASE} ];then
    if [ ${MNTP}/boot/grub/grub.cfg -nt ${BASE}/boot/grub/grub.cfg ];then
      cp ${MNTP}/boot/grub/grub.cfg ${BASE}/boot/grub/grub.cfg
    fi;

    if [ ! -f ${BASE}/rescue/grub.iso ] || [ ${MNTP}/boot/grub/grub.cfg -nt ${BASE}/rescue/grub.iso ];then
      TDIR=/tmp/rescue_$$${RANDOM}
      while [ -e ${TDIR} ];do
        TDIR=/tmp/rescue_$$${RANDOM}
      done;
      mkdir -p ${TDIR}/boot/grub
      cp ${MNTP}/boot/grub/grub.cfg ${TDIR}/boot/grub/grub.cfg
      grub-mkrescue -o ${BASE}/rescue/grub.iso --volid DISTROTECH_RESCUE ${TDIR}
      rm -rf ${TDIR}
    fi;
  fi;
}

Make_Bootetc() {
  cd ${1}

  dd if=/dev/zero of=install/core/etc bs=1M count=6
  LOOP=`/sbin/losetup -f`
  LOOP=`readlink -f ${LOOP}`
  /sbin/losetup ${LOOP} install/core/etc
  /sbin/mkfs.ext4 -L bootetc -i 1024 ${LOOP}

  if [ ! -d install/mnt ]  && [ -e install/mnt ];then
    rm -rf install/mnt
    mkdir install/mnt
   elif [ ! -e install/mnt ];then
    mkdir install/mnt
   else
    rm -rf install/mnt/*
  fi;
  mount ${LOOP} install/mnt

  echo "/dev/flash/install	/	ext4	defaults	0	1" > etc/fstab
  rm etc/blkid.* > /dev/null 2>&1
  cp -Rp etc/* install/mnt/

  (cat <<EOF
hosts:  	files dns
passwd:		files
shadow:		files
group:		files
EOF
) > install/mnt/nsswitch.conf

  if [ etc/rsyncd.conf -nt etc/rsyncd-update.conf ];then
    sed -e "s/\(path = \)/\1\/mnt\/update/" etc/rsyncd.conf > etc/rsyncd-update.conf
  fi;
  echo "smbadm::139:" >> install/mnt/group
  echo "*.*                                       /dev/tty5" > install/mnt/syslog.conf
  echo "telnet          stream  tcp     nowait  root    /usr/sbin/in.telnetd" > install/mnt/inetd.conf
  sed -e "s/^PasswordAuthentication/PasswordAuthentication yes/" etc/sshd_config > install/mnt/sshd_config
  sed -e "s/^\(PasswordAuthentication\) no/\1 yes/" etc/sshd_config > install/mnt/sshd_config
  sed -e "s/^.*agetty.*//" etc/inittab > install/mnt/inittab
  sed -e "s/^#skip-innodb$/skip-innodb/" etc/my.cnf > install/mnt/my.cnf
  sed -e "s/\(suggested-size.*\)20011/\1211/" etc/nscd.conf > install/mnt/nscd.conf
  rm install/mnt/HOSTNAME install/mnt/openssl/ca.conf install/mnt/ifconf/* install/mnt/mtab* > /dev/null 2>&1
  touch install/mnt/mtab install/mnt/.install install/mnt/.networksentry-lite

  while [ -d install/mnt/lost+found ];do
    umount install/mnt > /dev/null 2>&1
    sleep 2
  done;

  e2fsck -Dfy ${LOOP}
  sleep 2
  /sbin/losetup -d ${LOOP}
  gzip -f -9 install/core/etc

  TDIR=/tmp/dummy_$$${RANDOM}
  while [ -e ${TDIR} ];do
    TDIR=/tmp/dummy_$$${RANDOM}
  done;

  rsync -avHKOn --out-format="%n" --filter=". install/core/core.filter" ./ ${TDIR} |awk '/(^[a-z]+\/)|(^home$)/ {print $0}' |\
      sort > install/core/filelist
  tar --use-compress-program=bzip2 -cf install/core/install.tbz etc/group etc/syslog.conf etc/inetd.conf etc/sshd_config\
      etc/inittab etc/my.cnf etc/nscd.conf var

  rm root/.bash_history > /dev/null 2>&1
  cd ${CWD}
}

Sync_Update() {
  if [ -e ${1}/install/netsentry-version ];then
    eval `cat ${1}/install/netsentry-version`
  fi;

  if [ ! -d ${1}/mnt/update ];then
    mkdir -p ${1}/mnt/update
  fi;
  if [ "${2}" ];then
    mount ${2} ${1}/mnt/update
   else
    mount /dev/flash/upgrade ${1}/mnt/update
  fi;

  if [ $? != 0 ] || [ ! -e ${1}/mnt/update/lost+found ];then
    return 255
  fi;

  if [ ! -d ${1}/mnt/update/pkgs ];then
    mkdir ${1}/mnt/update/pkgs
  fi;

  if [ ! -d ${1}/mnt/update${CORE} ];then
    mkdir -p ${1}/mnt/update${CORE}
  fi;

  cd ${1}/mnt/update

  mkdir -p var/spool/samba/share
  chown -R 0.139 var/spool/samba

  cat ${1}/install/pkgs/pkg.list |cut -d: -f2|sort |uniq |awk '$1 != "" {printf "if [ ! -d %s ];then mkdir -p %s;fi\n",$1,$1}' |sh

  cat ${1}/install/pkgs/pkg.list | awk -v BASE="${1}" -F: '$3 != "" {printf "\tif [ ! -e pkgs/%s ] || [ %s/install/pkgs/%s -nt pkgs/%s ];then\n\
		echo %s\n\
		tar --use-compress-program=%s -C %s -xf %s/install/pkgs/%s\n\
		touch pkgs/%s\n\tfi;\n",$1,BASE,$1,$1,$1,$3,$2,BASE,$1,$1}' |sh

  if [ ! -e pkgs/kernel.tar.bz2 ] || [ ${1}/install/core/kernel.tar.bz2 -nt pkgs/kernel.tar.bz2 ];then
    kuserdir=var/spool/rsync/kernuser/kernel-${KERNEL}-smp
    rm -rf lib/modules/* boot/* var/spool/rsync/kernuser/*
    mkdir -p ${kuserdir}
    tar --use-compress-program=bunzip2 -C ./ -xf ${1}/install/core/kernel.tar.bz2 lib/modules boot/
    tar --use-compress-program=bunzip2 --exclude=lib/modules --exclude=boot -C ${kuserdir} -xf ${1}/install/core/kernel.tar.bz2
    touch pkgs/kernel.tar.bz2
  fi;
  echo "Install Kernel Modules"
  rsync ${ROPT_LOC} --delete --exclude=${KERNEL}-install/modules.* ${1}/lib/modules/${KERNEL}-install lib/modules/
  echo
  echo "Install Kernel"
  rsync ${ROPT_LOC} ${1}/boot/vmlinuz-install boot/vmlinuz-${KERNEL}-install
  echo
  echo "Install Kernel System Map"
  rsync ${ROPT_LOC} ${1}/boot/System.map-install boot/System.map-${KERNEL}-install
  echo

  if [ ! -h var/spool/avirus ] || [ -e var/spool/avirus ];then
    rm -rf var/spool/avirus > /dev/null 2>&1
  fi;
  if [ ! -e var/spool/avirus ];then
    ln -s /mnt/update/${CORE}/install/avirus var/spool/avirus > /dev/null 2>&1
  fi;

  cd ${CWD}
  sleep 2
  umount ${1}/mnt/update

  rm ${1}/etc/blkid.tab ${1}/etc/blkid.tab.old ${1}/etc/lvm/cache/.cache /tmp/* ${1}/etc/lvm/backup/flash \
     ${1}/etc/lvm/archive/* ${1}/etc/iftab ${1}/var/run/* > /dev/null 2>&1
}

Update_Flash() {
  if [ -d ${CORE}/install/core ];then
    Make_Bootetc ${CORE}
    Local_Sync ${CORE} ${MNTP}
   else
    Remote_Sync ${MNTP}
  fi
  RERR=$?
  if [ ${RERR} == 0 ];then
    if [ -e /dev/flash/upgrade ];then
      Sync_Update ${MNTP}
    fi;
    if [ ! -d ${CORE}/install ];then
      Make_Bootetc ${MNTP}
    fi;
    Check_Grub
    if [ -d ${BASE} ];then
      echo "Sync Tools To ISO Folder"
      rsync ${ROPT_LOC} --inplace ${MNTP}/install/tools/* ${BASE}/wintools/
      echo
    fi;
  fi;
  return ${RERR}
}

Load_Flash() {
  if [ -d ${MNTP}/lost+found ];then
    if [ -e ${MNTP}/install/netsentry-version ];then
      eval `cat ${MNTP}/install/netsentry-version`
    fi;
    return 0;
  fi;

  if [ ! -e /dev/flash/install ];then
    LOOP=`losetup -f`
    if [ ! "${LOOP}" ];then
      echo Cannont allocate loop device
      exit -1
    fi;
    LOOP=`readlink -f ${LOOP}`

    if [ -e /dev/loop-flash ];then
      losetup -d /dev/loop-flash
      if [ $? == 0 ] && [ -e /dev/loop-flash ];then
        rm /dev/loop-flash
      fi;
    fi;

    if [ -e /dev/loop-util ];then
      losetup -d /dev/loop-util
      if [ $? == 0 ] && [ -e /dev/loop-util ];then
        rm /dev/loop-util
      fi;
    fi;

    if [ -e /dev/loop-flash ] || [ -e /dev/loop-util ];then
      echo "/dev/loop-flash Active ??"
      exit 255
    fi;

    FLASH=${BASE}/flash.hdd
    #Maybe there is a DVD in that i can use if i cant write
    if [ -e /dev/cdrom ] && [ ! -f ${FLASH} ] && [ "${2}" == "0" ];then
      if [ ! -d /mnt/cdrom ];then
        mkdir -p /mnt/cdrom
      fi;
      mount /dev/cdrom /mnt/cdrom -o ro > /dev/null 2>&1
      MERR=$?
      if [ ${MERR} == 0 ] && [ -f /mnt/cdrom/flash.hdd ];then
        FLASH=/mnt/cdrom/flash.hdd
       elif [ ${MERR} == 0 ];then
        umount /mnt/cdrom
      fi;
    fi;

    if [ ! -f ${FLASH} ];then
      if [ "${2}" == "0" ];then
        echo "Not  allowed to create repository one does not exists or DVD not present"
        exit 255
      fi;

      if [ ! -d ${BASE}/boot/grub ];then
        mkdir -p ${BASE}/boot/grub
      fi;

      for utildir in rescue wintools boot;do
        if [ ! -d ${BASE}/${utildir} ];then
          mkdir ${BASE}/${utildir}
        fi;
      done

      dd if=/dev/zero of=${FLASH} bs=16M count=230
      Make_GPT ${FLASH} loop
      MKFS=1;
     else
      MKFS=0;
    fi;

    losetup -o ${OFFSET} --sizelimit ${LIMIT} ${LOOP} ${FLASH}
    if [ $? != 0 ];then
      echo "Loop attach fail"
      exit 255
    fi;
    ULOOP=`losetup -f`
    ULOOP=`readlink -f ${ULOOP}`
    losetup -o ${UOFFSET} --sizelimit ${ULIMIT} ${ULOOP} ${FLASH}
    if [ $? != 0 ];then
      echo "Util Loop attach fail"
      losetup -d ${LOOP}
      exit 255
    fi;

    sleep 2
    rm ${LOOP}p* > /dev/null 2>&1
    rm ${ULOOP}p* > /dev/null 2>&1

    if [ ${MKFS} == 1 ];then
      Make_LVM flash ${LOOP}
      mkdosfs -n DTSUTIL ${ULOOP}
    fi;

    if [ ! -d /dev/flash ];then
      (vgchange -a y flash
      vgmknodes) > /dev/null 2>&1
    fi

    if [ ! -e /dev/flash/install ] || [ ! -e /dev/flash/upgrade ];then
      echo "Something went wrong invalid flash file"
      losetup -d ${LOOP}
      losetup -d ${ULOOP}
      exit 255
    fi;

    if [ -e /dev/flash/install ];then
      ln -s ${LOOP} /dev/loop-flash
      ln -s ${ULOOP} /dev/loop-util
    fi;
  fi;

  Mount_Flash ${1}
  if [ ! -d ${MNTP}/root ];then
    Update_Flash
    return ${RERR}
   else
    return 0
  fi;
}

Remote_Sync() {
  RERR=0;

  if [ ! -d ${1}/install/ ];then
    mkdir ${1}/install/
  fi;

  if [ "${1}" == "${CORE}" ] && [ -e "/etc/firewall.conf" ] && [ -e "/etc/netsentry-version" ];then
    ISDTS=1;
   else
    ISDTS=0;
  fi;

  if [ "`cat /proc/mounts | grep ${1}/install/tools`" ] || [ ${ISDTS} == 1 ];then
    echo "Utilities"
    rsync ${ROPT_FAT} -z --include=/install --include=/install/tools --exclude=/install/* --exclude=/* ${SERV}::base/ ${1}/
    RERR=$?
    echo
  fi;

  if [ ! -d ${1}/root ] && [ ${RERR} == 0 ];then
    if [ ${ISDTS} == 1 ];then
      echo "Filelist/Version"
      rsync ${ROPT} -R --include=/install/netsentry-version --include=/install/core/filelist --include=/install/core/core.filter \
            --include=/install/core/install.tbz --include=/install/core --exclude=/install/core/* --exclude=/install/update/* ${SERV}::base/install/* ${1}
      echo
      if [ -e ${1}/install/core/filelist ];then
        rsync -aHKOq --no-d --exclude=/* --out-format="%n" --files-from=${1}/install/core/filelist / ${1}
        tar --use-compress-program=bunzip2 -C ${1} -xf ${1}/install/core/install.tbz etc/ var/
      fi;
      if [ -e ${CORE}/install/netsentry-version ];then
        eval `cat ${CORE}/install/netsentry-version`
      fi;
     else
      echo "Core files"
      rsync ${ROPT} --exclude=/install/tools/* --exclude=/install/avirus/* --exclude=/install/update/* ${SERV}::base/ ${1}
      RERR=$?
      echo
    fi;
   elif [ ${ISDTS} == 1 ];then
    if [ -e ${CORE}/install/netsentry-version ];then
      eval `cat ${CORE}/install/netsentry-version`
    fi;
  fi;

  if [ ${RERR} == 0 ];then
    echo "Distribution (Non Core)"
    rsync ${ROPT} --delete --exclude=/dev/* --exclude=/sys/* --exclude=/proc/* --exclude=/lost+found --include=/boot/grub/background.jpg \
               --exclude=/lib/modules/* --exclude=/boot/vmlinuz-install --exclude=/boot/System.map-install  --exclude=/boot/initrd-install* \
               --exclude=/boot/grub/* --exclude=/install/mnt/* --exclude=/etc/mtab --exclude=/install/avirus/* --exclude=/mnt/update/* \
               --exclude=/install/avirus/* --exclude=/install/update/* --exclude=/install/core/* --exclude=/install/tools/* \
               --exclude=/install/netsentry-version ${SERV}::install/ ${1}/
    RERR=$?
    echo
   else
    return ${RERR}
  fi;

  if [ ${RERR} == 0 ];then
    DOVER=1;
    if [ ${ISDTS} == 1 ];then
      echo "Base Files (Local Copy [No Kernel])"
      rsync ${ROPT} -u --include=/install/core/core.filter --include=/install/core/install.tbz --exclude=/install/core/* \
             --exclude=/lib/modules/* --exclude=/boot/vmlinuz-install --exclude=/boot/System.map-install \
             --exclude=/install/avirus/* --exclude=/install/update/* --exclude=/boot/initrd-install* --exclude=/install/tools/* ${SERV}::base/ ${1}
      RERR=$?
      echo

      if [ "${2}" ];then
        KVER=${2}
       elif [ "${KERNEL}" ];then
        KVER=${KERNEL}
      fi;

      if [ ${RERR} == 0 ] && [ "${KVER}" ];then
        if [ ! -d /var/spool/rsync/kernuser ];then
          mkdir -p /var/spool/rsync/kernuser
        fi;
        echo "Kernel Files / Firmware (${KVER})"
        rsync ${ROPT} --delete ${SERV}::kernuser/kernel-${KVER}-smp /var/spool/rsync/kernuser/
        RERR=$?
        echo
        if [ ${RERR} == 0 ];then
          echo "Kernel/Modules (${KVER})"
          rsync ${ROPT} --include=/boot/[vS]*${2}-* --include=/lib/modules/${2}-* --exclude=/lib/modules/* --exclude=/boot/* --filter=". /etc/rsyncd/kernel.filter" ${SERV}::kernel/ /
          RERR=$?
          echo
        fi;
        if [ ${RERR} == 0 ];then
          echo "Install Kernel (Modules ${KVER}) / Anti Virus / Updates"
          rsync ${ROPT_LOC} -R --include=/lib --include=/lib/modules --include=/lib/modules/${2}-install \
                --exclude=/lib/modules/*/modules.* --exclude=/lib/* --exclude=/lib/modules/* --exclude=/* / ${1}/
          RERR=$?
          rsync ${ROPT_LOC} -u --include=/update --include=/avirus --exclude=/avirus/clamav-* --exclude=/*/.* --exclude=/* /var/spool/ / ${1}/install/
          echo
        fi;
      fi;
     else
      echo "Base Files (Local Repository Kernel)"
      rsync ${ROPT} -u --include=/install/core/kernel.tar.bz2 --include=/install/netsentry-version --include=/install/core \
             --exclude=/lib/modules/*/modules.* --exclude=/boot/initrd-install* --include=/install/core/core.filter --exclude=/install/core/* \
             --exclude=/install/tools --exclude=/install/* ${SERV}::base/ ${1}
      RERR=$?
      echo
    fi;
   else
    return ${RERR}
  fi;

  if [ ${RERR} == 0 ];then
    for kmod in `ls -d ${1}/lib/modules/*`;do
      if [ ! -d ${kmod}/kernel ];then
        rm -rf ${kmod}
      fi;
    done;
    if [ ${RERR} == 0 ];then
      echo "Anti Virus On Repository"
      rsync ${ROPT} -u --delete ${SERV}::avirus/ ${1}/install/avirus
      RERR=$?
      echo
    fi;
    if [ ${RERR} == 0 ];then
      echo "Update Folder"
      rsync ${ROPT} -u --delete ${SERV}::programs/var/spool/update/ ${1}/install/update
      RERR=$?
      echo
    fi;
   else
    return ${RERR}
  fi;

  return ${RERR}
}

Local_Sync() {
  RERR=0
  if [ ! -d ${2}/install/ ];then
    mkdir ${2}/install/
  fi;
  if [ "`cat /proc/mounts | grep ${2}/install/tools`" ] || [ ${2} == ${CORE} ];then
    echo "Utilities"
    rsync ${ROPT_FAT} ${1}/install/tools ${2}/install/
    RERR=$?
    echo
  fi;
  if [ ${RERR} == 0 ];then
    echo "Distribution"
    rsync ${ROPT_LOC} --inplace --delete --exclude=/proc/* --exclude=/sys/* --exclude=/dev/* --exclude=/lost+found \
          --exclude=/lib/modules/*/modules.* --exclude=/boot/initrd-install* --exclude=/install/tools/* \
          --include=/boot/grub/background.jpg --exclude=/boot/grub/* --exclude=/install/mnt/* \
          --exclude=/mnt/update/* --exclude=/etc/mtab ${1}/* ${2}
    RERR=$?
    echo
    if [ ${RERR} == 0 ];then
      for kmod in `ls -d ${2}/lib/modules/*`;do
        if [ ! -d ${kmod}/kernel ];then
          rm -rf ${kmod}
        fi;
      done;
    fi;
  fi;
  return ${RERR}
}

Clean_Init() {
  for vg in flash flashn flashm;do
    if [ -d /dev/${vg} ];then
      vgchange -a n ${vg} > /dev/null 2>&1
      if [ -d /dev/${vg} ];then
        for vdev in `ls /dev/${vg}`;do
          if [ -e /dev/${vg}/${vdev} ];then
            dmsetup remove /dev/${vg}/${vdev} > /dev/null 2>&1
          fi;
        done
      fi;
    fi;
    if [ ! -d /dev/${vg} ];then
      vgchange -a y ${vg} > /dev/null 2>&1
    fi;
  done;
  vgmknodes > /dev/null 2>&1
}

Show_Help() {
cat << EOF

${0} is a utility for controlling the Distrotech (www.distrotech.co.za) Linux Distribution Installer

You will require a 2G,4G Or bigger than 8G Flash disk in addition to up-to 7G hard drive space available
for local copy/repository.

This program requires dosutils lvm2 grub2 parted dmsetup losetup bc dd and rsync and will run on Ubuntu
or other capable distributions please note the seed command should only be run on Distrotech systems.

Please note commands working with local media will require access to remote server (${SERV}) to create the
media if it does not exist.

Local Repository: ${BASE}
Local Copy: ${CORE}
Mount Point: ${MNTP}

Partitions automounted on ${AMNT}/<NAME> will be unmounted as needed.

There are various options available


        iso <IMAGE FILE>
                Create a boot-able/installable/rescue ISO image (<IMAGE FILE>) that can be burnt onto a DVD.
                the file flash.hdd on the DVD can also be written to a flash disk of sutible size using dd or
                similar utility.

        copy <DEV>
                Copy the local repository to a device specified by /dev/<DEV> it must be removable.

        merge
                Merge the local repository onto the VG flash LV install [flash is renamed flashn for this operation].

        sync
                Synchronise the local repository with local copy [if seeded] or with local inserted flash
                [see merge above it will be named flashm] or it will be pulled from the master server (${SERV}).
                This will also create the initial repository.if a local copy exists and a flash is inserted
                the inserted flash will be synchronised.

        grub
                Reinstall grub on inserted flash device or local repository.

        mkflash <DEV>
                This like copy above will initialise the device /dev/<DEV> however it will not copy it from the
                local repository but use a local copy [seed] or pull it from the master server (${SERV})
                this will allow creating a device without using a local repository.

        seed
                Using the local repository or a inserted flash disk create or update a local copy.
                See update bellow to use remote source.

        update [<KERNEL> [<SERVER>]]
                Synchronise the local copy with remote server without the need for a local repository or installer.
                See seed above to usse local as opposed to remote source.

        help|<INVALID>
                This help page shown when a invalid option is used perhaps mounting/unmounting a mounted/unmounted
		volume.

	[mount|umount]
		When called as mount or umount the repository will be mounted or unmounted when no option is specified
		it will decide the correct course of action.
        rsync
                mount the partitions and run rsync in a way suitiable for use as a master server.
        upgrade
                upgrade from local repository or inserted installer.

EOF
}

Tar_Kernel() {
  RBASE=${1}
  eval `cat ${RBASE}/install/netsentry-version`
  NOUP=0;

  if [ -e ${RBASE}/install/.version ];then
    VERSION=`cat ${RBASE}/install/.version`
  fi;

  if [ "${2}" ];then
    if [ "${2}" != "${KERNEL}" ];then
      KERNEL=${2}
      rm ${RBASE}/install/core/kernel.tar.bz2
     else
      NOUP=1;
    fi;
    (cat << EOF
BRAND="${BRAND}";
VERSION="${VERSION}";
KERNEL="${KERNEL}";
IP_ADDR="${IP_ADDR}";
SN_ADDR="${SN_ADDR}";
HN_ADDR="${HN_ADDR}";
DOM_ADDR="${DOM_ADDR}";
BT="\${BRAND} V\${VERSION} Linux V\${KERNEL} Install";
USBSLEEP="${USBSLEEP}";
EOF
) > ${RBASE}/install/netsentry-version
   else
    NOUP=1;
    VERSION=`cat ${RBASE}/install/.version`;
    sed -e "s/\(VERSION=\"\).*/\1${VERSION}\";/" ${RBASE}/install/netsentry-version > /tmp/netsentry-version
    if [ "`diff /tmp/netsentry-version ${RBASE}/install/netsentry-version`" ];then
      mv /tmp/netsentry-version ${RBASE}/install/netsentry-version
     else
      rm /tmp/netsentry-version
    fi;
  fi;

  for kern in `ls ${RBASE}/lib/modules/`;do
    if [ $kern != ${KERNEL}-install ];then
      rm -rf ${RBASE}/lib/modules/$kern
    fi;
  done

  if [ ! -e ${RBASE}/boot/vmlinuz-install ] || [ ! -e ${RBASE}/boot/System.map-install ];then
    NOUP=0;
  fi;

  if [ ${NOUP} == 1 ] && [ -e ${RBASE}/install/core/kernel.tar.bz2 ];then
    if [ ! -e ${RBASE}/boot/initrd-install ] || [ ! -e ${RBASE}/boot/initrd-install-dvd ] || [ ! -e ${RBASE}/lib/modules/${KERNEL}/modules.dep ];then
      chroot ${RBASE} /install/mkbootimg
    fi;
    return 0;
  fi;

  if [ -d /var/spool/rsync/kernuser/kernel-${KERNEL}-smp ] && [ -d /lib/modules/${KERNEL}-install ] && [ -d /lib/modules/${KERNEL}-smp ];then
    cd /var/spool/rsync/kernuser/kernel-${KERNEL}-smp
    tar --use-compress-program=bzip2 -cf ${RBASE}/install/core/kernel.tar.bz2 * /lib/modules/${KERNEL}-smp /boot/[vS]*${KERNEL}-smp
    cd ${CWD}
    echo "Kernel Modules"
    rsync ${ROPT_LOC} --inplace --delete --exclude=modules.* /lib/modules/${KERNEL}-install ${RBASE}/lib/modules
    echo
    echo "Kernel"
    rsync ${ROPT_LOC} --inplace /boot/vmlinuz-${KERNEL}-install ${RBASE}/boot/vmlinuz-install
    echo
    echo "Kernel System Map"
    rsync ${ROPT_LOC} --inplace /boot/System.map-${KERNEL}-install ${RBASE}/boot/System.map-install
    echo
    chroot ${RBASE} /install/mkbootimg
   else
    echo "No kernel folder";
    return 1
  fi;
}

Make_Grubcfg(){
for inmod in part_msdos part_gpt ext2 vbe vga video_bochs video_cirrus jpeg gfxterm gettext;do
  echo "insmod $inmod";
done

(cat << EOF

if test -e (cd)/flash.hdd ;then
  loopback floop (cd)/flash.hdd
fi

insmod lvm

if loadfont (flash-install)/usr/share/grub/unicode.pf2 ; then
  set gfxmode=640x480
  terminal_output gfxterm
  if background_image (flash-install)/boot/grub/background.jpg; then
    set color_normal=white/black
    set color_highlight=black/white
  else
    set menu_color_normal=white/black
    set menu_color_highlight=black/light-gray
    if background_color 44,0,30; then
      clear
    fi
  fi
else
  set menu_color_normal=white/black
  set menu_color_highlight=black/light-gray
  if background_color 44,0,30; then
    clear
  fi
fi

set timeout=5

EOF
)


for bdisk in hd0 hd1 hd2 hd3;do
  for mpart in 1 2 3 4;do
    for bpath in /boot/ /;do
(cat <<  EOF
if test -e ($bdisk,msdos$mpart)${bpath}initrd-netsentry ;then
  menuentry "$bdisk $mpart $bpath Standard Kernel" {
	set root=(${bdisk},msdos${mpart})
	linux ${bpath}vmlinuz-smp root=/dev/loop/0 ro single
	initrd ${bpath}initrd-netsentry
  }
  menuentry "$bdisk $mpart $bpath Install Kernel" {
	set root=(${bdisk},msdos${mpart})
	linux ${bpath}vmlinuz-install root=/dev/loop/0 ro single
	initrd ${bpath}initrd-netsentry
  }
fi

EOF
)
    done;
  done;
done;

(cat <<  EOF
if test -e (lvm-root)/boot/initrd-netsentry ;then
  menuentry "LVM Standard Kernel" {
	set root=(lvm-root)
	linux /boot/vmlinuz-smp root=/dev/lvm/root ro single
	initrd /boot/initrd-netsentry
  }
  menuentry "LVM Install Kernel" {
	set root=(lvm-root)
	linux /boot/vmlinuz-install root=/dev/lvm/root ro single
	initrd /boot/initrd-netsentry
  }
fi

EOF
)

(cat <<  EOF
if test -e (flash-install)/boot/initrd-install ;then
  if test -e (cd)/flash.hdd ;then
    menuentry "Install" {
  	set root=(flash-install)
        linux /boot/vmlinuz-install root=/dev/flash/install ro quiet
        initrd /boot/initrd-install-dvd
    }
    menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz-install root=/dev/flash/install ro single
        initrd /boot/initrd-install-dvd
    }
   else
    menuentry "Install" {
	set root=(flash-install)
        linux /boot/vmlinuz-install root=/dev/flash/install ro quiet
        initrd /boot/initrd-install
    }
    menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz-install root=/dev/flash/install ro single
        initrd /boot/initrd-install
    }
  fi
  menuentry "Memory test (memtest86+)" {
	set root=(flash-install)
        linux16 /boot/memtest.bin
  }
  menuentry "Memory test (memtest86+, serial console 115200)" {
        set root='(flash-install)'
        linux16 /boot/memtest.bin console=ttyS0,115200n8
  }
fi
if test -e (hd0,msdos3)/ubuntu/desktop-i386.iso ;then
  menuentry "Ubuntu Desktop i386" {
	set iso_path=/ubuntu/desktop-i386.iso
	export iso_path
	search --set --file \$iso_path
	loopback ubudloop \$iso_path
	set root=(ubudloop)
	configfile /boot/grub/loopback.cfg
  }
fi;
if test -e (hd0,msdos3)/ubuntu/server-i386.iso ;then
  menuentry "Ubuntu Server i386" {
	set iso_path=/ubuntu/server-i386.iso
	export iso_path
	search --set --file \$iso_path
	loopback ubusloop \$iso_path
	set root=(ubusloop)
	configfile /boot/grub/loopback.cfg
  }
fi;
if test -e (hd0,msdos3)/ubcd ;then
  menuentry "Ultimate Boot CD" {
	set root=(hd0,msdos3)
	linux16 /boot/grub/grub.exe
	initrd16 /boot/grub/grldr
  }
fi;
EOF
)
}

Sync_Local(){
  if [ "${2}" == "/mnt/dev" ];then
     SPATH=${MNTP}
   elif [ "${2}" == "/var/spool/avirus" ];then
     SPATH=${MNTP}/install/avirus
   elif [ "${2}" == "/var/spool/samba/share" ];then
     SPATH=${MNTP}/install/tools
   else
     SPATH=${MNTP}/mnt/update${2}
  fi;

  EROPT="${ROPT_LOC} -u --delay-updates"
  if [ "${1}" == "kernel" ] || [ "${1}" == "kernuser" ];then
    EROPT="${EROPT} ${KROPT}"
  fi;

  echo ${1}
  if [ -e ${MNTP}/etc/rsyncd/${1}.filter ];then
    /usr/bin/rsync ${EROPT} --filter=". ${MNTP}/etc/rsyncd/${1}.filter" ${SPATH}/ ${3}
   else
    /usr/bin/rsync ${EROPT} ${SPATH}/ ${3}
  fi;
  return $?
}

if [ "`id -u`" != "0" ];then
  Show_Help
  echo "You are seeing this page as you are trying to run it non root."
  exit 255
fi;

for checkexe in /sbin/dosfsck /sbin/dmsetup /sbin/lvm /bin/dd /sbin/losetup /bin/rsync /sbin/parted /bin/grub-mkrescue /sbin/mkdosfs /bin/xorriso /bin/bc;do
  if [ ! -x ${checkexe} ] && [ ! -x /usr${checkexe} ];then
    echo "Missing ${checkexe}"
    exit -1
   fi;
done;

for mypart in INSTALL UPGRADE DISTROTECH DTSUTIL BOOTISO;do
  if [ -e ${AMNT}/${mypart} ];then
    umount ${AMNT}/${mypart}
  fi;
done

if [ ! -d ${MNTP} ];then
  mkdir -p ${MNTP}
fi;

if [ "${1}" == "iso" ];then
  if [ -f ${BASE}/flash.hdd ] && [ "${2}" ];then
    Clean_Init
    if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
      Umount_Flash
    fi;
    sleep 2
    Load_Flash clean
    sleep 2
    Umount_Flash
    grub-mkrescue -o ${2} --volid DISTROTECH_INSTALL ${BASE}
   else
    echo "ISO File not supplied Or missing local repository"
  fi;
 elif [ "${1}" == "copy" ];then
  Clean_Init
  Make_Flash flashn ${2}
  vgchange -a y flashn > /dev/null 2>&1
  if [ $? == 0 ] && [ -e /dev/flashn/install ];then
    Load_Flash
    sleep 2
    e2fsck -C 0 -p /dev/flashn/install
    if (( $? >= 4 ));then
      echo "Filesystem Error"
      exit 255
    fi;
    mount /dev/flashn/install ${MNTP}/install/mnt
    if [ $? != 0 ];then
      echo "Mount Failed"
      exit 255
    fi;
    if [ ! -d ${MNTP}/install/mnt/install/tools ];then
      mkdir -p ${MNTP}/install/mnt/install/tools
    fi;
    DUFS=`findfs LABEL=DISTROTECH`
    dosfsck -a ${DUFS}
    mount ${DUFS} ${MNTP}/install/mnt/install/tools
    Local_Sync ${MNTP} ${MNTP}/install/mnt
    umount ${MNTP}/install/mnt/install/tools
    sleep 2
    umount ${MNTP}/install/mnt
    if [ -e /dev/flashn/upgrade ];then
      Sync_Update ${MNTP} /dev/flashn/upgrade
    fi;
    Umount_Flash
    sleep 2
    (vgchange -a n flashn
    dmsetup remove /dev/flashn/install
    dmsetup remove /dev/flashn/upgrade) > /dev/null 2>&1
    vgrename flashn flash
    vgchange -a y flash > /dev/null 2>&1
    sleep 2
    Load_Flash
    Check_Grub
    sleep 2
    Umount_Flash
  fi;
 elif [ "${1}" == "merge" ];then
  if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
    Umount_Flash
  fi;
  Clean_Init
  (vgchange -a n flash
  dmsetup remove /dev/flash/install
  dmsetup remove /dev/flash/upgrade) > /dev/null 2>&1
  vgrename flash flashn
  Load_Flash
  vgchange -a y flashn > /dev/null 2>&1
  sleep 2
  if [ -e  /dev/flashn/install ];then
    e2fsck -C 0 -p /dev/flashn/install
    if (( $? >= 4 ));then
      echo "Filesystem Error"
      exit 255
    fi;
    mount /dev/flashn/install ${MNTP}/install/mnt
    if [ ! -d ${MNTP}/install/mnt/install/tools ];then
      mkdir -p ${MNTP}/install/mnt/install/tools
    fi;
    DUFS=`findfs LABEL=DISTROTECH`
    dosfsck -a ${DUFS}
    mount ${DUFS} ${MNTP}/install/mnt/install/tools
    Local_Sync ${MNTP} ${MNTP}/install/mnt
    umount ${MNTP}/install/mnt/install/tools
    sleep 2
    umount ${MNTP}/install/mnt
    if [ -e /dev/flashn/upgrade ];then
      Sync_Update ${MNTP} /dev/flashn/upgrade
    fi;
    Umount_Flash
    sleep 2
    (vgchange -a n flashn
    dmsetup remove /dev/flashn/install
    dmsetup remove /dev/flashn/upgrade
    vgrename flashn flash) > /dev/null  2>&1
    vgchange -a y flash > /dev/null 2>&1
    sleep 2
    Load_Flash
    Check_Grub
  fi;
  sleep 2
  Umount_Flash
 elif [ "${1}" == "sync" ];then
  if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
    Umount_Flash
  fi;
  Clean_Init
  if [ ! -e /dev/loop-flash ] && [ ! -e /dev/loop-util ] && [ -d /dev/flash ] && [ ! -d ${CORE}/install ] && [ -f ${BASE}/flash.hdd ];then
    vgrename flash flashm
    vgmknodes
    if [ -e /dev/flashm/install ];then
      e2fsck -C 0 -p /dev/flashm/install
      if (( $? >= 4 ));then
        echo "Filesystem Error"
        exit 255
      fi;
      mount /dev/flashm/install ${CORE}
      if [ $? != 0 ];then
        echo "Mount Error"
        exit 255
      fi;
      if [ -e /media/DISTROTECH ];then
        umount /media/DISTROTECH
      fi;
      DUFS=`findfs LABEL=DISTROTECH`
      if [ "${DUFS}" ];then
        dosfsck -a ${DUFS}
        mount ${DUFS} ${CORE}/install/tools
      fi;
    fi;
  fi;

  Load_Flash
  if [ $? == 0 ];then
    Update_Flash
    RET=$?
  fi;
  Umount_Flash

  if [ -e /dev/flashm/install ] && [ -d ${CORE}/lost+found ];then
    umount ${CORE}/install/tools
    umount ${CORE}
    vgchange -a n flashm
    vgrename flashm flash
  fi;
  exit ${RET}
 elif [ "${1}" == "grub" ];then
  Clean_Init
  Load_Flash
  if [ -e ${MNTP}/boot/grub/core.img ];then
    rm ${MNTP}/boot/grub/core.img
  fi;
  Check_Grub
  Umount_Flash
 elif [ "${1}" == "mkflash" ];then
  Clean_Init
  Make_Flash flash ${2}
  if [ $? == 0 ];then
    Load_Flash
  fi;
 elif [ "${1}" == "seed" ] || [ "${1}" == "update" ];then
  if [ ! -d ${CORE} ];then
    mkdir ${CORE}
  fi;
  for newdir in dev proc sys;do
    if [ ! -d ${CORE}/${newdir} ];then
      mkdir ${CORE}/${newdir}
    fi;
  done;
  if [ "${1}" == "seed" ];then
    if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
      Umount_Flash
    fi;
    Clean_Init
    Load_Flash std 0
    Local_Sync ${MNTP} ${CORE}
    Umount_Flash
   else
    if [ "${3}" ];then
      SERV=${3}
    fi;
    if [ ! -d /var/spool/rsync/programs ];then
      Remote_Sync ${CORE} $2
      RET=$?
    fi;
    if [ -e  ${CORE}/install/netsentry-version ];then
      Tar_Kernel ${CORE} ${2}
     else
      echo "No config file";
    fi;
    Make_Bootetc ${CORE}
    exit ${RET}
  fi
 elif [ "${1}" == "rsync" ];then
    Clean_Init
    Load_Flash std 0
    vgchange -a y flash > /dev/null 2>&1

    if [ -e /dev/flash/upgrade ] && [ ! -e ${MNTP}/var/run/rsyncd.pid ];then
      if [ ! -d ${MNTP}/mnt/update ];then
        mkdir -p ${MNTP}/mnt/update
      fi;
      mount /dev/flash/upgrade ${MNTP}/mnt/update -o ro
      if [ -d ${MNTP}/mnt/update/${CORE} ];then
        mount --bind ${MNTP} ${MNTP}/mnt/update/${CORE}
        mount --bind ${MNTP}/install/tools ${MNTP}/mnt/update/${CORE}/install/tools
        mount -t ramfs none ${MNTP}/var/run
        chroot ${MNTP} rsync --daemon --config /etc/rsyncd-update.conf
       else
        umount ${MNTP}/mnt/update
      fi;
    fi;
 elif [ "${1}" == "upgrade" ];then
  if [ ! -e "/etc/firewall.conf" ] || [ ! -e "/etc/netsentry-version" ];then
    echo "This does not look like a valid server to upgrade"
    exit 255
  fi;

  Clean_Init
  Load_Flash std 0

  if [ ! -d ${MNTP}/lost+found ] || [ ! -e /dev/flash/upgrade ];then
    Umount_Flash
    echo "Not available"
    exit 255
  fi;

  if [ ! -d ${MNTP}/mnt/update ];then
      mkdir -p ${MNTP}/mnt/update
  fi;
  if [ ! -d ${MNTP}/mnt/update/lost+found ];then
    mount /dev/flash/upgrade ${MNTP}/mnt/update
    if [ $? != "0" ];then
      Umount_Flash
      echo "Not available"
      exit 255
    fi;
  fi;

  RERR=0;
  KROPT="--include=/boot/[vS]*${KERNEL}-* --include=/lib/modules/${KERNEL}-* --exclude=/lib/modules/* --exclude=/boot/*"
  for updata in "vbox /mnt/dev /" "share /var/spool/samba/share /var/spool/samba/share/" "programs /var/spool/rsync/programs /" \
                "manuals /var/spool/rsync/webman /var/spool/apache/htdocs/" "asterisk-10 /var/spool/rsync/asterisk-10 /" \
                "avirus /var/spool/avirus /var/spool/avirus" "kernel / /";do
    if [ ${RERR}  == 0 ];then
      Sync_Local ${updata}
      RERR=$?
      echo
    fi;
  done
  if [ ${RERR}  == 0 ];then
    KUSER=/var/spool/rsync/kernuser/kernel-${KERNEL}-smp
    if [ ! -d ${MNTP}/mnt/update/${KUSER} ] && [ -d ${KUSER} ];then
      echo "Local Kernel User Files"
      rsync ${ROPT_LOC} ${KUSER} ${MNTP}/mnt/update/${KUSER}
      echo;
    fi;
    Sync_Local kernuser ${KUSER}/ /
    RERR=$?
    echo
  fi;
  if [ ${RERR}  == 0 ];then
    echo updates
    rsync ${ROPT_LOC} -u --delay-updates ${MNTP}/install/update/ /var/spool/update
    RERR=$?
  fi;
  Umount_Flash
  exit ${RERR}
 elif [ "${1}" == "mount" ] && [ ! -d ${MNTP}/lost+found ];then
  Clean_Init
  Load_Flash
 elif [ "${1}" == "" ] && [ ! -d ${MNTP}/lost+found ];then
  Clean_Init
  Load_Flash
 elif [ "${1}" == "umount" ] && [ -d ${MNTP}/lost+found ];then
  Umount_Flash
 elif [ "${1}" == "" ] && [ -d ${MNTP}/lost+found ];then
  Umount_Flash
 else
  Show_Help
fi;
