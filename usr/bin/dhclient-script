#!/bin/bash
# dhclient-script for Linux. Dan Halbert, March, 1997.
# Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
# No guarantees about this. I'm a novice at the details of Linux
# networking.

# Notes:

# 0. This script is based on the netbsd script supplied with dhcp-970306.

# 1. ifconfig down apparently deletes all relevant routes and flushes
# the arp cache, so this doesn't need to be done explicitly.

# 2. The alias address handling here has not been tested AT ALL.
# I'm just going by the doc of modern Linux ip aliasing, which uses
# notations like eth0:0, eth0:1, for each alias.

# 3. I have to calculate the network address, and calculate the broadcast
# address if it is not supplied. This might be much more easily done
# by the dhclient C code, and passed on.

# 4. TIMEOUT not tested. ping has a flag I don't know, and I'm suspicious
# of the $1 in its args.

# 'ip' just looks too weird.  /sbin/ip looks less weird.
ip=/sbin/ip

activate_dnsfwd() {
  if [ ! -e /etc/bind/forwarders.conf ];then
    touch /etc/bind/forwarders.conf
  fi;
  if [ -s /etc/bind/forwarders.ppp ];then
    if [ "`diff /etc/bind/forwarders.ppp /etc/bind/forwarders.conf`" ];then
      cp /etc/bind/forwarders.ppp /etc/bind/forwarders.conf
      /usr/sbin/rndc reload
    fi;
   elif [ -s /etc/bind/forwarders.static ];then
    if [ "`diff /etc/bind/forwarders.static /etc/bind/forwarders.conf`" ];then
      cp /etc/bind/forwarders.static /etc/bind/forwarders.conf
      /usr/sbin/rndc reload
    fi;
   elif [ -s /etc/bind/forwarders.dhcp6 ];then
    if [ "`diff /etc/bind/forwarders.dhcp6 /etc/bind/forwarders.conf`" ];then
      cp /etc/bind/forwarders.dhcp6 /etc/bind/forwarders.conf
      /usr/sbin/rndc reload
    fi;
   elif [ -s /etc/bind/forwarders.dhcp4 ];then
    if [ "`diff /etc/bind/forwarders.dhcp4 /etc/bind/forwarders.conf`" ];then
      cp /etc/bind/forwarders.dhcp4 /etc/bind/forwarders.conf
      /usr/sbin/rndc reload
    fi;
   elif [ -s /etc/bind/forwarders.conf ];then
     echo -n > /etc/bind/forwarders.conf
     /usr/sbin/rndc reload
  fi;
}

add_dnsfwd() {
  if [ x"$new_domain_name_servers" != x ]; then
    for nameserver in $new_domain_name_servers; do
      FWD="${FWD}${nameserver};"
    done
    (cat <<EOF
forward first;
forwarders {${FWD}};
EOF
) > /etc/bind/forwarders.dhcp4
  elif [ "x${new_dhcp6_name_servers}" != x ] ; then
    for nameserver in ${new_dhcp6_name_servers} ; do
      if [ "${nameserver:0:4}" == "fe80" ];then
        FWD="${FWD}${nameserver}%${interface};"
       else
        FWD="${FWD}${nameserver};"
      fi;
    done
    (cat <<EOF
forward first;
forwarders {${FWD}};
EOF
) > /etc/bind/forwarders.dhcp6
  fi
  activate_dnsfwd
}

### DHCPv4 Handlers
###


if [ x$IF_METRIC != x ]; then
  metric_arg="metric $IF_METRIC"
 else
  METRIC=$((500 + `cat "/sys/class/net/${interface}/ifindex" 2>/dev/null || echo 0`))
  metric_arg="metric $METRIC"
fi

if [ x$reason = xMEDIUM ]; then
  # Linux doesn't do mediums (ok, ok, media).
  exit 0
fi

if [ x$reason = xPREINIT ]; then
  if [ x$alias_ip_address != x ]; then
    ip -4 addr flush dev $interface label ${interface}:fixed
  fi
  ip -4 addr flush dev $interface label ${interface}:dhcp
  ip link set up dev $interface

  # We need to give the kernel some time to get the interface up.
  sleep 1

  exit 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
  exit 0
fi
  
if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then
  current_hostname=`hostname`
  if [ x$current_hostname = x ] || \
     [ x$current_hostname = "x(none)" ] || \
     [ x$current_hostname = xlocalhost ] || \
     [ x$current_hostname = x$old_host_name ]; then
    if [ x$new_host_name != x$old_host_name ]; then
      hostname "$new_host_name"
    fi
  fi
    
  if [ x$old_ip_address != x ] && [ x$alias_ip_address != x ] && \
		[ x$alias_ip_address != x$old_ip_address ]; then
    # Possible new alias. Remove old alias.
    ip -4 addr flush dev $interface label ${interface}:fixed
  fi
  if [ x$old_ip_address != x ] && [ x$old_ip_address != x$new_ip_address ]; then
    # IP address changed. Bringing down the interface will delete all routes,
    # and clear the ARP cache.
    ip -4 addr flush dev $interface label ${interface}:dhcp
  fi

  if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
     [ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

    ip addr add $new_ip_address/$new_subnet_mask broadcast $new_broadcast_address dev $interface label ${interface}:dhcp
    ip route add $new_network_number/$new_subnet_mask src $new_ip_address dev ${interface} table Link

    # Add a network route to the computed network address.
    for router in $new_routers; do
      if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	ip route add $router src $new_ip_address dev ${interface}:dhcp table 90
      fi
      ip route add default via $router src $new_ip_address $metric_arg dev ${interface} table 90
    done
  else
    # we haven't changed the address, have we changed other options           
    # that we wish to update?
    if [ x$new_routers != x ] && [ x$new_routers != x$old_routers ] ; then
      # if we've changed routers delete the old and add the new.
      for router in $old_routers; do
        ip route del default via $router table 90
      done
      for router in $new_routers; do
        if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	  ip route add $router src $new_ip_address dev $interface table 90
	fi
        ip route add default via $router src $new_ip_address $metric_arg dev $interface table 90
      done
    fi
  fi
  if [ x$new_ip_address != x$alias_ip_address ] && [ x$alias_ip_address != x ];then
    ip addr add $alias_ip_address/$alias_subnet_mask broadcast $new_broadcast_address dev $interface label ${interface}:fixed
    ip route add $alias_network_number/$alias_subnet_mask src $alias_ip_address dev ${interface} table Link
  fi
  add_dnsfwd
  if [ -x /usr/bin/dhclient-fw ];then
    /usr/bin/dhclient-fw $new_network_number $new_subnet_mask $new_ip_address $new_broadcast_address
  fi;
  exit 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then
  if [ x$alias_ip_address != x ]; then
    # Turn off alias interface.
     ip -4 addr flush dev $interface label ${interface}:fixed
  fi
  if [ x$old_ip_address != x ]; then
    # Shut down interface, which will delete routes and clear arp cache.
    ip -4 addr flush dev $interface label $interface:dhcp
  fi
  if [ x$alias_ip_address != x ]; then
    ip addr add $alias_ip_address/$alias_subnet_mask broadcast $alias_broadcast_address dev $interface label ${interface}:fixed
    ip route add $alias_network_number/$alias_subnet_mask src $alias_ip_address dev ${interface} table Link
  fi
  rm /etc/bind/forwarders.dhcp4
  activate_dnsfwd
  exit 0
fi

if [ x$reason = xTIMEOUT ]; then
  if [ x$alias_ip_address != x ]; then
    ip -4 addr flush dev $interface label ${interface}:fixed
  fi

  ip addr add $new_ip_address/$new_subnet_mask broadcast $new_broadcast_address dev $interface label ${interface}:dhcp
  ip route add $new_network_number/$new_subnet_mask src $new_ip_address dev ${interface} table Link

  set $new_routers
  if ping -q -c 1 $1; then
    if [ x$new_ip_address != x$alias_ip_address ] && \
			[ x$alias_ip_address != x ]; then
      ip addr add $alias_ip_address/$alias_subnet_mask broadcast $alias_broadcast_address dev $interface label ${interface}:fixed
      ip route add $alias_network_number/$alias_subnet_mask src $alias_ip_address dev ${interface} table Link
    fi
    for router in $new_routers; do
      if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	ip route add $router src $new_ip_address dev $interface table 90
      fi
      ip route add default via $router src $new_ip_address $metric_arg dev $interface table 90
    done
    add_dnsfwd
    if [ -x /usr/bin/dhclient-fw ];then
      /usr/bin/dhclient-fw $new_network_number $new_subnet_mask $new_ip_address $new_broadcast_address
    fi;
    exit 0
  fi
  ip -4 addr flush dev $interface label ${interface}:dhcp
  rm /etc/bind/forwarders.dhcp4
  activate_dnsfwd
  exit 1
fi

###
### DHCPv6 Handlers
###

if [ x$reason = xPREINIT6 ] ; then
  ${ip} link set ${interface} up
  ${ip} -f inet6 addr flush dev ${interface} scope global permanent
  exit 0
fi

if [ x${old_ip6_prefix} != x ] || [ x${new_ip6_prefix} != x ] ; then
    echo Prefix ${reason} old=${old_ip6_prefix} new=${new_ip6_prefix}
    exit 0
fi

if [ x$reason = xBOUND6 ] ; then
  if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
    exit 2;
  fi
  ${ip} -f inet6 addr add ${new_ip6_address}/${new_ip6_prefixlen} dev ${interface} scope global
  add_dnsfwd
  exit 0
fi

if [ x$reason = xRENEW6 ] || [ x$reason = xREBIND6 ] ; then
  if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
    exit 2;
  fi
  ${ip} -f inet6 addr add ${new_ip6_address}/${new_ip6_prefixlen} dev ${interface} scope global

  if [ "x${new_dhcp6_name_servers}" != "x${old_dhcp6_name_servers}" ] ||
     [ "x${new_dhcp6_domain_search}" != "x${old_dhcp6_domain_search}" ] ; then
    add_dnsfwd
  fi
  exit 0
fi

if [ x$reason = xDEPREF6 ] ; then
  if [ x${new_ip6_prefixlen} = x ] ; then
    exit 2;
  fi
  ${ip} -f inet6 addr change ${new_ip6_address}/${new_ip6_prefixlen} dev ${interface} scope global preferred_lft 0
  exit 0
fi;

if [ x$reason = xEXPIRE6 -o x$reason = xRELEASE6 -o x$reason = xSTOP6 ] ; then
  if [ x${old_ip6_address} = x ] || [ x${old_ip6_prefixlen} = x ] ; then
    exit 2;
  fi;
  ${ip} -f inet6 addr del ${old_ip6_address}/${old_ip6_prefixlen} dev ${interface}

  rm /etc/bind/forwarders.dhcp6
  activate_dnsfwd
  exit 0
fi

exit 0
