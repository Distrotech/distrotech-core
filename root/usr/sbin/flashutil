#!/bin/bash

SERV=pbx.distrotech.co.za
BASE=/var/spool/distrotech
MNTP=/mnt/floppy
CORE=/mnt/dev
AMNT=/media
CWD=`pwd`

KSUF="dts"

OFFSET=511705088
LIMIT=3167748096

UOFFSET=1048576
ULIMIT=510656512

ROPT_LOC="-avHKOP"
ROPT="${ROPT_LOC} -z --inplace --timeout=120"
ROPT_FAT="-rtvcOP --chmod=ugo=rwX --no-p --no-g --inplace --delete"
UROPT_LOC="${ROPT_LOC} -u --delay-updates --exclude-from=/var/spool/apache/htdocs/ns/config/exclude.nfs"
UROPT="${UROPT_LOC} -z --timeout=120"

Make_GPT() {
  parted -s ${1} mklabel msdos
  parted -s ${1} mkpart primary fat32 1 512
  if [ "${2}" == "loop" ];then
    parted -s ${1} "mkpart primary ext2 512 3679453183B"
   elif [ "${2}" == "tiny" ];then
    parted -s ${1} "mkpart primary ext2 512 -1"
   else
    parted -s ${1} mkpart primary ext2 512 3679453183B
    parted -s ${1} "mkpart primary fat32 3680 -1"
    parted -s ${1} set 3 boot on
  fi;
  parted -s ${1} set 2 lvm on
}

Make_LVM() {
  pvremove -ff -y ${2} > /dev/null 2>&1
  pvcreate -ff -y ${2}
  vgcreate ${1} ${2}
  if [ "${3}" == "tiny" ];then
    lvcreate -n install -l "100%FREE" ${1}
   else
    lvcreate -n install -L 1435M ${1}
    lvcreate -n upgrade -l "100%FREE" ${1}
    mkfs.ext4 -L UPGRADE /dev/${1}/upgrade
  fi;
  mkfs.ext4 -L INSTALL /dev/${1}/install
}

Make_Flash() {
  if [ -e "/dev/${2}" ] && [ -b "/dev/${2}" ];then
    if [ "`cat /sys/block/${2}/removable 2> /dev/null`" == 0 ];then
      echo "non removable block device"
      exit 255
    fi;
    vgchange -a n ${1} > /dev/null 2>&1
    (dmsetup remove /dev/${1}/install
    dmsetup remove /dev/${1}/upgrade) > /dev/null 2>&1
    vgremove -f flash /dev/${2} > /dev/null 2>&1
    vgremove -f ${1} > /dev/null 2>&1
    vgchange -a n ${1} > /dev/null 2>&1

    if [ -d /dev/${1} ];then
      echo "LVM ${1} Active on /dev/${2} ??"
      exit 255
    fi;

    BSIZE=`cat /sys/block/${2}/size`;
    BSIZE=`echo "${BSIZE} / 2048" | bc`;
    if (( ${BSIZE} >= 7500 ));then
      Make_GPT /dev/${2}
      mkdosfs -n BOOTISO /dev/${2}3
      Make_LVM ${1} /dev/${2}2
     elif (( ${BSIZE} >= 3680 ));then
      Make_GPT /dev/${2} loop
      Make_LVM ${1} /dev/${2}2
     elif (( ${BSIZE} >= 1900 ));then
      Make_GPT /dev/${2} tiny
      Make_LVM ${1} /dev/${2}2 tiny
     else
       echo "Device is too small"
       exit 255
    fi;
    mkdosfs -n DISTROTECH /dev/${2}1
   else
    echo "Invalid block device or flash lvm active"
    return 255
  fi;
  (dmsetup remove_all
  vgchange -a y ${1}) > /dev/null 2>&1
  vgmknodes
}

Mount_Flash() {
  if [ "${1}" == "clean" ];then
    FSCKO="-Dfy";
   else
    FSCKO="-p";
  fi;

  e2fsck -C 0 ${FSCKO} /dev/flash/install
  if (( $? >=  4 ));then
    echo "File System Error"
    return 255
  fi;
  if [ -w /dev/flash/upgrade ];then
    e2fsck -C 0 ${FSCKO} /dev/flash/upgrade
    if (( $? >=  4 ));then
      echo "File System Error"
      return 255
    fi;
  fi;

  mount /dev/flash/install ${MNTP}
  if [ $? != 0 ];then
    echo Mount failure
    return 255
  fi;

  if [ -d ${MNTP}/etc ];then
    rm ${MNTP}/etc/mtab
    touch ${MNTP}/etc/mtab
    chroot ${MNTP}/ mount -f /
    chroot ${MNTP}/ mount -fa
  fi;

  for sdir in dev proc sys;do
    if [ ! -d ${MNTP}/${sdir} ];then
      mkdir ${MNTP}/${sdir}
    fi;
  done

  mount --bind /dev ${MNTP}/dev/
  mount --bind /proc ${MNTP}/proc
  mount --bind /sys ${MNTP}/sys

  if [ ! -d ${MNTP}/install/tools ];then
    mkdir -p ${MNTP}/install/tools
  fi;
  sleep 2
  if [ -e /dev/loop-flash ];then
    DUFS=`findfs LABEL=DTSUTIL`
   else
    DUFS=`findfs LABEL=DISTROTECH`
  fi;
  dosfsck -a ${DUFS}
  mount ${DUFS} ${MNTP}/install/tools

  if [ -e ${MNTP}/install/netsentry-version ];then
    eval `cat ${MNTP}/install/netsentry-version`
  fi;
}

Umount_Flash() {
  (rm ${MNTP}/root/.bash_history ${MNTP}/var/lib/nfs/rmtab ${MNTP}/etc/lvm/*/*
  rm ${MNTP}/var/spool/samba/ftp/welcome.txt ${MNTP}/var/state/dhcp/dhcpd.leases
  rm ${MNTP}/root/.bash_history ${MNTP}/etc/lvm/cache/.cache
  rm -rf ${MNTP}/intall/mnt/* ${MNTP}/var/run/* ${MNTP}/var/spool/ldap/* ) > /dev/null 2>&1


  if [ -d ${MNTP}/mnt/update/${CORE}/lost+found ];then
    while [ "`pidof rsync`" ];do
      killall rsync
      sleep 1
     done
     (umount ${MNTP}/var/run
     umount ${MNTP}/mnt/update/${CORE}/install/tools
     umount ${MNTP}/mnt/update/${CORE}) > /dev/null 2>&1
  fi;

  if [ -d ${MNTP}/mnt/update/lost+found ];then
    umount ${MNTP}/mnt/update
  fi;

  sleep 2

  (umount ${MNTP}/sys
  umount ${MNTP}/dev
  umount ${MNTP}/proc
  umount ${MNTP}/install/tools
  umount ${MNTP}) > /dev/null 2>&1

  vgchange -a n flash > /dev/null 2>&1

  sleep 2
  (dmsetup remove /dev/flash/install
  dmsetup remove /dev/flash/upgrade) > /dev/null 2>&1

  if [ -e /dev/flashm/install ] && [ -d ${CORE}/lost+found ];then
    umount ${CORE}/install/tools
    umount ${CORE}
    vgchange -a n flashm
    (dmsetup remove /dev/flashm/install
    dmsetup remove /dev/flashm/upgrade) > /dev/null 2>&1
  fi;

  sleep 2
  vgmknodes >/dev/null 2>&1
  if [ -d /dev/flashm ] && [ ! -d /dev/flash ];then
    vgrename flashm flash
  fi;

  if [ -e /dev/loop-flash ];then
    vgchange -a n flash > /dev/null 2>&1
    sleep 2
    losetup -d /dev/loop-flash
    if [ $? == 0 ] && [ -e /dev/loop-flash ];then
      rm /dev/loop-flash
      unset LOOP
    fi;
  fi;

  if [ -e /dev/loop-util ];then
    losetup -d /dev/loop-util
    if [ $? == 0 ] && [ -e /dev/loop-util ];then
      rm /dev/loop-util
      unset ULOOP
    fi;
  fi;

  if [ -f /mnt/cdrom/flash.hdd ];then
    umount /mnt/cdrom
  fi;
}

Check_Grub() {
  Make_Grubcfg > /tmp/grub.cfg
  if [ ! -e ${MNTP}/boot/grub/grub.cfg ] || [ "`diff /tmp/grub.cfg ${MNTP}/boot/grub/grub.cfg`" ];then
    cp /tmp/grub.cfg ${MNTP}/boot/grub/
   else
    rm /tmp/grub.cfg
  fi;

  if [ ! -e ${MNTP}/boot/grub/core.img ] || [ ${MNTP}/usr/lib/grub/i386-pc/ -nt ${MNTP}/boot/grub/core.img ];then
    if [ "${LOOP}" ] || [ -e /dev/loop-flash ];then
      RLOOP=`losetup -f`
      RLOOP=`readlink -f ${RLOOP}`
      losetup ${RLOOP} ${BASE}/flash.hdd
      echo "(hd0)	${RLOOP}" > ${MNTP}/boot/grub/device.map
      chroot ${MNTP} /usr/sbin/grub-install --force ${RLOOP}
      rm ${MNTP}/boot/grub/device.map
      sleep 2
      losetup -d ${RLOOP}
     else
         chroot ${MNTP} /usr/sbin/grub-mkdevicemap
         pvdisplay -c |awk -F: -v mpt=${MNTP} '$2 == "flash" {printf "chroot %s /usr/sbin/grub-install --force%s\n",mpt,substr($1,1,length($1)-1)}' |sh
    fi;
  fi;

  NEED_INITRD=0
  if [ "${KERNEL}-${KSUF}" ] && [ ! -e ${MNTP}/lib/modules/${KERNEL}-${KSUF}/modules.dep ];then
    NEED_INITRD=1
  fi;
  if [ ${NEED_INITRD} == 1 ] || \
     [ ${MNTP}/install/core/kernel.tar.bz2 -nt ${MNTP}/boot/initrd.img ] || \
     [ ${MNTP}/usr/sbin/flashutil -nt ${MNTP}/boot/initrd.img ];then
    Tar_Kernel ${MNTP}
  fi;

  if [ -d ${BASE} ];then
    if [ ${MNTP}/boot/grub/grub.cfg -nt ${BASE}/boot/grub/grub.cfg ];then
      cp ${MNTP}/boot/grub/grub.cfg ${BASE}/boot/grub/grub.cfg
    fi;

    if [ ! -f ${BASE}/rescue/grub.iso ] || [ ${MNTP}/boot/grub/grub.cfg -nt ${BASE}/rescue/grub.iso ];then
      TDIR=/tmp/rescue_$$${RANDOM}
      while [ -e ${TDIR} ];do
        TDIR=/tmp/rescue_$$${RANDOM}
      done;
      mkdir -p ${TDIR}/boot/grub
      cp ${MNTP}/boot/grub/grub.cfg ${TDIR}/boot/grub/grub.cfg
      grub-mkrescue -o ${BASE}/rescue/grub.iso --volid DISTROTECH_RESCUE ${TDIR}
      rm -rf ${TDIR}
    fi;
  fi;
}

Make_Bootetc() {
  cd ${1}

  dd if=/dev/zero of=install/core/etc bs=1M count=6 > /dev/null 2>&1
  ELOOP=`/sbin/losetup -f`
  ELOOP=`readlink -f ${ELOOP}`
  /sbin/losetup ${ELOOP} install/core/etc
  /sbin/mkfs.ext4 -L bootetc -i 1024 ${ELOOP} > /dev/null 2>&1

  if [ ! -d mnt/floppy ] && [ -e mnt/floppy ];then
    rm -rf mnt/floppy
    mkdir mnt/floppy
   elif [ ! -e mnt/floppy ];then
    mkdir mnt/floppy
   else
    rm -rf mnt/floppy/*
  fi;
  mount ${ELOOP} mnt/floppy

  if [ $? != 0 ];then
    losetup -d ${ELOOP}
    rm install/core/etc
    return 1
  fi;

  echo "/dev/flash/install	/	ext4	defaults	0	1" > etc/fstab
  rm etc/blkid.* > /dev/null 2>&1
  cp -Rp etc/* mnt/floppy

  (cat <<EOF
hosts:  	files dns
passwd:		files
shadow:		files
group:		files
EOF
) > mnt/floppy/nsswitch.conf

  if [ etc/rsyncd.conf -nt etc/rsyncd-update.conf ];then
    sed -e "s/\(path = \)/\1\/mnt\/update/" etc/rsyncd.conf > etc/rsyncd-update.conf
  fi;
  echo "smbadm::139:" >> mnt/floppy/group
  echo "*.*                                       /dev/tty5" > mnt/floppy/syslog.conf
  echo "telnet          stream  tcp     nowait  root    /usr/sbin/in.telnetd" > mnt/floppy/inetd.conf
  sed -e "s/^\(PasswordAuthentication\).*/\1 yes/" \
      -e "s/^\(UsePAM\).*/\1 no/" etc/sshd_config > mnt/floppy/sshd_config
  sed -e "s/^.*agetty.*//" etc/inittab > mnt/floppy/inittab
  sed -e "s/ecryptfs/permit/" etc/pam.conf > mnt/floppy/pam.conf
  sed -e "s/^#skip-innodb$/skip-innodb/" etc/my.cnf > mnt/floppy/my.cnf
  sed -e "s/\(suggested-size.*\)20011/\1211/" etc/nscd.conf > mnt/floppy/nscd.conf

  for todel in HOSTNAME openssl/ca.conf ifconf/* mtab* ppp/ip-up;do
    rm mnt/floppy/${todel} > /dev/null 2>&1
  done

  (cat <<_EOF_
#!/bin/bash

(flock -w 20 10 || exit
if [ ! -e /dev/gsmmodem ];then
  TST=X
  while [ "${TST}" != "XXXXXXXX" ] && [ ! -e /dev/gsmmodem ];do
    /usr/bin/sleep 5
    TST=${TST}X
  done;
  if [ ! -e /dev/gsmmodem ];then
    exit
  fi;
fi;

/usr/sbin/pppd /dev/gsmmodem connect "/usr/sbin/chat -v -f /etc/ppp/diald.3g" lock maxfail 5 unit 10 logfile /var/log/pppd.log.3g linkname 3g ipparam 3g defaultroute noauth persist nomultilink usepeerdns

flock -u 10
) 10>/var/lock/ppp10.lock &
_EOF_
) > mnt/floppy/ifconf/pppup.ppp3g
  chmod 755 mnt/floppy/ifconf/pppup.ppp3g

  (cat <<_EOF_
#!/bin/bash

grep -v "nameserver" /etc/resolv.conf > /tmp/resolv.conf

if [ "\${DNS1}" ];then
  echo "nameserver \${DNS1}" >> /tmp/resolv.conf
fi;

if [ "\${DNS2}" ];then
  echo "nameserver \${DNS2}" >> /tmp/resolv.conf
fi;

cp /tmp/resolv.conf /etc/resolv.conf

_EOF_
) > mnt/floppy/ppp/ip-up
  chmod 755 mnt/floppy/ppp/ip-up

  for totouch in mtab .install .networksentry-lite;do
    touch mnt/floppy/${totouch}
  done

  while [ -d mnt/floppy/lost+found ];do
    umount mnt/floppy > /dev/null 2>&1
    sleep 2
  done;

  e2fsck -Dfy ${ELOOP} > /dev/null 2>&1
  sleep 2
  /sbin/losetup -d ${ELOOP}
  gzip -f -9 install/core/etc

  TDIR=/tmp/dummy_$$${RANDOM}
  while [ -e ${TDIR} ];do
    TDIR=/tmp/dummy_$$${RANDOM}
  done;

  rsync -avHKOn --out-format="%n" --filter=". install/core/core.filter" ./ ${TDIR} |awk '/(^[a-z]+\/)|(^home$)/ {print $0}' |\
      sort > install/core/filelist
  tar --use-compress-program=bzip2 -cf install/core/install.tbz etc/group etc/syslog.conf etc/inetd.conf etc/sshd_config\
      etc/inittab etc/ppp/ip-up etc/my.cnf etc/nscd.conf etc/pam.conf var

  rm root/.bash_history > /dev/null 2>&1
  cd ${CWD}
}

Sync_Update() {
  if [ -e ${1}/install/netsentry-version ];then
    eval `cat ${1}/install/netsentry-version`
  fi;

  if [ ! -d ${1}/mnt/update ];then
    mkdir -p ${1}/mnt/update
  fi;

  if [ "${2}" ];then
    mount ${2} ${1}/mnt/update
   else
    mount /dev/flash/upgrade ${1}/mnt/update
  fi;

  if [ $? != 0 ] || [ ! -e ${1}/mnt/update/lost+found ];then
    return 255
  fi;

  if [ "${3}" == "clean" ];then
    for deldir in boot lib mnt pkgs var;do
      rm -rf ${1}/mnt/update/${deldir}
    done
  fi;

  if [ ! -d ${1}/mnt/update/pkgs ];then
    mkdir ${1}/mnt/update/pkgs
  fi;

  if [ ! -d ${1}/mnt/update${CORE} ];then
    mkdir -p ${1}/mnt/update${CORE}
  fi;

  cd ${1}/mnt/update

  mkdir -p var/spool/samba/share
  chown -R 0.139 var/spool/samba

  cat ${1}/install/pkgs/pkg.list |cut -d: -f2|sort |uniq |awk '$1 != "" {printf "if [ ! -d %s ];then mkdir -p %s;fi\n",$1,$1}' |sh

  cat ${1}/install/pkgs/pkg.list | awk -v BASE="${1}" -F: '$3 != "" {printf "\tif [ ! -e pkgs/%s ] || [ %s/install/pkgs/%s -nt pkgs/%s ];then\n\
		echo %s\n\
		tar --use-compress-program=%s -C %s -xf %s/install/pkgs/%s\n\
		touch pkgs/%s\n\tfi;\n",$1,BASE,$1,$1,$1,$3,$2,BASE,$1,$1}' |sh

  kuserdir=var/spool/rsync/kernuser/kernel-${KERNEL}
  if [ ! -e pkgs/kernel.tar.bz2 ] || [ ${1}/install/core/kernel.tar.bz2 -nt pkgs/kernel.tar.bz2 ];then
    rm -rf lib/modules/* boot/* var/spool/rsync/kernuser/*
    mkdir -p ${kuserdir}-${KSUF}
    tar --use-compress-program=bunzip2 --exclude=lib/modules --exclude=boot -C ${kuserdir}-${KSUF} -xf ${1}/install/core/kernel.tar.bz2
    touch pkgs/kernel.tar.bz2
  fi;
  echo "Install Kernel Firmware"
  if [ ! -d ${kuserdir}-${KSUF}/lib/firmware ];then
    if [ -e ${kuserdir}-${KSUF}/lib/firmware ];then
      rm -rf ${kuserdir}-${KSUF}/lib/firmware
    fi;
    mkdir -p ${kuserdir}-${KSUF}/lib/firmware
  fi;
  if [ ! -d boot ];then
    mkdir boot
  fi;
  rsync ${ROPT_LOC} --delete ${kuserdir}-${KSUF}/lib/firmware lib/
  echo
  echo "Install Kernel Modules"
  rsync ${ROPT_LOC} --delete --exclude=${KERNEL}-${KSUF}/modules.* ${1}/lib/modules/${KERNEL}-${KSUF} lib/modules/
  echo
  echo "Install Kernel"
  rsync ${ROPT_LOC} ${1}/boot/vmlinuz boot/vmlinuz-${KERNEL}-${KSUF}
  echo
  echo "Install Kernel System Map"
  rsync ${ROPT_LOC} ${1}/boot/System.map boot/System.map-${KERNEL}-${KSUF}
  echo

  if [ ! -h var/spool/avirus ] || [ -e var/spool/avirus ];then
    rm -rf var/spool/avirus > /dev/null 2>&1
  fi;
  if [ ! -e var/spool/avirus ];then
    ln -s /mnt/update/${CORE}/install/avirus var/spool/avirus > /dev/null 2>&1
  fi;

  if [ ! -d var/spool/rsync/programs/var/spool/update ];then
    (rm -rf var/spool/rsync/programs/var/spool/update
    mkdir var/spool/rsync/programs/var/spool/update) > /dev/null 2>&1
  fi;
  echo "Schema Updates"
  rsync ${ROPT_LOC} ${1}/install/update/ var/spool/rsync/programs/var/spool/update
  echo


  cd ${CWD}
  sleep 2
  umount ${1}/mnt/update

  rm ${1}/etc/blkid.tab ${1}/etc/blkid.tab.old ${1}/etc/lvm/cache/.cache ${1}/tmp/* ${1}/etc/lvm/backup/flash \
     ${1}/etc/lvm/archive/* ${1}/etc/iftab ${1}/var/run/* > /dev/null 2>&1
}

Update_Flash() {
  if [ -d ${CORE}/install/core ];then
    Local_Sync ${CORE} ${MNTP}
   else
    Remote_Sync ${MNTP} ${1}
  fi
  RERR=$?
  if [ ${RERR} == 0 ];then
    if [ -e /dev/flash/upgrade ];then
      Sync_Update ${MNTP} /dev/flash/upgrade
    fi;
    if [ ! -d ${CORE}/install ];then
      Make_Bootetc ${MNTP}
      if [ "${1}" ];then
        Tar_Kernel ${MNTP} ${1}
      fi;
     else
      Make_Bootetc ${CORE}
    fi;
    Check_Grub
    if [ -d ${BASE} ];then
      echo "Sync Tools To ISO Folder"
      rsync ${ROPT_LOC} --delete --inplace ${MNTP}/install/tools/* ${BASE}/wintools/
      echo
    fi;
  fi;
  return ${RERR}
}

Load_Flash() {
  if [ -d ${MNTP}/lost+found ];then
    if [ -e ${MNTP}/install/netsentry-version ];then
      eval `cat ${MNTP}/install/netsentry-version`
    fi;
    return 0;
  fi;

  if [ ! -e /dev/flash/install ];then
    LOOP=`losetup -f`
    if [ ! "${LOOP}" ];then
      echo Cannont allocate loop device
      exit -1
    fi;
    LOOP=`readlink -f ${LOOP}`

    if [ -e /dev/loop-flash ];then
      losetup -d /dev/loop-flash
      if [ $? == 0 ] && [ -e /dev/loop-flash ];then
        rm /dev/loop-flash
      fi;
    fi;

    if [ -e /dev/loop-util ];then
      losetup -d /dev/loop-util
      if [ $? == 0 ] && [ -e /dev/loop-util ];then
        rm /dev/loop-util
      fi;
    fi;

    if [ -e /dev/loop-flash ] || [ -e /dev/loop-util ];then
      echo "/dev/loop-flash Active ??"
      exit 255
    fi;

    FLASH=${BASE}/flash.hdd
    #Maybe there is a DVD in that i can use if i cant write
    if [ -e /dev/cdrom ] && [ ! -f ${FLASH} ] && [ "${2}" == "0" ];then
      if [ ! -d /mnt/cdrom ];then
        mkdir -p /mnt/cdrom
      fi;
      mount /dev/cdrom /mnt/cdrom -o ro > /dev/null 2>&1
      MERR=$?
      if [ ${MERR} == 0 ] && [ -f /mnt/cdrom/flash.hdd ];then
        FLASH=/mnt/cdrom/flash.hdd
       elif [ ${MERR} == 0 ];then
        umount /mnt/cdrom
      fi;
    fi;

    if [ ! -f ${FLASH} ];then
      if [ "${2}" == "0" ];then
        echo "Not  allowed to create repository one does not exists or DVD not present"
        exit 255
      fi;

      if [ ! -d ${BASE}/boot/grub ];then
        mkdir -p ${BASE}/boot/grub
      fi;

      for utildir in rescue wintools boot;do
        if [ ! -d ${BASE}/${utildir} ];then
          mkdir ${BASE}/${utildir}
        fi;
      done

      dd if=/dev/zero of=${FLASH} bs=16M count=230 > /dev/null 2>&1
      Make_GPT ${FLASH} loop
      MKFS=1;
     else
      MKFS=0;
    fi;

    losetup -o ${OFFSET} --sizelimit ${LIMIT} ${LOOP} ${FLASH}
    if [ $? != 0 ];then
      echo "Loop attach fail"
      exit 255
    fi;
    ULOOP=`losetup -f`
    ULOOP=`readlink -f ${ULOOP}`
    losetup -o ${UOFFSET} --sizelimit ${ULIMIT} ${ULOOP} ${FLASH}
    if [ $? != 0 ];then
      echo "Util Loop attach fail"
      losetup -d ${LOOP}
      exit 255
    fi;

    sleep 2
    rm ${LOOP}p* > /dev/null 2>&1
    rm ${ULOOP}p* > /dev/null 2>&1

    if [ ${MKFS} == 1 ];then
      Make_LVM flash ${LOOP}
      mkdosfs -n DTSUTIL ${ULOOP}
    fi;

    if [ ! -d /dev/flash ];then
      (vgchange -a y flash
      vgmknodes) > /dev/null 2>&1
    fi

    if [ ! -e /dev/flash/install ] || [ ! -e /dev/flash/upgrade ];then
      echo "Something went wrong invalid flash file"
      losetup -d ${LOOP}
      losetup -d ${ULOOP}
      exit 255
    fi;

    if [ -e /dev/flash/install ];then
      ln -s ${LOOP} /dev/loop-flash
      ln -s ${ULOOP} /dev/loop-util
    fi;
  fi;

  Mount_Flash ${1}
  RES=$?
  if [ ! -d ${MNTP}/root ] && [ ${RES} == 0 ];then
    Update_Flash
    RES=$?
  fi;
  if [ ${RES} != 0 ];then
    exit ${RES}
   else
    return 0
  fi;
}

Remote_Sync() {
  RERR=0;

  if [ ! -d ${1}/install/ ];then
    mkdir ${1}/install/
  fi;

  if [ "${1}" == "${CORE}" ] && [ -e "/etc/firewall.conf" ] && [ -e "/etc/netsentry-version" ];then
    ISDTS=1;
   else
    ISDTS=0;
  fi;

  if [ "`cat /proc/mounts | grep ${1}/install/tools`" ] || [ ${ISDTS} == 1 ];then
    echo "Utilities"
    rsync ${ROPT_FAT} -z --include=/install --include=/install/tools --exclude=/install/* --exclude=/* ${SERV}::base/ ${1}/
    RERR=$?
    echo
  fi;

  if [ ! -d ${1}/root ] && [ ${RERR} == 0 ];then
    if [ ${ISDTS} == 1 ];then
      echo "Filelist/Version"
      rsync ${ROPT} -R --include=/install/netsentry-version --include=/install/core/filelist --include=/install/core/core.filter \
            --include=/install/core/install.tbz --include=/install/core --exclude=/install/core/* --exclude=/install/update/* \
            rsync://${SERV}/base/install/* ${1}
      echo
      if [ -e ${1}/install/core/filelist ];then
        rsync -aHKOq --no-d --exclude=/* --out-format="%n" --files-from=${1}/install/core/filelist / ${1}
        tar --use-compress-program=bunzip2 -C ${1} -xf ${1}/install/core/install.tbz etc/ var/
      fi;
      if [ -e ${CORE}/install/netsentry-version ];then
        eval `cat ${CORE}/install/netsentry-version`
      fi;
     else
      echo "Core files"
      rsync ${ROPT} --exclude=/install/tools/* --exclude=/install/avirus/* --exclude=/install/update/* rsync://${SERV}/base/ ${1}
      RERR=$?
      echo
    fi;
   elif [ ${ISDTS} == 1 ] && [ -e ${CORE}/install/netsentry-version ];then
    eval `cat ${CORE}/install/netsentry-version`
  fi;

  if [ ${RERR} == 0 ];then
    echo "Distribution (Non Core)"
    rsync ${ROPT} --delete --exclude=/dev/* --exclude=/sys/* --exclude=/proc/* --exclude=/lost+found --include=/boot/grub/background.jpg \
               --exclude=/lib/modules/* --exclude=/boot/vmlinuz --exclude=/boot/System.map --exclude=/boot/initrd.img \
               --exclude=/boot/grub/* --exclude=/mnt/install/* --exclude=/etc/mtab --exclude=/etc/fstab --exclude=/install/avirus/* \
               --exclude=/mnt/update/*  --exclude=/install/update/* --exclude=/install/core/* \
               --exclude=/install/tools/* --exclude=/lib/firmware/* --exclude=/install/netsentry-version rsync://${SERV}/install/ ${1}/
    RERR=$?
    echo
   else
    return ${RERR}
  fi;

  if [ ${RERR} == 0 ];then
    DOVER=1;
    if [ ${ISDTS} == 1 ];then
      echo "Base Files (Local Copy [No Kernel])"
      rsync ${ROPT} -u --include=/install/core/core.filter --exclude=/install/core/* \
             --exclude=/lib/modules/* --exclude=/boot/vmlinuz --exclude=/boot/System.map --exclude=/lib/firmware/* \
             --exclude=/install/avirus/* --exclude=/install/update/* --exclude=/boot/initrd.img --exclude=/install/tools/* \
             rsync://${SERV}/base/ ${1}
      RERR=$?
      echo

      if [ "${2}" ];then
        KVER=${2}
       elif [ "${KERNEL}" ];then
        KVER=${KERNEL}
      fi;

      if [ ${RERR} == 0 ] && [ "${KVER}" ];then
        if [ ! -d /var/spool/rsync/kernuser ];then
          mkdir -p /var/spool/rsync/kernuser
        fi;
        echo "Kernel Files / Firmware (${KVER})"
        rsync ${ROPT} --delete rsync://${SERV}/kernuser/kernel-${KVER}-* /var/spool/rsync/kernuser/
        RERR=$?
        echo
        if [ ${RERR} == 0 ];then
          echo "Kernel/Modules (${KVER})"
          rsync ${ROPT} -u --include=/boot/[vS]*${2}-${KSUF} --include=/lib/modules/${2}-${KSUF} --exclude=/lib/modules/* --exclude=/boot/* \
                --filter=". ${1}/etc/rsyncd/kernel.filter" rsync://${SERV}/kernel/ /
          RERR=$?
          echo
        fi;
        if [ ${RERR} == 0 ];then
          echo "Install Kernel (Modules ${KVER})"
          rsync ${ROPT_LOC} -R --include=/lib --include=/lib/modules --include=/lib/modules/${2}-${KSUF} \
                --exclude=/lib/modules/*/modules.* --exclude=/lib/* --exclude=/lib/modules/* --exclude=/* / ${1}/
          echo "Install Kernel (Firmware ${KVER})"
          rsync ${ROPT_LOC} /var/spool/rsync/kernuser/kernel-${KVER}-${KSUF}/lib/firmware ${1}/lib/
          echo "Install Anti Virus / Updates"
          rsync ${ROPT_LOC} -u --delete --include=/update --include=/avirus --exclude=/avirus/clamav-* --exclude=/*/.* --exclude=/* /var/spool/ / ${1}/install/
          echo
        fi;
        for kmod in `ls ${1}/lib/modules`;do
          if [ ${kmod} != ${KVER}-${KSUF} ];then
            rm -rf ${1}/lib/modules/${kmod}
          fi;
        done;
      fi;
     else
      echo "Base Files (Local Repository Kernel)"
      rsync ${ROPT} -u --include=/install/core/kernel.tar.bz2 --include=/install/netsentry-version --include=/install/core \
             --exclude=/lib/modules/*/modules.* --exclude=/boot/initrd.img --include=/install/core/core.filter --exclude=/install/core/* \
             --exclude=/install/tools --exclude=/install/* rsync://${SERV}/base/ ${1}
      RERR=$?
      echo
    fi;
   else
    return ${RERR}
  fi;

  if [ ${RERR} == 0 ];then
    if [ ${RERR} == 0 ];then
      echo "Anti Virus On Repository"
      rsync ${ROPT} -u --delete rsync://${SERV}/avirus/ ${1}/install/avirus
      RERR=$?
      echo
    fi;
    if [ ${RERR} == 0 ];then
      echo "Update Folder"
      rsync ${ROPT} -u --delete rsync://${SERV}/programs/var/spool/update/ ${1}/install/update
      RERR=$?
      echo
    fi;
   else
    return ${RERR}
  fi;

  return ${RERR}
}

Local_Sync() {
  RERR=0
  if [ ! -d ${2}/install/ ];then
    mkdir ${2}/install/
  fi;
  if [ "`cat /proc/mounts | grep ${2}/install/tools`" ] || [ ${2} == ${CORE} ];then
    echo "Utilities"
    rsync ${ROPT_FAT} ${1}/install/tools ${2}/install/
    RERR=$?
    echo
  fi;
  if [ ${RERR} == 0 ];then
    echo "Distribution"
    rsync ${ROPT_LOC} --inplace --delete --exclude=/proc/* --exclude=/sys/* --exclude=/dev/* --exclude=/lost+found \
          --exclude=/lib/modules/*/modules.* --exclude=/boot/initrd.img --exclude=/install/tools/* \
          --include=/boot/grub/background.jpg --exclude=/boot/grub/* --exclude=/mnt/install/* \
          --exclude=/mnt/update/* --exclude=/etc/mtab ${1}/* ${2}
    RERR=$?
    echo
    if [ ${RERR} == 0 ];then
      for kmod in `ls -d ${2}/lib/modules/*`;do
        if [ ! -d ${kmod}/kernel ];then
          rm -rf ${kmod}
        fi;
      done;
    fi;
  fi;
  return ${RERR}
}

Clean_Init() {
  for vg in flash flashn flashm;do
    if [ -d /dev/${vg} ];then
      vgchange -a n ${vg} > /dev/null 2>&1
      if [ -d /dev/${vg} ];then
        for vdev in `ls /dev/${vg}`;do
          if [ -e /dev/${vg}/${vdev} ];then
            dmsetup remove /dev/${vg}/${vdev} > /dev/null 2>&1
          fi;
        done
      fi;
    fi;
    if [ ! -d /dev/${vg} ];then
      vgchange -a y ${vg} > /dev/null 2>&1
    fi;
  done;
  vgmknodes > /dev/null 2>&1
}

init_rd_drivers() {
  kernel=${3}

  for kdir in drivers drivers-ata drivers-scsi drivers-usb nfs drivers-net;do
    mkdir -p ${1}/lib/modules/${kernel}/${kdir}
  done;

  for atadrv in ata mmc/host memstick/host memstick/core mfd ;do
    if [ -d ${2}lib/modules/${kernel}/kernel/drivers/${atadrv} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/drivers/${atadrv}/* ${1}/lib/modules/${kernel}/drivers-ata
    fi;
  done;

  if [ -d ${2}lib/modules/${kernel}/kernel/drivers/usb/storage ];then
    cp -r ${2}lib/modules/${kernel}/kernel/drivers/usb/storage/* ${1}/lib/modules/${kernel}/drivers-usb
  fi;

  if [ -d ${2}lib/modules/${kernel}/kernel/drivers/net/ethernet ];then
    cp -r ${2}lib/modules/${kernel}/kernel/drivers/net/ethernet/* ${1}/lib/modules/${kernel}/drivers-net
    rm -rf ${1}/lib/modules/${kernel}/drivers-net/sfc*
    rm -rf ${1}/lib/modules/${kernel}/drivers-net/ti/tlan.ko.gz
    rm -rf ${1}/lib/modules/${kernel}/drivers-net/i825xx/znet.ko.gz
  fi;

  for kmod in drivers/net/mdio.ko.gz drivers/uio/uio.ko.gz drivers/net/mii.ko.gz drivers/net/sungem_phy.ko.gz \
              drivers/net/phy/libphy.ko.gz net/ipv6/ipv6.ko.gz net/unix/unix.ko.gz \
              net/packet/af_packet.ko.gz drivers/ptp drivers/pps/pps_core.ko.gz drivers/dca \
              net/ipv4/inet_lro.ko.gz drivers/misc/eeprom/eeprom_93cx6.ko.gz drivers/base/regmap/regmap-i2c.ko.gz \
              sound/ac97_bus.ko.gz;do
   if [ -f ${2}lib/modules/${kernel}/kernel/${kmod} ];then
     cp ${2}lib/modules/${kernel}/kernel/${kmod} ${1}/lib/modules/${kernel}/drivers
    elif [ -d ${2}lib/modules/${kernel}/kernel/${kmod} ];then
     cp -r ${2}lib/modules/${kernel}/kernel/${kmod} ${1}/lib/modules/${kernel}/drivers
   fi;
  done;

  for nonata in ata_generic.ko.gz pata_legacy.ko.gz ahci_platform.ko.gz pata_acpi.ko.gz libahci.ko.gz;do
    if [ -f ${1}/lib/modules/${kernel}/drivers-ata/${nonata} ];then
      mv ${1}/lib/modules/${kernel}/drivers-ata/${nonata} ${1}/lib/modules/${kernel}/drivers
    fi;
  done;

  for kmod in kernel/fs/fscache/fscache.ko.gz kernel/net/sunrpc/sunrpc.ko.gz kernel/fs/lockd/lockd.ko.gz \
              kernel/net/sunrpc/auth_gss/auth_rpcgss.ko.gz kernel/fs/nfs_common/nfs_acl.ko.gz \
              /kernel/fs/nfs/nfs.ko.gz;do
   if [ -f ${2}lib/modules/${kernel}/${kmod} ];then
     cp ${2}lib/modules/${kernel}/${kmod} ${1}/lib/modules/${kernel}/nfs
    elif [ -d ${2}lib/modules/${kernel}/${kmod} ];then
     cp -r ${2}lib/modules/${kernel}/${kmod} ${1}/lib/modules/${kernel}/nfs
   fi;
  done;

  for kmod in block/loop.ko.gz base/firmware_class.ko.gz pcmcia mmc/core \
           mmc/card misc/cb710 misc/tifm_core.ko.gz cdrom/cdrom.ko.gz ssb \
           usb/host md/ usb/wusbcore uwb usb/misc/ftdi-elan.ko.gz connector/cn.ko.gz \
           hid/hid.ko.gz hid/usbhid bcma/bcma.ko.gz;do
   if [ -f ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ];then
     cp ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ${1}/lib/modules/${kernel}/drivers
    elif [ -d ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ];then
     cp -r ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ${1}/lib/modules/${kernel}/drivers
   fi;
  done;

  for kmod in isofs/isofs.ko.gz nls/nls_iso8859-1.ko.gz ext3 ext4 jbd jbd2 squashfs;do
    if [ -f ${2}lib/modules/${kernel}/kernel/fs/${kmod} ];then
      cp ${2}lib/modules/${kernel}/kernel/fs/${kmod} ${1}/lib/modules/${kernel}/drivers
     elif [ -d ${2}lib/modules/${kernel}/kernel/fs/${kmod} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/fs/${kmod} ${1}/lib/modules/${kernel}/drivers
    fi
  done;

  for klib in zlib_deflate raid6 lzo libcrc32c.ko.gz crc16.ko.gz crc-t10dif.ko.gz \
	crc-itu-t.ko.gz crc7.ko.gz crc-ccitt.ko.gz;do
    if [ -f ${2}lib/modules/${kernel}/kernel/lib/${klib} ];then
      cp ${2}lib/modules/${kernel}/kernel/lib/${klib} ${1}/lib/modules/${kernel}/drivers
     elif [ -d ${2}lib/modules/${kernel}/kernel/lib/${klib} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/lib/${klib} ${1}/lib/modules/${kernel}/drivers
    fi;
  done;

  for scard in scsi_wait_scan scsi_mod scsi_tgt sd_mod sr_mod libsas \
            scsi_transport_iscsi scsi_transport_fc scsi_transport_sas \
            scsi_transport_spi device_handler cxgbi/libcxgbi megaraid/megaraid_mm \
            libiscsi libiscsi_tcp scsi_transport_iscsi fcoe osd libfc;do
    if [ -f ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard}.ko.gz ];then
      cp ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard}.ko.gz ${1}/lib/modules/${kernel}/drivers
     elif [ -d ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard} ${1}/lib/modules/${kernel}/drivers
    fi;
  done
  if [ -d ${2}lib/modules/${kernel}/kernel/crypto ];then
    cp -r ${2}lib/modules/${kernel}/kernel/crypto ${1}/lib/modules/${kernel}/
  fi;
}

initrd_init() {
  for tld in bin dev etc isofs lib proc sbin sys sysroot var;do
    if [ ! -d ${1}/${tld} ];then
      mkdir ${1}/${tld}
    fi;
  done

  if [ ! -d ${1}/var/lock/lvm ];then
    mkdir -p ${1}/var/lock/lvm
  fi;
  if [ ! -d ${1}/etc/lvm ];then
    mkdir ${1}/etc/lvm
  fi;
  for lvmdir in archive backup cache;do
    if [ ! -d ${1}/etc/lvm/${lvmdir} ];then
      mkdir ${1}/etc/lvm/${lvmdir}
    fi;
  done;

  (cp ${2}/etc/lvm/lvm.conf ${1}/etc/lvm/
  cp ${2}/usr/sbin/lvm.static ${1}/sbin/lvm
  if [ -x ${2}/sbin/modprobe.static ];then
    cp ${2}/sbin/modprobe.static ${1}/sbin/modprobe
   else
    cp ${2}/usr/bin/modprobe.static ${1}/sbin/modprobe
  fi
  if [ -x ${2}/bin/mount.static ];then
    cp ${2}/bin/mount.static ${1}/bin/mount
   else
    cp ${2}/sbin/mount.static ${1}/bin/mount
  fi;
  cp ${2}/sbin/mount.nfs.static ${1}/sbin/mount.nfs
  mkdir -p ${1}/usr/share/udhcpc/
  cp ${2}/usr/share/udhcpc/distrotech-nfs.script ${1}/usr/share/udhcpc/default.script
  ln -s /proc/mounts ${1}/etc/mtab
  ln -s /sbin/lvm ${1}/sbin/vgchange
  ln -s /sbin/lvm ${1}/sbin/vgscan
  ln -s /sbin/lvm ${1}/sbin/vgmknodes
  ln -s /linuxrc ${1}/sbin/init
  ln -s /sbin/mount.nfs ${1}/sbin/mount.nfs4
  if [ -e ${2}/boot/busybox.tgz ];then
    tar -C ${1} -xzf ${2}/boot/busybox.tgz
  fi;
  touch ${1}/etc/fstab) 2>/dev/null

  dst=${1}
  shift
  src=${1}
  shift
  while [ "${1}" ];do
    init_rd_drivers ${dst} ${src} ${1}
    shift
  done
}

init_rd_drivers_scsi() {
  cd ${2}lib/modules/${3}
  for ADAPTER in `lspci -nm |awk -F\" '$2 == "Class 0100" || $2 == "Class 0101" || $2 == "Class 0102" || $2 == "Class 0103" || $2 == "Class 0104" || $2 == "Class 0106" || $2 == "Class 0107" || $2 == "Class 0180" {printf "grep -E \"%s.*%s\" modules.pcimap\n",$4,$6}' |sh |awk '{print $1}'`${EXTRA_DEV};do 
    if [ "$ADAPTER" == "sym53c8xx" ];then
      ADAPTER="sym53c8xx_2/sym53c8xx";
    fi;
    if [ "$ADAPTER" == "aic79xx" ];then
      ADAPTER="aic7xxx/aic79xx";
    fi;
    if [ "$ADAPTER" == "megaraid_sas" ] || [ "$ADAPTER" == "megaraid_mbox" ];then
      ADAPTER="megaraid/${ADAPTER}";
    fi;
    if [ "$ADAPTER" == "cxgb4i" ] || [ "$ADAPTER" = "cxgb3i" ];then
      ADAPTER="cxgbi/${ADAPTER}/${ADAPTER}";
    fi;

    if [ -e ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER.ko.gz ];then
      cp ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER.ko.gz ${1}/lib/modules/${3}/drivers-scsi
     elif [ -d ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER ];then
      cp -r ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER/* ${1}/lib/modules/${3}/drivers-scsi
     elif [ -e ${2}lib/modules/${3}/kernel/drivers/message/fusion/$ADAPTER.ko.gz ];then
      cp -r ${2}lib/modules/${3}/kernel/drivers/message/fusion/* ${1}/lib/modules/${3}/drivers-scsi
     elif [ -e ${2}lib/modules/${3}/kernel/drivers/message/i2o/$ADAPTER.ko.gz ];then
      cp -r ${2}lib/modules/${3}/kernel/drivers/message/i2o/* ${1}/lib/modules/${3}/drivers-scsi
    fi;
  done
  cd ${CWD}
}

initrd_config() {
  ROOTDEV=`grub-probe -t fs_uuid ${2} 2>/dev/null`
  if [ ! "${ROOTDEV}" ] && [ -e /dev/lvm/root ];then
    ROOTDEV=`blkid -s UUID -o value /dev/lvm/root`
  fi;
  cat <<_EOF_
#!/bin/ash

echo "Distrotech Linux Starting"

/bin/mount -t devtmpfs none /dev
/bin/mount -t proc none /proc
/bin/mount -t sysfs none /sys

_EOF_

  for driver in `ls ${1}/lib/modules/${3}/drivers-scsi/ |cut -d. -f1`;do
    echo "modprobe ${driver}"
  done;

  for driver in `ls ${1}/lib/modules/${3}/drivers-ata/ |cut -d. -f1`;do
    echo "modprobe ${driver}"
  done;

  cat <<_EOF_

modprobe pata_acpi
modprobe ata_generic
modprobe uhci_hcd
modprobe ohci_hcd
modprobe ehci_hcd
_EOF_

  for driver in `ls ${1}/lib/modules/${3}/drivers-usb |cut -d. -f1`;do
    echo "modprobe ${driver}"
  done;

  cat <<_EOF_
modprobe sd_mod
modprobe scsi_wait_scan

modprobe loop
modprobe dm-mod
modprobe usbhid

_EOF_

  if [ "$USBSLEEP" ];then
    echo "sleep ${USBSLEEP}"
  fi;

#  /sbin/dmraid -c -sa -i > /dev/null 2>&1
#  if [ $? == 0 ];then
#    echo "/sbin/dmraid -ay -i"
#  fi;

  if [ -e /etc/mdadm.conf ];then
    cat <<_EOF_
/sbin/mdadm -Ebsc part > /etc/mdadm.conf
/sbin/mdadm -As
_EOF_
  fi;

  if [ "${LOOP_FILE}" ] && [ "${LOOP_DEV}" ];then
    cat << _EOF_
/bin/mount -n -o ro -t `blkid ${LOOP_DEV} -s TYPE -o value` -U `grub-probe -t fs_uuid -d ${LOOP_DEV}` /isofs
/bin/mount -t devtmpfs none /isofs/dev
/bin/mount -t proc none /isofs/proc
/bin/mount -t sysfs none /isofs/sys
/sbin/pivot_root /isofs /isofs/media
/sbin/fsck -TCAa
/bin/mount / -o remount,rw
/sbin/losetup /dev/loop0 ${LOOP_FILE}
umount /proc
umount /dev
umount /sys
/sbin/pivot_root /media /media/isofs

_EOF_
  fi;

  if [ -e /etc/initrd.local ];then
    echo
    cat /etc/initrd.local
    echo
  fi;

cat <<_EOF_
sleep 5
vgchange -a y --sysinit lvm
mount -t ramfs none /var/lock/lvm
vgmknodes
umount /var/lock/lvm
/bin/mount -o ro -t ext4 -U ${ROOTDEV} /sysroot
echo 0x0100 > /proc/sys/kernel/real-root-dev

/sbin/pivot_root /sysroot /sysroot/initrd

mount -t proc none /proc
mount -t sysfs none /sys
_EOF_
}

mkbootimg_cfg() {
  cat << EOF
#!/bin/ash

EOF

for driver in `ls ${1}/mnt/initrd/lib/modules/${2}/drivers-ata |cut -d. -f1`;do
  echo "modprobe ${driver}"
done;

  cat << EOF

modprobe pata_acpi
modprobe ata_generic
modprobe uhci_hcd
modprobe ohci_hcd
modprobe ehci_hcd
EOF

for driver in `ls ${1}/mnt/initrd/lib/modules/${2}/drivers-usb |cut -d. -f1`;do
  echo "modprobe ${driver}"
done;

  cat << EOF
modprobe sd_mod
modprobe sr_mod
modprobe cdrom
modprobe loop
modprobe dm-mod
modprobe usbhid

EOF

  if [ "${3}" == "dvd" ];then
    cat << EOF
sleep 5
/bin/mount -n -o ro -t iso9660 -L DISTROTECH_INSTALL /isofs
/sbin/losetup /dev/loop0 /isofs/flash.hdd

EOF
   elif [ "${3}" == "loop" ] && [ -e ${BASE}/flash.hdd ];then
    LBASE=`readlink -f ${BASE}`
    LROOT=`grub-probe -t fs_uuid ${LBASE}`
    LFLASH=`grub-mkrelpath ${BASE}/flash.hdd`

    if [ "${LROOT}" ] && [ ${LFLASH} ];then
    cat << EOF
sleep 5
/bin/mount -n -o ro -t ext4 -U ${LROOT} /isofs
/sbin/losetup /dev/loop0 /isofs${LFLASH}

EOF
    fi;
   elif [ "${3}" == "nfs" ];then
    for netint in `ls ${1}/mnt/initrd/lib/modules/${2}/drivers-net/*.ko.gz ${1}/mnt/initrd/lib/modules/${2}/drivers-net/*/*.ko.gz ${1}/mnt/initrd/lib/modules/${2}/drivers-net/*/*/*.ko.gz`;do
      echo modprobe `basename ${netint} |cut -d. -f1`;
    done
    cat << EOF
modprobe unix
modprobe ipv6
modprobe af_packet

sleep 5

/bin/ip link set dev eth0 down
/bin/ip link set dev eth0 name ethA
/sbin/udhcpc -i ethA -q
echo 0x0100 > /proc/sys/kernel/real-root-dev
/sbin/pivot_root /sysroot /sysroot/initrd

mount -t proc none /proc
mount -t sysfs none /sys
/initrd/sbin/mntetc
EOF
   elif [ "${3}" == "rootfs" ];then
    cat << EOF
sleep 10
vgchange -a y --sysinit
mount -t ramfs none /var/lock/lvm
vgmknodes
umount /var/lock/lvm
/bin/mount -n -o ro \${rootfs} /sysroot
echo 0x0100 > /proc/sys/kernel/real-root-dev

/sbin/pivot_root /sysroot /sysroot/initrd

mount -t proc none /proc
mount -t sysfs none /sys
/initrd/sbin/mntetc
EOF
   elif [ "${3}" == "squashfs" ];then
    cat << EOF
/bin/mount -n -o ro -L DTS_INSTALL /isofs
/sbin/losetup /dev/loop0 /isofs/distrotech/x86_64/install.img
/bin/mount -n -o ro /dev/loop0 /sysroot

echo 0x0100 > /proc/sys/kernel/real-root-dev

/sbin/pivot_root /sysroot /sysroot/initrd

mount -t proc none /proc
mount -t sysfs none /sys
/initrd/sbin/mntetc
EOF
   else
    cat << EOF
sleep 10
vgchange -a y --sysinit
mount -t ramfs none /var/lock/lvm
vgmknodes
umount /var/lock/lvm
/bin/mount -n -o ro -t ext4 -L INSTALL /sysroot
echo 0x0100 > /proc/sys/kernel/real-root-dev

/sbin/pivot_root /sysroot /sysroot/initrd

mount -t proc none /proc
mount -t sysfs none /sys
/initrd/sbin/mntetc
EOF
  fi;
}

mkbootimg() {
  if [ -d ${1}/lib/modules/${2}-${KSUF} ] && [ -e ${1}/boot/System.map ];then
    ${1}/sbin/depmod -a -F ${1}/boot/System.map -b ${1} ${2}-${KSUF}
  fi;

  ILOOP=`losetup -f`
  if [ ! "${ILOOP}" ] || [ ! -e "${ILOOP}" ];then
    return 255
  fi;

  (dd if=/dev/zero of=${1}/tmp/initrd bs=1M count=16
  losetup ${ILOOP} ${1}/tmp/initrd
  mkfs.ext2 -F -L initrd -i 1024 ${1}/tmp/initrd
  mount ${ILOOP} ${1}/mnt/initrd) > /dev/null 2>&1

  initrd_init ${1}/mnt/initrd ${1} ${2}-${KSUF}

  mkdir ${1}/mnt/initrd/etc/modprobe.d
  (cat << EOF
options loop max_part=63
options sg allow_dio=1
EOF
) > ${1}/mnt/initrd/etc/modprobe.d/modprobe.conf

  (cat << EOF
#!/bin/bash

mount -t devtmpfs none /dev
gunzip -c /install/core/etc.gz |dd of=/dev/ram5 > /dev/null 2>&1
mount -n -t ext4 /dev/ram5 /etc
umount /dev
EOF
) > ${1}/mnt/initrd/sbin/mntetc
  chmod 750 ${1}/mnt/initrd/sbin/mntetc

  (cat << EOF
#!/bin/ash

echo "Distrotech Linux Starting"

/bin/mount -t devtmpfs none /dev
/bin/mount -t proc none /proc
/bin/mount -t sysfs none /sys

for copt in \`cat /proc/cmdline\`;do
  if [ "\${copt#${KSUF}_opt=}" != "\${copt}" ];then
    ${KSUF}_opt=\${copt#${KSUF}_opt=}
  fi;
  if [ "\${copt#root=}" != "\${copt}" ];then
    rootfs=\${copt#root=}
    export rootfs	
  fi;
done

case \$${KSUF}_opt in
  dvd)exec /sbin/linuxrc.dvd;;
  loop)exec /sbin/linuxrc.loop;;
  nfs)exec /sbin/linuxrc.nfs;;
  install)exec /sbin/linuxrc.install;;
  squashfs)exec /sbin/linuxrc.squashfs;;
esac

exec /sbin/linuxrc.rootfs

EOF
) > ${1}/mnt/initrd/linuxrc
  chmod 750 ${1}/mnt/initrd/linuxrc

  mkbootimg_cfg ${1} ${2}-${KSUF} > ${1}/mnt/initrd/sbin/linuxrc.install
  mkbootimg_cfg ${1} ${2}-${KSUF} dvd > ${1}/mnt/initrd/sbin/linuxrc.dvd
  mkbootimg_cfg ${1} ${2}-${KSUF} loop > ${1}/mnt/initrd/sbin/linuxrc.loop
  mkbootimg_cfg ${1} ${2}-${KSUF} nfs > ${1}/mnt/initrd/sbin/linuxrc.nfs
  mkbootimg_cfg ${1} ${2}-${KSUF} rootfs > ${1}/mnt/initrd/sbin/linuxrc.rootfs
  mkbootimg_cfg ${1} ${2}-${KSUF} squashfs > ${1}/mnt/initrd/sbin/linuxrc.squashfs

  chmod 750 ${1}/mnt/initrd/sbin/linuxrc*
  ${1}/sbin/depmod -b ${1}/mnt/initrd -aeF ${1}/boot/System.map ${2}-${KSUF}

  sleep 2
  umount ${1}/mnt/initrd
  while [ -d ${1}/mnt/initrd/lost+found ];do
    sleep 2
    umount ${1}/mnt/initrd > /dev/null 2>&1
  done;

  rm ${1}/boot/initrd* > /dev/null 2>&1

  e2fsck -Dfy ${ILOOP} > /dev/null 2>&1
  (dd if=${1}/tmp/initrd |gzip -c9 > ${1}/boot/initrd.img) > /dev/null 2>&1

  sleep 2
  losetup -d ${ILOOP}
  rm ${1}/tmp/initrd
  rm -rf ${1}/mnt/initrd/*
}

mk_initrd() {
  if [ -d /dev/loop ];then
    rm -rf /dev/loop
  fi;

  if [ -h /boot/boot ];then
    rm /boot/boot
  fi;

  if [ ! -d ${2}/lib/modules/${KERNEL}-${KSUF} ];then
    echo No Kernel Directory
    return 255
  fi;

  if [ "$EXTRA_DEV" ];then
    EXTRA_DEV=" ${EXTRA_DEV}"
  fi;

  LOOP=`losetup -f`
  if [ ! "${LOOP}" ] || [ ! -e "${LOOP}" ];then
    return 255
  fi;

  TINIT=/tmp/initrd_$$${RANDOM}
  while [ -e ${TINIT} ];do
    TINIT=/tmp/initrd_$$${RANDOM}
  done;

  (dd if=/dev/zero of=${TINIT} bs=1M count=16
  mkfs.ext2 -F -L initrd -i 1024 ${TINIT}
  losetup ${LOOP} ${TINIT}
  mount ${LOOP} ${1}) >/dev/null 2>&1

  initrd_init ${1} ${2} ${KERNEL}-${KSUF}
  cp -r ${2}/etc/modprobe.d ${1}/etc/

  ${2}/sbin/depmod -a -F ${2}/boot/System.map-${KERNEL}-${KSUF} -b ${2} ${KERNEL}-${KSUF}
  init_rd_drivers_scsi ${1} ${2} ${KERNEL}-${KSUF}
  ${2}/sbin/depmod -a -e -F ${2}/boot/System.map-${KERNEL}-${KSUF} -b ${1} ${KERNEL}-${KSUF}

  initrd_config ${1} ${2} ${KERNEL}-${KSUF} > ${1}/linuxrc
  chmod 750 ${1}/linuxrc

  umount ${1}
  losetup -d ${LOOP}

  (e2fsck -Dfy ${TINIT}
  dd if=${TINIT} bs=1k |gzip -c9 > ${2}/boot/initrd-${KERNEL}-${KSUF}
  rm ${TINIT} ${2}/boot/initrd-netsentry ${2}/boot/initrd.img ${2}/boot/vmlinuz-${KSUF} ${2}/boot/vmlinuz.* ${2}/boot/System.map ${2}/boot/vmlinuz ${2}/boot/System.map > /dev/null 2>&1

  ln -s vmlinuz-${KERNEL}-${KSUF} ${2}/boot/vmlinuz
  ln -s System.map-${KERNEL}-${KSUF} ${2}/boot/System.map
  ln -s initrd-${KERNEL}-${KSUF} ${2}/boot/initrd.img) > /dev/null 2>&1

  return 0
}

Grub_Local() {
  GPARTI=`grub-probe -t partmap ${BASE}`
  GFSMODI=`grub-probe -t fs ${BASE}`
  GDRIVEI=`grub-probe -t drive ${BASE}`
  GUUIDI=`grub-probe -t fs_uuid ${BASE}`

  if [ "${1}" ] && [ -e "${1}" ];then
    GUUIDT=`grub-probe -t fs_uuid ${1}`
    if [ "${GUUIDT}" == "${GUUIDI}" ];then
      GPARTT=${GPARTI}
      GFSMODT=${GFSMODI}
      GDRIVET=${GDRIVEI}
     else
      GPARTT=`grub-probe -t partmap ${1}`
      GFSMODT=`grub-probe -t fs ${1}`
      GDRIVET=`grub-probe -t drive ${1}`
     fi;
  fi;

  cat << EOF
menuentry "Distrotech Repository (${BASE}/flash.hdd)" --class distrotech --class os {
	insmod part_${GPARTI}
	insmod ${GFSMODI}
	insmod loopback
	set root='${GDRIVEI}'
        search --no-floppy --fs-uuid --set=root ${GUUIDI}
        loopback install ${BASE}/flash.hdd
        insmod lvm
	set root='(flash-install)'
        configfile  /boot/grub/grub.cfg
}
EOF

  if [ "${1}" ] && [ -e "${1}" ];then
    cat << EOF

menuentry "Distrotech Test Install (${1})" --class distrotech --class os {
	insmod part_${GPARTT}
	insmod ${GFSMODT}
	insmod loopback
	set root='${GDRIVET}'
        search --no-floppy --fs-uuid --set=root ${GUUIDT}
        loopback test ${1}
        insmod lvm
	set root='(lvm-root)'
        configfile  /boot/grub/grub.cfg
}
EOF
  fi;
}

Post_Update() {
  #Update netsentry-version
  if [ "${1}" ] && [ ${KERNEL} != ${1} ];then
    KERNEL=$1
    (cat <<__EOF__
BRAND="$BRAND";
VERSION="$VERSION";
KERNEL="$KERNEL";
HN_ADDR="$HN_ADDR";
DOM_ADDR="$DOM_ADDR";
BT="\$BRAND V\$VERSION Linux V\$KERNEL Install";
KERNOPTS="$KERNOPTS";
EXTRA_DEV="$EXTRA_DEV";
USBSLEEP="$USBSLEEP";
RSERV="$RSERV";
LOOP_FILE="${LOOP_FILE}";
LOOP_DEV="${LOOP_DEV}";
__EOF__
) > /etc/netsentry-version
  fi;

  /sbin/ldconfig

  /usr/bin/rebuild-info
#  pear channel-update pear.php.net;pear upgrade-all

  #Run any SQL / LDAP scripts on no error
  if [ -d /var/spool/update ];then
    for I in /var/spool/update/*.sql ; do
      if test $I -nt /etc/asterisk/astschema.psql.gz ;then
        cat $I |psql -U asterisk -h 127.0.0.1
      fi
    done;
    touch /etc/asterisk/astschema.psql.gz

    for I in /var/spool/update/*.esql ; do
      if test $I -nt /var/spool/pgsql/exchange.db ;then
        cat $I |psql -U exchange -h 127.0.0.1
      fi
    done;
    touch /var/spool/pgsql/exchange.db

    if [ /var/spool/update/remote.keys -nt /root/.ssh/authorized_keys ] || [ ! -e /root/.ssh/authorized_keys ] || [ ! -s /root/.ssh/authorized_keys ];then
      (/usr/bin/ldapmodify -U admin -Y PLAIN -y /etc/ldap.secret -cf /var/spool/update/remote.keys
      /usr/bin/gensshauth > /root/.ssh/authorized_keys.tmp
      if [ ! -d /root/.ssh ];then
        mkdir /root/.ssh
        chmod 700 /root/.ssh
      fi;
      if [ -s /root/.ssh/authorized_keys.tmp ];then
        cp /root/.ssh/authorized_keys.tmp /root/.ssh/authorized_keys
      fi) > /dev/null 2>&1
    fi;
  fi;

  if [ -d /etc/modprobe.d ];then
    rm /etc/modprobe.* >/dev/null 2>&1
  fi
  rm /etc/udev/rules.d/[145x]* >/dev/null 2>&1

  #Reinstall Grub/Update initrd if needed
  if [ ! -e /boot/grub/core.img ] || [ /usr/lib/grub/i386-pc/ -nt /boot/grub/core.img ];then
    /usr/sbin/mkgrub
   elif [ ! -e /boot/initrd-${KERNEL}-${KSUF} ] || [ /boot/vmlinuz-${KERNEL}-${KSUF} -nt /boot/initrd-${KERNEL}-${KSUF} ];then
    mk_initrd /mnt/initrd /
    if [ $? == 0 ];then
      /usr/sbin/rdev /boot/vmlinuz /dev/ram0
      grub-mkconfig  > /boot/grub/grub.cfg
    fi;
  fi

  if [ -e  /usr/sbin/mkfstab ] && [ /usr/sbin/mkfstab -nt /etc/fstab ];then
    /usr/sbin/mkfstab > /etc/fstab
  fi

  /usr/sbin/genconf
  /usr/sbin/asterisk -rx "dialplan reload"
}

Local_Upgrade() {
  if [ ! -d ${MNTP}/mnt/update ];then
      mkdir -p ${MNTP}/mnt/update
  fi;

  if [ ! -d ${MNTP}/mnt/update/lost+found ];then
    mount /dev/flash/upgrade ${MNTP}/mnt/update
    if [ $? != "0" ];then
      Umount_Flash
      echo "Not available"
      return 255
    fi;
  fi;

  RERR=0;
  KROPT="--include=/boot/[vS]*${1}-* --include=/lib/modules/${1}-* --exclude=/lib/modules/* --exclude=/boot/*"
  for updata in "vbox /mnt/dev /" "share /var/spool/samba/share /var/spool/samba/share/" "programs /var/spool/rsync/programs /" \
                "manuals /var/spool/rsync/webman /var/spool/apache/htdocs/" "asterisk-10 /var/spool/rsync/asterisk-10 /" \
                "avirus /var/spool/avirus /var/spool/avirus" "kernel / /";do
    if [ ${RERR}  == 0 ];then
      Sync_Local ${updata}
      RERR=$?
      echo
    fi;
  done
  if [ ${RERR}  == 0 ];then
    KUSER=/var/spool/rsync/kernuser/kernel-${1}
    if [ ! -d ${MNTP}/mnt/update/${KUSER}-${KSUF} ] && [ -d ${KUSER}-${KSUF} ];then
      echo "Local Kernel User Files"
      rsync ${ROPT_LOC} ${KUSER}-${KSUF} ${MNTP}/mnt/update/${KUSER}-${KSUF}
      echo;
    fi;
    Sync_Local kernuser ${KUSER}-${KSUF}/ /
    RERR=$?
    echo
  fi;
  if [ ${RERR}  == 0 ];then
    echo updates
    rsync ${ROPT_LOC} -u --delay-updates ${MNTP}/install/update/ /var/spool/update
    RERR=$?
  fi;

  if [ -e /etc/netsentry-version ];then
    eval `cat /etc/netsentry-version`
  fi;

  Post_Update ${1}
  return ${RERR}
}

Repo_Mount() {
  if [ -e /dev/flash/install ];then
    vgrename flash flashm
    vgmknodes
    if [ -e /dev/flashm/install ];then
      e2fsck -C 0 -p /dev/flashm/install
      if (( $? >= 4 ));then
        echo "Filesystem Error"
        return 255
      fi;
      if [ ! -d ${CORE} ];then
        mkdir -p ${CORE}
      fi;
      mount /dev/flashm/install ${CORE}
      if [ $? != 0 ];then
        echo "Mount Error"
        return 255
      fi;
      if [ -e /media/DISTROTECH ];then
        umount /media/DISTROTECH
      fi;
      DUFS=`findfs LABEL=DISTROTECH`
      if [ "${DUFS}" ];then
        dosfsck -a ${DUFS}
        mount ${DUFS} ${CORE}/install/tools
      fi;
    fi;
  fi;

  Load_Flash
  return $?
}

Remote_Upgrade() {
  if [ -d ${CORE}/install/core ];then
    Remote_Sync ${CORE} ${1}
    RES=$?
    if [ ${RES} == 0 ];then
      Tar_Kernel ${CORE} ${1}
      Make_Bootetc ${CORE}
     else
       return ${RES}
    fi;
  fi;

  if [ "`grep -E "^(\/dev\/flash\/)|(\/dev\/mapper\/flash\-)" /proc/mounts`" ];then
    Sync_Remote ${1}
    return $?
  fi;

  if [ -e /dev/flash/install ] || [ -e ${BASE}/flash.hdd ];then
    if [ -e ${BASE}/flash.hdd ] && [ -e /dev/flash/install ];then
      Repo_Mount
      RES=$?
      if [ ${RES} == 0 ] && [ -d ${CORE}/install/core ];then
        Remote_Sync ${CORE} ${1}
        RES=$?
        if [ ${RES} == 0 ];then
          Tar_Kernel ${CORE} ${1}
          Make_Bootetc ${CORE}
        fi;
      fi;
     elif [ -e ${BASE}/flash.hdd ];then
      Load_Flash
      RES=$?
     else
      Mount_Flash
      RES=$?
    fi;

    if [ ${RES} == 0 ];then
      Update_Flash ${1}
      RES=$?
      if [ ${RES} == 0 ];then
        Local_Upgrade ${KERNEL};
        RES=$?
      fi;
    fi;
    return ${RES}
   else
    Sync_Remote ${1}
    return $?
  fi;
}

Show_Help() {
cat << EOF

${0} is a utility for controlling the Distrotech (www.distrotech.co.za) Linux Distribution Installer

You will require a 2G,4G Or bigger than 8G Flash disk in addition to up-to 7G hard drive space available
for local copy/repository.

This program requires dosutils lvm2 grub2 parted dmsetup losetup bc dd and rsync and will run on Ubuntu
or other capable distributions please note the seed command should only be run on Distrotech systems.

Please note commands working with local media will require access to remote server (${SERV}) to create the
media if it does not exist.

Local Repository: ${BASE}
Local Copy: ${CORE}
Mount Point: ${MNTP}

Partitions automounted on ${AMNT}/<NAME> will be unmounted as needed.

There are various options available


        iso <IMAGE FILE>
                Create a boot-able/installable/rescue ISO image (<IMAGE FILE>) that can be burnt onto a DVD.
                the file flash.hdd on the DVD can also be written to a flash disk of sutible size using dd or
                similar utility.

        copy <DEV>
                Copy the local repository to a device specified by /dev/<DEV> it must be removable.

        merge
                Merge the local repository onto the VG flash LV install [flash is renamed flashn for this operation].

        sync
                Synchronise the local repository with local copy [if seeded] or with local inserted flash
                [see merge above it will be named flashm] or it will be pulled from the master server (${SERV}).
                This will also create the initial repository.if a local copy exists and a flash is inserted
                the inserted flash will be synchronised.

        grub
                Reinstall grub on inserted flash device or local repository.

        mkflash <DEV>
                This like copy above will initialise the device /dev/<DEV> however it will not copy it from the
                local repository but use a local copy [seed] or pull it from the master server (${SERV})
                this will allow creating a device without using a local repository.

        seed
                Using the local repository or a inserted flash disk create or update a local copy.
                See update bellow to use remote source.

        update [<KERNEL> [<SERVER>]]
                Synchronise the local copy with remote server without the need for a local repository or installer.
                See seed above to usse local as opposed to remote source.

        help|<INVALID>
                This help page shown when a invalid option is used perhaps mounting/unmounting a mounted/unmounted
		volume.

	[mount|umount]
		When called as mount or umount the repository will be mounted or unmounted when no option is specified
		it will decide the correct course of action.
        rsync
                mount the partitions and run rsync in a way suitiable for use as a master server.
        upgrade
                upgrade from local repository or inserted installer.

        initrd <DEST> <SRC> <KERNEL>
                copy modules and required files from source to destination for the kernels specified this currently only
                copys the files the creation mounting modprobing is not done.

        grub2 [<TEST LOOPBACK>]
                outputs menu entries for grub2 suitiable for use in /boot/grub/custom.cfg.
                the loopback file if specified will boot this test installation.

EOF
}

Tar_Kernel() {
  if [ ! -e ${1}/install/netsentry-version ];then
    echo "No config file";
    return 255
  fi;

  eval `cat ${1}/install/netsentry-version`
  NOUP=0;

  if [ -e ${1}/install/.version ];then
    VERSION=`cat ${1}/install/.version`
  fi;

  if [ "${2}" ];then
    if [ "${2}" != "${KERNEL}" ];then
      KERNEL=${2}
      rm ${1}/install/core/kernel.tar.bz2
     else
      NOUP=1;
    fi;
    (cat << EOF
BRAND="${BRAND}";
VERSION="${VERSION}";
KERNEL="${KERNEL}";
HN_ADDR="${HN_ADDR}";
DOM_ADDR="${DOM_ADDR}";
BT="\${BRAND} V\${VERSION} Linux V\${KERNEL} Install";
USBSLEEP="${USBSLEEP}";
EOF
) > ${1}/install/netsentry-version
   else
    NOUP=1;
    VERSION=`cat ${1}/install/.version`;
    sed -e "s/\(VERSION=\"\).*/\1${VERSION}\";/" ${1}/install/netsentry-version > /tmp/netsentry-version
    if [ "`diff /tmp/netsentry-version ${1}/install/netsentry-version`" ];then
      mv /tmp/netsentry-version ${1}/install/netsentry-version
     else
      rm /tmp/netsentry-version
    fi;
  fi;

  for kern in `ls ${1}/lib/modules/`;do
    if [ $kern != ${KERNEL}-${KSUF} ];then
      rm -rf ${1}/lib/modules/$kern
    fi;
  done

  if [ ! -e ${1}/boot/vmlinuz ] || [ ! -e ${1}/boot/System.map ];then
    NOUP=0;
  fi;

  if [ ${NOUP} == 1 ] && [ -e ${1}/install/core/kernel.tar.bz2 ];then
    if [ ! -e ${1}/boot/initrd.img ] || [ ! -e ${1}/lib/modules/${KERNEL}/modules.dep ];then
      mkbootimg ${1}/ ${KERNEL}
    fi;
    return 0;
  fi;

  if [ -d /var/spool/rsync/kernuser/kernel-${KERNEL}-${KSUF} ] && [ -d /lib/modules/${KERNEL}-${KSUF} ];then
    cd /var/spool/rsync/kernuser/kernel-${KERNEL}-${KSUF}
    tar --use-compress-program=bzip2 -cf ${1}/install/core/kernel.tar.bz2 *
    cd ${CWD}
    echo "Kernel Modules"
    if [ -d ${1}/lib/modules ];then
      rm -rf $1}/lib/modules/*
    fi;
    rsync ${ROPT_LOC} --inplace --delete --exclude=modules.* /lib/modules/${KERNEL}-${KSUF} ${1}/lib/modules
    echo
    if [ -d /var/spool/rsync/kernuser/kernel-${KERNEL}-${KSUF}/lib/firmware ];then
      echo "Kernel Firmware"
      rsync ${ROPT_LOC} --inplace --delete /var/spool/rsync/kernuser/kernel-${KERNEL}-${KSUF}/lib/firmware/ ${1}/lib/firmware
      echo
    fi;
    echo "Kernel"
    rsync ${ROPT_LOC} --inplace /boot/vmlinuz-${KERNEL}-${KSUF} ${1}/boot/vmlinuz
    echo
    echo "Kernel System Map"
    rsync ${ROPT_LOC} --inplace /boot/System.map-${KERNEL}-${KSUF} ${1}/boot/System.map
    echo
    mkbootimg ${1}/ ${KERNEL}
   else
    echo "No kernel folder";
    return 1
  fi;
}

Make_Grubcfg_Head(){
  for inmod in part_msdos part_gpt ext2 ntfs vbe vga video_bochs video_cirrus jpeg gfxterm gettext;do
    echo "insmod $inmod";
  done

(cat << EOF

if test -e (cd)/flash.hdd ;then
  loopback floop (cd)/flash.hdd
fi

insmod lvm

if loadfont (flash-install)/usr/share/grub/unicode.pf2 ; then
  set gfxmode=800x600
  terminal_output gfxterm
  if background_image (flash-install)/boot/grub/background.jpg; then
    set color_normal=white/black
    set color_highlight=black/white
  else
    set menu_color_normal=white/black
    set menu_color_highlight=black/light-gray
    if background_color 44,0,30; then
      clear
    fi
  fi
else
  set menu_color_normal=white/black
  set menu_color_highlight=black/light-gray
  if background_color 44,0,30; then
    clear
  fi
fi

set timeout=5

EOF
)
}

Make_Grubcfg(){
  Make_Grubcfg_Head;

  for bdisk in hd0 hd1 hd2 hd3;do
    for mpart in 1 2 3 4;do
(cat <<  EOF
if test -e ($bdisk,msdos$mpart)/bootmgr ;then
  menuentry "$bdisk $mpart (Windows)" {
	set root=(${bdisk},msdos${mpart})
        chainloader +1
  }
fi
EOF
)
      for bpath in /boot/ /;do
(cat <<  EOF
if test -e ($bdisk,msdos$mpart)${bpath}grub/grub.cfg ;then
  menuentry "$bdisk $mpart (GRUB $bpath)" {
	set root=(${bdisk},msdos${mpart})
        configfile ${bpath}grub/grub.cfg
  }
fi

EOF
)
      done;
    done;
  done;

  (cat <<  EOF
if test -e (lvm-root)/boot/grub/grub.cfg ;then
  menuentry "LVM (lvm-root GRUB)" {
	set root=(lvm-root)
        configfile /boot/grub/grub.cfg
  }
fi

EOF
)

  (cat <<  EOF
if test -e (flash-install)/boot/initrd.img ;then
  if test -e (cd)/flash.hdd ;then
    menuentry "Install" {
  	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet ${KSUF}_opt=dvd
        initrd /boot/initrd.img
    }
    menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro single ${KSUF}_opt=dvd
        initrd /boot/initrd.img
    }
    menuentry "Install (DHCP/NFS)" {
  	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet ${KSUF}_opt=nfs
        initrd /boot/initrd.img
    }
   else
    if test -d (install,msdos1)/putty ;then
      menuentry "Install" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet ${KSUF}_opt=loop
        initrd /boot/initrd.img
      }
      menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro single ${KSUF}_opt=loop
        initrd /boot/initrd.img
      }
      menuentry "Install (DHCP/NFS)" {
	set root=(flash-install)
	linux /boot/vmlinuz root=/dev/flash/install ro quiet ${KSUF}_opt=nfs
	initrd /boot/initrd.img
      }
     else
      menuentry "Install" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet ${KSUF}_opt=install
        initrd /boot/initrd.img
      }
      menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro single ${KSUF}_opt=install
        initrd /boot/initrd.img
      }
      menuentry "Install (DHCP/NFS)" {
	set root=(flash-install)
	linux /boot/vmlinuz root=/dev/flash/install ro quiet ${KSUF}_opt=nfs
	initrd /boot/initrd.img
      }
    fi;
  fi;
  menuentry "Memory test (memtest86+)" {
	set root=(flash-install)
        linux16 /boot/memtest.bin
  }
  menuentry "Memory test (memtest86+, serial console 115200)" {
        set root='(flash-install)'
        linux16 /boot/memtest.bin console=ttyS0,115200n8
  }
fi
if test -e (hd0,msdos3)/ubuntu/desktop-i386.iso ;then
  menuentry "Ubuntu Desktop i386" {
	set iso_path=/ubuntu/desktop-i386.iso
	export iso_path
	search --set --file \$iso_path
	loopback ubudloop \$iso_path
	set root=(ubudloop)
	configfile /boot/grub/loopback.cfg
  }
fi;
if test -e (hd0,msdos3)/ubuntu/server-i386.iso ;then
  menuentry "Ubuntu Server i386" {
	set iso_path=/ubuntu/server-i386.iso
	export iso_path
	search --set --file \$iso_path
	loopback ubusloop \$iso_path
	set root=(ubusloop)
	configfile /boot/grub/loopback.cfg
  }
fi;
if test -e (hd0,msdos3)/boot/syslinux/ldlinux.sys ;then
  menuentry "Ultimate Boot CD" {
	set root=(hd0,msdos3)
	chainloader +1
  }
fi;
if test -d (hd0,msdos3)/dtsrescue ;then
  menuentry "Tiny Core (Distrotech Desktop)" {
	set root=(hd0,msdos3)
	linux /dtsrescue/tinycore/vmlinuz loglevel=3 protect tce=LABEL=BOOTISO
	initrd /dtsrescue/tinycore/core.gz
  }
  menuentry "Tiny Core (Distrotech Rescue)" {
	set root=(hd0,msdos3)
	linux /dtsrescue/tinycore/vmlinuz loglevel=3 tce=LABEL=BOOTISO/dtsrescue/tce
	initrd /dtsrescue/tinycore/core.gz
  }
fi;
EOF
)
}

Sync_Remote() {
  RERR=0

  ast_repo="asterisk-10";
  ast_ver="10";

  if [ -d ${CORE}/install/core ];then
    echo "vbox /"
    rsync ${UROPT_LOC} --filter=". /etc/rsyncd/vbox.filter" ${CORE}/ /
    echo;echo
    ldconfig /dev/null 2>&1
    echo "share /var/spool/samba/share/"
    rsync ${UROPT_LOC} --filter=". /etc/rsyncd/share.filter" ${CORE}/install/tools/ /var/spool/samba/share
    echo;echo
    echo "avirus /var/spool/avirus"
    rsync ${UROPT_LOC} --delete --filter=". /etc/rsyncd/avirus.filter" ${CORE}/install/avirus/ /var/spool/avirus
    echo;echo
    echo "update /var/spool/update"
    rsync ${UROPT_LOC} ${CORE}/install/update/* /var/spool/update
    echo;echo
   else
    for rdatain in "vbox /"  "share /var/spool/samba/share/" "avirus /var/spool/avirus";do
      if [ ${RERR} == 0 ];then
        echo $rdatain
        rsync ${UROPT} rsync://${SERV}/$rdatain
        RERR=$?;
        echo;echo
        ldconfig > /dev/null 2>&1
      fi;
    done;
  fi;

  for rdatain in "programs /" "manuals /var/spool/apache/htdocs/" "${ast_repo} /";do
    if [ ${RERR} == 0 ];then
      echo $rdatain
      rsync ${UROPT} rsync://${SERV}/$rdatain
      RERR=$?;
      echo;echo
      ldconfig > /dev/null 2>&1
    fi;
  done;

  #Sync Asterisk Modules
  if [ ${RERR} == 0 ];then
    rsync ${UROPT} -R --delete --exclude=chan_lcr.so rsync://${SERV}/${ast_repo}/usr/lib/asterisk/modules-${ast_ver} /
    RERR=$?;
  fi;

  #Update kernel
  if [ "${1}" ] && [ ${RERR} == 0 ];then
    echo "Kernel Update"
    rsync ${UROPT} --include=/boot/[vS]*${1}-* --include=/lib/modules/${1}-* \
          --exclude=/lib/modules/* --exclude=/boot/* rsync://${SERV}/kernel/ /
    RERR=$?

    if [ -d /var/spool/rsync/kernuser/kernel-${1}-${KSUF} ] && [ -d ${CORE}/install/core ] && [ ${RERR} == 0 ];then
      echo kernuser/kernel-${1}-${KSUF}/* /
      rsync ${UROPT_LOC} /var/spool/rsync/kernuser/kernel-${1}-${KSUF}/* /
     elif [ ${RERR} == 0 ];then
      echo kernuser/kernel-${1}-${KSUF}/* /
      rsync ${UROPT} rsync://${SERV}/kernuser/kernel-${1}-${KSUF}/* /
      RERR=$?;
    fi;
    ldconfig > /dev/null 2>&1
  fi;

  if [ ${RERR} == 0 ];then
    Post_Update ${1}
  fi;

  return ${RERR}
}

Sync_Local(){
  if [ "${2}" == "/mnt/dev" ];then
     SPATH=${MNTP}
   elif [ "${2}" == "/var/spool/avirus" ];then
     SPATH=${MNTP}/install/avirus
   elif [ "${2}" == "/var/spool/samba/share" ];then
     SPATH=${MNTP}/install/tools
   else
     SPATH=${MNTP}/mnt/update${2}
  fi;

  EROPT="${ROPT_LOC} -u --delay-updates"
  if [ "${1}" == "kernel" ] || [ "${1}" == "kernuser" ];then
    EROPT="${EROPT} ${KROPT}"
  fi;

  echo ${1}
  if [ -e ${MNTP}/etc/rsyncd/${1}.filter ];then
    /usr/bin/rsync ${EROPT} --filter=". ${MNTP}/etc/rsyncd/${1}.filter" ${SPATH}/ ${3}
   else
    /usr/bin/rsync ${EROPT} ${SPATH}/ ${3}
  fi;
  RES=$?

  if [ "${1}" == "vbox" ] || [ "${1}" == "programs" ];then
    ldconfig > /dev/null 2>&1
  fi;

  return ${RES}
}

pxeboot_config() {
  echo "Sync PXE Boot (Kernel/Initrd)"
  rm /tftpboot/Distrotech/initrd* /tftpboot/Distrotech/vmlinuz*
  rsync -avP ${CORE}/boot/vmlinuz ${CORE}/boot/initrd.img /tftpboot/Distrotech/
  rsync -avP ${CORE}/boot/memtest.bin /tftpboot/Distrotech/memtest
  (cat << EOF
LABEL 1
        MENU LABEL Distrotech Network Install
        KERNEL Distrotech/vmlinuz
        APPEND initrd=Distrotech/initrd.img ${KSUF}_opt=nfs
        TEXT HELP
        Install Distrotech Over The Network
        ENDTEXT
LABEL 2
        MENU LABEL Distrotech Network Install (Rescue Mode)
        KERNEL Distrotech/vmlinuz
        APPEND initrd=Distrotech/initrd.img S ${KSUF}_opt=nfs
        TEXT HELP
        Distrotech Network Rescue Mode
        ENDTEXT
LABEL 3
	MENU LABEL Memory Test
	KERNEL Distrotech/memtest
        TEXT HELP
        Memory Test Utility
        ENDTEXT
EOF
) > /tftpboot/Distrotech/Distrotech.menu
}

if [ "`id -u`" != "0" ];then
  Show_Help
  echo "You are seeing this page as you are trying to run it non root."
  exit 255
fi;

for checkexe in /sbin/dosfsck /sbin/dmsetup /sbin/lvm /bin/dd /sbin/losetup /bin/rsync /sbin/parted /bin/grub-mkrescue /sbin/mkdosfs /bin/xorriso /bin/bc;do
  if [ ! -x ${checkexe} ] && [ ! -x /usr${checkexe} ];then
    echo "Missing ${checkexe}"
    exit -1
   fi;
done;

for mypart in INSTALL UPGRADE DISTROTECH DTSUTIL BOOTISO;do
  if [ -e ${AMNT}/${mypart} ];then
    umount ${AMNT}/${mypart}
  fi;
done

if [ ! -d ${MNTP} ];then
  mkdir -p ${MNTP}
fi;

if [ "${1}" == "iso" ];then
  if [ -f ${BASE}/flash.hdd ] && [ "${2}" ];then
    if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
      Umount_Flash
    fi;
    Clean_Init
    sleep 2
    Load_Flash clean
    sleep 2
    Umount_Flash
    grub-mkrescue -o ${2} --volid DISTROTECH_INSTALL ${BASE}
   else
    echo "ISO File not supplied Or missing local repository"
  fi;
 elif [ "${1}" == "copy" ];then
  Clean_Init
  Make_Flash flashn ${2}
  vgchange -a y flashn > /dev/null 2>&1
  if [ $? == 0 ] && [ -e /dev/flashn/install ];then
    Load_Flash
    sleep 2
    e2fsck -C 0 -p /dev/flashn/install
    if (( $? >= 4 ));then
      echo "Filesystem Error"
      exit 255
    fi;
    mount /dev/flashn/install ${MNTP}/mnt/install
    if [ $? != 0 ];then
      echo "Mount Failed"
      exit 255
    fi;
    if [ ! -d ${MNTP}/mnt/install/install/tools ];then
      mkdir -p ${MNTP}/mnt/install/install/tools
    fi;
    DUFS=`findfs LABEL=DISTROTECH`
    dosfsck -a ${DUFS}
    mount ${DUFS} ${MNTP}/mnt/install/install/tools
    Local_Sync ${MNTP} ${MNTP}/mnt/install
    umount ${MNTP}/mnt/install/install/tools
    sleep 2
    umount ${MNTP}/mnt/install
    if [ -e /dev/flashn/upgrade ];then
      Sync_Update ${MNTP} /dev/flashn/upgrade
    fi;
    Umount_Flash
    sleep 2
    (vgchange -a n flashn
    dmsetup remove /dev/flashn/install
    dmsetup remove /dev/flashn/upgrade) > /dev/null 2>&1
    vgrename flashn flash
    vgchange -a y flash > /dev/null 2>&1
    sleep 2
    Load_Flash
    Check_Grub
    sleep 2
    Umount_Flash
  fi;
 elif [ "${1}" == "merge" ];then
  if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
    Umount_Flash
  fi;
  Clean_Init
  (vgchange -a n flash
  dmsetup remove /dev/flash/install
  dmsetup remove /dev/flash/upgrade) > /dev/null 2>&1
  vgrename flash flashn
  Load_Flash
  vgchange -a y flashn > /dev/null 2>&1
  sleep 2
  if [ -e  /dev/flashn/install ];then
    e2fsck -C 0 -p /dev/flashn/install
    if (( $? >= 4 ));then
      echo "Filesystem Error"
      exit 255
    fi;
    mount /dev/flashn/install ${MNTP}/mnt/install
    if [ ! -d ${MNTP}/mnt/install/install/tools ];then
      mkdir -p ${MNTP}/mnt/install/install/tools
    fi;
    DUFS=`findfs LABEL=DISTROTECH`
    dosfsck -a ${DUFS}
    mount ${DUFS} ${MNTP}/mnt/install/install/tools
    Local_Sync ${MNTP} ${MNTP}/mnt/install
    umount ${MNTP}/mnt/install/install/tools
    sleep 2
    umount ${MNTP}/mnt/install
    if [ -e /dev/flashn/upgrade ];then
      Sync_Update ${MNTP} /dev/flashn/upgrade
    fi;
    Umount_Flash
    sleep 2
    (vgchange -a n flashn
    dmsetup remove /dev/flashn/install
    dmsetup remove /dev/flashn/upgrade
    vgrename flashn flash) > /dev/null  2>&1
    vgchange -a y flash > /dev/null 2>&1
    sleep 2
    Load_Flash
    Check_Grub
  fi;
  sleep 2
  Umount_Flash
 elif [ "${1}" == "sync" ];then
  if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
    Umount_Flash
  fi;
  Clean_Init
  if [ -e /dev/loop-flash ] || [ -e /dev/loop-util ] || [ ! -f ${BASE}/flash.hdd ];then
    echo "Cant sync repository is it loaded / non existant"
    exit 255
  fi;
  Repo_Mount
  if [ $? == 0 ];then
    Update_Flash
  fi;
  Umount_Flash
 elif [ "${1}" == "grub" ];then
  Clean_Init
  Load_Flash
  if [ -e ${MNTP}/boot/grub/core.img ];then
    rm ${MNTP}/boot/grub/core.img
  fi;
  if [ -e ${MNTP}/boot/initrd.img ];then
    rm ${MNTP}/boot/initrd.img
  fi;
  Check_Grub
  Make_Bootetc ${MNTP}
  Umount_Flash
 elif [ "${1}" == "mkflash" ];then
  Clean_Init
  Make_Flash flash ${2}
  if [ $? == 0 ];then
    Load_Flash
  fi;
 elif [ "${1}" == "seed" ] || [ "${1}" == "update" ];then
  if [ ! -d ${CORE} ];then
    mkdir ${CORE}
  fi;
  for newdir in dev proc sys;do
    if [ ! -d ${CORE}/${newdir} ];then
      mkdir ${CORE}/${newdir}
    fi;
  done;
  if [ "${1}" == "seed" ];then
    if [ -e /dev/loop-flash ] || [ -d ${MNTP}/lost+found ];then
      Umount_Flash
    fi;
    Clean_Init
    Load_Flash std 0
    if [ $? == 0 ];then
      Local_Sync ${MNTP} ${CORE}
    fi;
    Umount_Flash
    pxeboot_config
   else
    if [ "${3}" ];then
      SERV=${3}
    fi;
    if [ ! -d /var/spool/rsync/programs ];then
      Remote_Sync ${CORE} $2
      RET=$?
     else
      echo "Sync Anti Virus / Upgrade"
      rsync ${ROPT_LOC} -u --delete --include=/update --include=/avirus --exclude=/avirus/clamav-* --exclude=/*/.* --exclude=/* /var/spool/ / ${CORE}/install/
      RET=$?
    fi;
    Tar_Kernel ${CORE} ${2}
    Make_Bootetc ${CORE}
    pxeboot_config
    exit ${RET}
  fi
 elif [ "${1}" == "rsync" ];then
    Clean_Init
    Load_Flash std 0
    vgchange -a y flash > /dev/null 2>&1

    if [ -e /dev/flash/upgrade ] && [ ! -e ${MNTP}/var/run/rsyncd.pid ];then
      if [ ! -d ${MNTP}/mnt/update ];then
        mkdir -p ${MNTP}/mnt/update
      fi;
      mount /dev/flash/upgrade ${MNTP}/mnt/update -o ro
      if [ -d ${MNTP}/mnt/update/${CORE} ];then
        mount --bind ${MNTP} ${MNTP}/mnt/update/${CORE}
        mount --bind ${MNTP}/install/tools ${MNTP}/mnt/update/${CORE}/install/tools
        mount -t ramfs none ${MNTP}/var/run
        chroot ${MNTP} rsync --daemon --config /etc/rsyncd-update.conf
       else
        umount ${MNTP}/mnt/update
      fi;
    fi;
 elif [ "${1}" == "upgrade" ];then
  if [ ! -e "/etc/firewall.conf" ] || [ ! -e "/etc/netsentry-version" ];then
    echo "This does not look like a valid server to upgrade"
    exit 255
  fi;

  if [ ! "`pidof rsync`" ];then
    if [ -e /dev/loop-flash ] || [ -e /dev/loop-util ] || [ -d ${MNTP}/lost+found ];then
      Umount_Flash
      if [ -e /dev/loop-flash ] || [ -e /dev/loop-util ] || [ -d ${MNTP}/lost+found ];then
        echo "Error Media not unmounted !!!"
        exit 255
      fi;
    fi;
    Clean_Init
  fi;

  eval `cat /etc/netsentry-version`

  if [ "${2}" ] && [ "${KERNEL}" != "${2}" ];then
    UPKERN=${2}
   else
    UPKERN=${KERNEL}
  fi;

  if [ -d /var/spool/rsync/programs ] && [ -d ${CORE}/install/core ];then
    echo "Sync Anti Virus / Upgrade"
    rsync ${ROPT_LOC} -u --delete --include=/update --include=/avirus --exclude=/avirus/clamav-* --exclude=/*/.* --exclude=/* /var/spool/ / ${CORE}/install/
    Tar_Kernel ${CORE} ${UPKERN}
    Make_Bootetc ${CORE}
    if [ -f ${BASE}/flash.hdd ];then
      Load_Flash
      RES=$?
      if [ ${RES} == 0 ];then
        Update_Flash
        RES=$?
      fi;
    fi;
   elif [ -d /var/spool/rsync/programs ];then
    echo "Local copy not seeded ??"
    exit 255;
   elif [ "`pidof rsync`" ];then
    SERV=127.0.0.1
    Sync_Remote ${UPKERN}
    exit $?
   else
    if [ "${3}" ];then
      SERV=${3}
     elif [ "${RSERV}" ];then
      SERV=${RSERV}
    fi;

    rsync -az --contimeout=20 rsync://${SERV}/updates/ / > /dev/null 2>&1
    RES=$?
    if [ ${RES} != 0 ] && [ "${SERV}" != "127.0.0.1" ];then
      SERV=127.0.0.1
      rsync -az --contimeout=20 rsync://${SERV}/updates/ / > /dev/null 2>&1
      RES=$?
    fi;
    if [ ${RES} != 0 ] && [ -e /dev/flash/upgrade ];then
      Mount_Flash
      RES=$?
      if [ ${RES} ];then
        Local_Upgrade ${KERNEL}
        RES=$?
      fi;
     elif [ ${RES} != 0 ];then
      Load_Flash std 0
      Local_Upgrade ${KERNEL}
      RES=$?
     else
      Remote_Upgrade ${UPKERN}
      RES=$?
    fi;
  fi;

  Umount_Flash
  if [ -d ${CORE}/install/core ];then
    pxeboot_config
  fi;
  exit ${RES}
 elif [ "${1}" == "initrd" ];then
  if [ ! "${2}" ] || [ ! "${3}" ];then
    Show_Help
    exit
  fi;
  shift

  if [ -e ${2}/etc/netsentry-version ];then
    eval `cat ${2}/etc/netsentry-version`
   elif [ -e ${2}/install/netsentry-version ];then
    eval `cat ${2}/install/netsentry-version`
   else
    echo "No Config File"
    exit -1
  fi;

  mk_initrd ${1} ${2}
 elif [ "${1}" == "grub2" ];then
  Grub_Local ${2}
 elif [ "${1}" == "cleansync" ];then
  Clean_Init
  Load_Flash
  if [ -e /dev/flash/upgrade ];then
    Sync_Update ${MNTP} /dev/flash/upgrade clean
  fi;
  Umount_Flash
 elif [ "${1}" == "mount" ] && [ ! -d ${MNTP}/lost+found ];then
  Clean_Init
  Load_Flash
 elif [ "${1}" == "" ] && [ ! -d ${MNTP}/lost+found ];then
  Clean_Init
  Load_Flash
 elif [ "${1}" == "umount" ] && [ -d ${MNTP}/lost+found ];then
  Umount_Flash
 elif [ "${1}" == "" ] && [ -d ${MNTP}/lost+found ];then
  Umount_Flash
 else
  Show_Help
fi;
