#!/bin/bash

#    Copyright (C) 2002  <Gregory Hinton Nietsky>
#    Copyright (C) 2005  <ZA Telecomunications>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


if [ ! -e /etc/openssl/server.signed.pem ];then
  exit;
fi;

#export OMNINAMES_LOGDIR=/var/log

TZ=`ls -l /etc/localtime |awk -F/ '{printf "%s/%s\n",$7,$8}'`
export TZ

if [ "$1" ];then
  export PGDATA=$1
 else
  export PGDATA=/var/spool/pgsql
fi;

Create_HBA() {
  (cat <<__EOF__
host    exchange        exchange        127.0.0.1       255.255.255.255 md5
host    cubit           cubit           127.0.0.1       255.255.255.255 md5
host    asterisk        asterisk        127.0.0.1       255.255.255.255 md5
host    horde           horde           127.0.0.1       255.255.255.255 md5
host    radius          radius          127.0.0.1       255.255.255.255 md5
host    phpgw           phpgw           127.0.0.1       255.255.255.255 md5
host    all             pgsql           127.0.0.1       255.255.255.255 md5
hostssl asterisk        asterisk        0.0.0.0         0.0.0.0         md5
hostssl horde           horde           0.0.0.0         0.0.0.0         md5
hostssl radius          radius          0.0.0.0         0.0.0.0         md5
local   all             pgsql                                           md5
local   asterisk        asterisk                                        md5
__EOF__
if [ -e /etc/asterisk/pgsql.access ];then
  for accessip in `cat /etc/asterisk/pgsql.access`;do
    cat <<__EOF__
hostssl    exchange        exchange        $accessip   255.255.255.255 md5
hostssl    cubit           cubit           $accessip   255.255.255.255 md5
hostssl    asterisk        asterisk        $accessip   255.255.255.255 md5
hostssl    horde           horde           $accessip   255.255.255.255 md5
hostssl    radius          radius          $accessip   255.255.255.255 md5
hostssl    phpgw           phpgw           $accessip   255.255.255.255 md5
hostssl    all             pgsql           $accessip   255.255.255.255 md5
__EOF__
  done;
fi;
if [ -e /etc/asterisk/pgsql.local ];then
  cat /etc/asterisk/pgsql.local
fi;
) > "$PGDATA/pg_hba.conf"
}

TIME=`date +%s`
ONHOST=`/usr/bin/hostname`

#if [ ! -e "$OMNINAMES_LOGDIR/omninames-$ONHOST.log" ];then
#  rm "$OMNINAMES_LOGDIR/omninames-$ONHOST.bak" > /dev/null 2>&1
#  /usr/bin/omniNames -start > /dev/null 2>&1 &
# else
#  /usr/bin/omniNames > /dev/null 2>&1 &
#fi;

if [ -d $PGDATA ];then
  if [ ! -e $PGDATA/server.crt ] || [ ! -e $PGDATA/server.key ] || [ "`diff /etc/openssl/server.signed.pem $PGDATA/server.crt`" ] || [ "`diff /etc/openssl/serverkey.pem $PGDATA/server.key`" ];then
    cp /etc/openssl/server.signed.pem $PGDATA/server.crt
    cp /etc/openssl/serverkey.pem $PGDATA/server.key
    chown pgsql $PGDATA/server.crt $PGDATA/server.key
    chmod 400 $PGDATA/server.crt $PGDATA/server.key
  fi;
  if [ ! "`openssl verify -CApath /etc/ipsec.d/certs $PGDATA/server.crt |grep OK`" ];then
    exit;
  fi;

  su pgsql -c "/usr/bin/pg_ctl status" >/dev/null 2>&1
  if [ $? == 0 ];then
    su pgsql -c "/usr/bin/pg_ctl -m immediate stop" > /dev/null 2>&1
  fi;

  (ps ax |grep "python Server.pyc" |awk '{print "kill -9 "$1}'  |sh)>/dev/null 2>&1
  NEWCFG=0
 else
  mkdir $PGDATA
  chown pgsql.pgsql $PGDATA

  su pgsql -c /usr/bin/initdb > /dev/null 2>&1

  rm /tmp/.s.PGSQL* > /dev/null 2>&1

  cp /etc/openssl/server.signed.pem $PGDATA/server.crt
  cp /etc/openssl/serverkey.pem $PGDATA/server.key
  chown pgsql $PGDATA/server.crt $PGDATA/server.key
  chmod 400 $PGDATA/server.crt $PGDATA/server.key

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA start" > /dev/null 2>&1
  sleep 2

  (cat <<__EOF__
CREATE USER exchange WITH ENCRYPTED PASSWORD 'exchange';
CREATE USER asterisk WITH ENCRYPTED PASSWORD 'asterisk';
CREATE USER phpgw WITH ENCRYPTED PASSWORD 'phpgw';
CREATE USER cubit WITH ENCRYPTED PASSWORD 'cubit';
CREATE USER horde WITH ENCRYPTED PASSWORD 'horde';
CREATE DATABASE exchange WITH OWNER = exchange;
CREATE DATABASE cubit WITH OWNER = cubit;
CREATE DATABASE asterisk WITH OWNER = asterisk;
CREATE DATABASE phpgw WITH OWNER = phpgw;
CREATE USER radius WITH ENCRYPTED PASSWORD 'radius';
CREATE DATABASE radius WITH OWNER = radius;
CREATE DATABASE horde WITH OWNER = horde;
ALTER USER pgsql WITH PASSWORD 'pgadmin';
__EOF__
) |/usr/bin/psql -U pgsql -f - template1> /dev/null 2>&1

  sed -e "s/#listen_addresses.*/listen_addresses = '*'/" -e "s/#ssl.*/ssl= on/" "$PGDATA/postgresql.conf" > /tmp/pg.cnf
  cp /tmp/pg.cnf "$PGDATA/postgresql.conf"
  rm /tmp/pg.cnf

  (cat <<__EOF__
host    exchange        exchange        127.0.0.1       255.255.255.255 trust
host    template1       exchange        127.0.0.1       255.255.255.255 trust
host    cubit           cubit           127.0.0.1       255.255.255.255 trust
host    asterisk        asterisk        127.0.0.1       255.255.255.255 trust
host    horde           horde           127.0.0.1       255.255.255.255 trust
host    radius          radius          127.0.0.1       255.255.255.255 trust
host    phpgw           phpgw           127.0.0.1       255.255.255.255 trust
host    all             pgsql           127.0.0.1       255.255.255.255 trust
local   all             pgsql                                           trust
__EOF__
  ) > "$PGDATA/pg_hba.conf"

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1

  echo "127.0.0.1:5432:*:pgsql:pgadmin" > /root/.pgpass
  echo "127.0.0.1:5432:*:exchange:exchange" >> /root/.pgpass
  echo "127.0.0.1:5432:*:asterisk:asterisk" >> /root/.pgpass
  echo "127.0.0.1:5432:*:horde:horde" >> /root/.pgpass
  echo "127.0.0.1:5432:*:radius:radius" >> /root/.pgpass
  echo "127.0.0.1:5432:*:phpgw:phpgw" >> /root/.pgpass
  chmod 600 /root/.pgpass
  chown root.root /root/.pgpass

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA stop" > /dev/null 2>&1
  rm /tmp/.s.PGSQL.5432* > /dev/null 2>&1
  NEWCFG=1
fi;

Create_HBA;
su pgsql -c "/usr/bin/pg_ctl -D $PGDATA start" > /dev/null 2>&1

if [ ! -e /var/spool/pgsql/asterisk.db ];then
  sleep 2
  (cat <<__EOF__
host    asterisk        asterisk        127.0.0.1       255.255.255.255 trust
local   asterisk        asterisk                                        trust
local   all             pgsql                                           trust
__EOF__
) > "$PGDATA/pg_hba.conf"

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1

  if [ ! "`grep asterisk /root/.pgpass`" ];then
    echo "127.0.0.1:5432:*:asterisk:asterisk" >> /root/.pgpass
  fi;

  if [ -e /etc/asterisk/astschema.psql.gz ];then
    zcat /etc/asterisk/astschema.psql.gz |psql -U pgsql -f - template1 > /dev/null 2>&1
    touch /var/spool/pgsql/asterisk.db
  fi;

  if [ -e /etc/sogo.sql ];then
    cat /etc/sogo.sql |psql -U pgsql -d exchange -f - template1 > /dev/null 2>&1
    touch /var/spool/pgsql/exchange.db
  fi;

  Create_HBA
  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1
  sleep 2
fi;

if [ ! -e /var/spool/pgsql/radius.db ];then
  sleep 2
  (cat <<__EOF__
host    radius          radius          127.0.0.1       255.255.255.255 trust
local   radius          radius                                          trust
local   all             pgsql                                           trust
__EOF__
) > "$PGDATA/pg_hba.conf"

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1

  if [ ! "`grep radius /root/.pgpass`" ];then
    echo "127.0.0.1:5432:*:radius:radius" >> /root/.pgpass
  fi;

  if [ -e /etc/raddb/db_postgresql.sql.gz ];then
    zcat /etc/raddb/db_postgresql.sql.gz |psql -U pgsql -f - template1 > /dev/null 2>&1
    touch /var/spool/pgsql/radius.db
  fi;

  Create_HBA
  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1
  sleep 2
fi;


if [ ! -e /var/spool/pgsql/phpgw.db ];then
  sleep 2
  (cat <<__EOF__
host    asterisk        phpgw           127.0.0.1       255.255.255.255 trust
local   asterisk        phpgw                                           trust
local   all             pgsql                                           trust
__EOF__
) > "$PGDATA/pg_hba.conf"

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1

  (cat <<__EOF__
CREATE USER phpgw WITH ENCRYPTED PASSWORD 'phpgw';
CREATE DATABASE phpgw WITH OWNER = phpgw;
__EOF__
) | psql -U pgsql -f - template1

if [ ! "`grep phpgw /root/.pgpass`" ];then
  echo "127.0.0.1:5432:*:phpgw:phpgw" >> /root/.pgpass
fi;

  touch /var/spool/pgsql/phpgw.db
  Create_HBA
  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA reload" > /dev/null 2>&1
  sleep 2;
fi;

if [ "`pidof asterisk`" ] && [ -e "/root/.odbc.ini" ];then
  asterisk -rx "odbc connect Asterisk";
fi

if [ "${NEWCFG}" == "1" ];then
  sed -e "s/^\(max_connections =\) [0-9]\+\(.*\)/\1 512\2/" -e "s/^\(shared_buffers =\) [0-9]\+\(.*\)/\1 18\2/" \
      -e "s/^#\(escape_string_warning\).*/\1 = off/" ${INST_BASE}/var/spool/pgsql/postgresql.conf > /tmp/postgresql.conf
  if [ -s /tmp/postgresql.conf ];then
    mv /tmp/postgresql.conf ${INST_BASE}/var/spool/pgsql/postgresql.conf
   else
    rm /tmp/postgresql.conf
  fi;
fi;
