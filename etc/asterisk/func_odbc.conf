;
; func_odbc.conf
;
; Each context is a separately defined function.  By convention, all
; functions are entirely uppercase, so the defined contexts should also
; be all-uppercase, but there is nothing that enforces this.  All functions
; are case-sensitive, however.
;
; For substitution, you have ${ARG1}, ${ARG2} ... ${ARGn}
; for the arguments to each SQL statement.
;
; In addition, for write statements, you have ${VAL1}, ${VAL2} ... ${VALn}
; parsed, just like arguments, for the values.  In addition, if you want the
; whole value, never mind the parsing, you can get that with ${VALUE}.
;
;
; If you have data which may potentially contain single ticks, you may wish
; to use the dialplan function SQL_ESC() to escape the data prior to its
; inclusion in the SQL statement.


; ODBC_SQL - Allow an SQL statement to be built entirely in the dialplan
[RTDB]
dsn=Asterisk
readsql=SELECT value FROM astdb WHERE family='${ARG1}' AND key='${ARG2}'
writesql=UPDATE astdb SET value='${VAL1}' WHERE family='${ARG1}' AND key='${ARG2}'
insertsql=INSERT INTO astdb (family,key,value) VALUES ('${ARG1}','${ARG2}','${VAL1}')

[SETUP]
dsn=Asterisk
readsql=SELECT CASE WHEN (value != '') THEN value ELSE '${ARG2}' END FROM astdb WHERE family='Setup' AND key='${ARG1}' UNION ALL SELECT '${ARG2}' WHERE NOT EXISTS (SELECT * FROM astdb WHERE family='Setup' AND key='${ARG1}');

[FEATDB]
dsn=Asterisk
readsql=SELECT ${ARG2} FROM features WHERE exten='${ARG1}'
writesql=UPDATE features SET ${ARG2}='${VAL1}' WHERE exten='${ARG1}'

[QFEATDB]
dsn=Asterisk
readsql=SELECT ${ARG2} FROM qfeatures WHERE queue='${ARG1}'
writesql=UPDATE qfeatures SET ${ARG2}='${VAL1}' WHERE exten='${ARG1}'

[IBDB]
dsn=Asterisk
readsql=SELECT ${ARG2} FROM interbranch WHERE prefix='${ARG1}'
writesql=UPDATE interbranch SET ${ARG2}='${VAL1}' WHERE prefix='${ARG1}'

[DELRTDB]
dsn=Asterisk
writesql=DELETE FROM astdb WHERE family='${ARG1}' AND key='${ARG2}'

[GETZAP]
dsn=Asterisk
readsql=SELECT exten FROM features WHERE zapline=split_part(split_part('${ARG1}','/',2),'-',1)

[QUEUE]
dsn=Asterisk
readsql=SELECT ${ARG1} FROM queue_members WHERE queue_name='${ARG2}' AND interface='${ARG3}'
writesql=UPDATE queue_members SET ${ARG1} = '${VAL1}' WHERE queue_name='${ARG2}' AND interface='${ARG3}'
insertsql=INSERT INTO queue_members (queue_name,interface,penalty,defpenalty,membername) VALUES ('${ARG2}','${ARG3}','${VAL1}','${VAL1}','${ARG4}')

[AGENTON]
dsn=Asterisk
writesql=UPDATE queue_members SET penalty=defpenalty WHERE interface='${ARG1}'

[AGENTOFF]
dsn=Asterisk
writesql=UPDATE queue_members SET penalty='-1' WHERE interface='${ARG1}'

[SQL]
dsn=Asterisk
readsql=SELECT ${ARG1} FROM ${ARG2} WHERE ${ARG3}='${ARG4}'
writesql=UPDATE ${ARG2} SET ${ARG1}='${VAL1}' WHERE ${ARG3}='${ARG4}'

[TIME]
dsn=Asterisk
readsql=SELECT CASE WHEN (holidaytime(now(),'${ARG1}') IS NOT NULL) THEN holidaytime(now(),'${ARG1}') ELSE officehours(now(),'${ARG1}') END;

; ODBC_ANTIGF - A blacklist.
;[ANTIGF]
;dsn=mysql1
;read=SELECT COUNT(*) FROM exgirlfriends WHERE callerid='${SQL_ESC(${ARG1})}'

; ODBC_PRESENCE - Retrieve and update presence
;[PRESENCE]
;dsn=mysql1
;read=SELECT location FROM presence WHERE id='${SQL_ESC(${ARG1})}'
;write=UPDATE presence SET location='${SQL_ESC(${VAL1})}' WHERE id='${SQL_ESC(${ARG1})}'
;prefix=OFFICE		; Changes this function from ODBC_PRESENCE to OFFICE_PRESENCE
;escapecommas=no	; Normally, commas within a field are escaped such that each
			; field may be separated into individual variables with ARRAY.
			; This option turns that behavior off [default=yes].

[CGRP]
dsn=Asterisk
readsql=SELECT CASE WHEN (them.callgroup = me.callgroup) THEN 'alert-group' ELSE 'alert-internal' END from users as me left outer join users as them on (me.name = '${ARG1}' and them.name = '${ARG2}') where them.name is not null

[EML]
dsn=Asterisk
readsql=SELECT name FROM users WHERE email ~ '^${ARG1}\@';

[SITECODE]
dsn=Asterisk
readsql=SELECT sitecode FROM exchanges LEFT OUTER JOIN astdb AS area ON (area.key='AreaCode' AND family='Setup') LEFT OUTER JOIN astdb AS epre ON (epre.key='ExCode' AND epre.family='Setup') WHERE areacode=area.value AND prefix=epre.value;


[CALLDIST]
dsn=Asterisk
readsql=SELECT fn_calldist('${ARG1}','${ARG2}');

[LOGCOUNT]
dsn=Asterisk
readsql=SELECT count(uniqueid)+1 FROM calllog where uniqueid = '${ARG1}'

[LOG]
dsn=Asterisk
writesql=INSERT INTO calllog (uniqueid,callleg,dstchannel,exten) VALUES ('${ARG1}',${ARG2},'${ARG3}','${VAL1}')
insertsql=INSERT INTO calllog (uniqueid,callleg,exten) VALUES ('${ARG1}',${ARG2},'${VAL1}')

[CLICK]
dsn=Asterisk
writesql=INSERT INTO clickcall (uniqueid,clickid) VALUES ('${ARG1}','${VAL1}')

[GSMUP]
dsn=Asterisk
writesql=UPDATE gsmchannels SET inuse='f',outofservice=now()+'3 seconds' WHERE channel='${ARG1}' AND router='${ARG2}';

[GSMOK]
dsn=Asterisk
writesql=UPDATE gsmchannels SET inuse='f',faultcount=0,calltime=calltime-${VAL1} WHERE channel='${ARG1}' AND router='${ARG2}';

[GSMFTO]
dsn=Asterisk
writesql=UPDATE gsmchannels SET inuse='f',outofservice = now() + (interval '1 second' * 5 ^faultcount)  WHERE channel=${ARG1} AND router='${ARG2}'

[GSMFAULT]
dsn=Asterisk
writesql=UPDATE gsmchannels SET inuse='f',faultcount=faultcount+${VAL1}  WHERE channel=${ARG1} AND router='${ARG2}' AND faultcount < maxfaultcount


[PWAUTH]
dsn=Asterisk
readsql=SELECT CASE WHEN (substr(password,1,4) = '${ARG2}' AND password != name AND password != secret) THEN 3 ELSE CASE WHEN ((substr(secret,1,4) = '${ARG2}' AND name != secret) OR substr(password,1,4) = '${ARG2}') THEN 2 ELSE  CASE WHEN (substr(secret,1,4) = '${ARG2}' AND name = secret) THEN 1 ELSE 0 END END END FROM users WHERE name = '${ARG1}';

[GETPIN]
dsn=Asterisk
readsql=SELECT exten FROM features WHERE roampass='${ARG1}' AND roampass != exten;

[GETUCNT]
dsn=Asterisk
readsql=SELECT count(id) FROM features WHERE ${ARG1}='${ARG2}' AND ${ARG1} != exten

[FWDNUM]
dsn=Asterisk
readsql=SELECT prefix||substr('${ARG1}',strip+1) FROM trunkmap WHERE '${ARG1}' ~ match ORDER BY length(prefix) LIMIT 1;

[CLIMAP]
dsn=Asterisk
readsql=SELECT prefix||substr('${ARG1}',strip+1) FROM climap WHERE '${ARG1}' ~ match ORDER BY length(prefix) LIMIT 1;

[KAMAILIO]
dsn=Asterisk
readsql=SELECT 'SIP/'||username||'@'||substr(socket,5) from location where username='${ARG1}' AND expires > now();

[CCDIAL]
dsn=Asterisk
readsql=SELECT number from contact left outer join lead on (contact.lead = lead.id) WHERE contact.id=${ARG1}
writesql=UPDATE contact SET uniqueid='${VAL1}' WHERE id=${ARG1}

[CCCHAN]
dsn=Asterisk
writesql=UPDATE agent set channel='${VAL1}' from contact where contact.agent = agent.id and contact.id=${ARG1}

[CCDCHAN]
dsn=Asterisk
writesql=UPDATE agent set channel='${VAL1}' where exten='${ARG1}'

[CCDSTCHAN]
dsn=Asterisk
writesql=UPDATE agent set dstchannel='${VAL1}' where exten='${ARG1}'

[CCAGENT]
dsn=Asterisk
readsql=SELECT agent.exten from contact left outer join agent on (agent.id=contact.agent) where contact.id=${ARG1}

[USERDDI]
dsn=Asterisk
readsql=SELECT name from users left outer join cc_callerid on (users.uniqueid=userid) where cc_callerid.callerid='${ARG1}'

[PURSE]
dsn=Asterisk
readsql=SELECT CASE WHEN (features.purse IS NOT NULL AND features.purse != '') THEN CASE WHEN (ammount IS NOT NULL) THEN sum(cost/1000) < (CAST(features.purse AS real)*100 + ammount) ELSE sum(cost/1000) < CAST(features.purse AS real)*100 END ELSE CAST('t' AS boolean) END FROM cdr LEFT OUTER JOIN trunkcost USING (uniqueid) LEFT OUTER JOIN features ON (exten=accountcode) LEFT OUTER JOIN purse_update ON (purse_update.name=accountcode) WHERE disposition='ANSWERED' AND calldate > date_trunc('month',now()) AND accountcode='${ARG1}' GROUP BY features.purse,ammount;

[CLIALTC]
dsn=Asterisk
readsql=SELECT exten FROM features WHERE altc='${ARG1}'

[DDIFWD]
dsn=Asterisk
readsql=SELECT CASE WHEN (ddifwd IS NOT NULL) THEN ddifwd ELSE '${ARG1}' END FROM cc_callerid WHERE callerid='${ARG1}'

[PINLEN]
dsn=Asterisk
readsql=SELECT max(length(roampass)) FROM features;

[H323NEIGH]
dsn=Asterisk
readsql=SELECT name FROM users WHERE h323neighbor AND ipaddr='${ARG1}'

[INTERSITE]
dsn=Asterisk
readsql=SELECT dest,destpre||CASE WHEN (deststrip > 0) THEN substr('${ARG2}',1,deststrip) ELSE '${ARG2}' END from intersite left outer join companysites USING (companyid) where source ='${ARG1}' AND '${ARG2}' ~ destmatch;
