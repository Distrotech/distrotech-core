#!/bin/bash

#    Copyright (C) 2002  <Gregory Hinton Nietsky>
#    Copyright (C) 2005  <ZA Telecomunications>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


if [ ! -e /etc/openssl/server.signed.pem ];then
  exit;
fi;

TZ=`ls -l /etc/localtime |awk -F/ '{printf "%s/%s\n",$7,$8}'`
export TZ

if [ ! -e /etc/pgpool/pgpool.conf ];then
  PGPORT=5432;
 else
  PGPORT=5433;
fi;
PGDATA=/var/spool/pgsql

export PGDATA PGPORT

Create_HBA() {
  (cat <<__EOF__
host    exchange        exchange        127.0.0.1/32 password
host    asterisk        asterisk        127.0.0.1/32 password
host    horde           horde           127.0.0.1/32 password
host    radius          radius          127.0.0.1/32 password
host    phpgw           phpgw           127.0.0.1/32 password
host    all             pgsql           127.0.0.1/32 password
hostssl asterisk        asterisk        0.0.0.0/0    password
hostssl horde           horde           0.0.0.0/0    password
hostssl radius          radius          0.0.0.0/0    password
local   all             pgsql                        password
local   asterisk        asterisk                     password
local   replication     pgsql                        trust
hostssl replication     pgsql           127.0.0.1/32 trust
hostssl replication     pgsql           ::1/128      trust
__EOF__
if [ -e /etc/asterisk/pgsql.access ];then
  for accessip in `cat /etc/asterisk/pgsql.access`;do
    cat <<__EOF__
hostssl    exchange        exchange        ${accessip}/32 password
hostssl    asterisk        asterisk        ${accessip}/32 password
hostssl    horde           horde           ${accessip}/32 password
hostssl    radius          radius          ${accessip}/32 password
hostssl    phpgw           phpgw           ${accessip}/32 password
hostssl    all             pgsql           ${accessip}/32 password
__EOF__
  done;
fi;
if [ -e /etc/asterisk/pgsql.local ];then
  cat /etc/asterisk/pgsql.local
fi;
) > ${PGDATA}/pg_hba.conf
}

setup_dbs() {
  if [ ! -e ${PGDATA}/asterisk.db ] && [ -e /etc/asterisk/astschema.psql.gz ];then
    zcat /etc/asterisk/astschema.psql.gz |psql -p ${PGPORT} -U pgsql -f - template1 >/dev/null 2>&1 && touch ${PGDATA}/asterisk.db
  fi;

  if [ -e /etc/sogo.sql ] && [ ! -e ${PGDATA}/exchange.db ];then
    cat /etc/sogo.sql |psql -p ${PGPORT} -U pgsql -d exchange -f - template1 > /dev/null 2>&1 && touch ${PGDATA}/exchange.db
  fi;

  if [ ! -e ${PGDATA}/radius.db ] && [ -e /etc/raddb/db_postgresql.sql.gz ];then
    zcat /etc/raddb/db_postgresql.sql.gz |psql -p ${PGPORT} -U pgsql -f - template1 > /dev/null 2>&1 && touch ${PGDATA}/radius.db
  fi;
}

check_sslcert() {
  if [ ! -e $PGDATA/server.crt ] || [ ! -e $PGDATA/server.key ] || [ "`diff /etc/openssl/server.signed.pem $PGDATA/server.crt`" ] || [ "`diff /etc/openssl/serverkey.pem $PGDATA/server.key`" ];then
    cp /etc/openssl/server.signed.pem $PGDATA/server.crt
    cp /etc/openssl/serverkey.pem $PGDATA/server.key
    chown pgsql $PGDATA/server.crt $PGDATA/server.key
    chmod 400 $PGDATA/server.crt $PGDATA/server.key
  fi;
  if [ ! "`openssl verify -CApath /etc/ipsec.d/certs $PGDATA/server.crt |grep OK`" ];then
    return 1
  fi;
}

setup_pgpass() {
  (cat <<__EOF__
127.0.0.1:5432:*:pgsql:pgadmin
127.0.0.1:5432:*:exchange:exchange
127.0.0.1:5432:*:asterisk:asterisk
127.0.0.1:5432:*:horde:horde
127.0.0.1:5432:*:radius:radius
127.0.0.1:5432:*:phpgw:phpgw
local:5432:*:pgsql:pgadmin
local:5432:*:exchange:exchange
local:5432:*:asterisk:asterisk
local:5432:*:horde:horde
local:5432:*:radius:radius
local:5432:*:phpgw:phpgw
localhost:5432:*:pgsql:pgadmin
localhost:5432:*:exchange:exchange
localhost:5432:*:asterisk:asterisk
localhost:5432:*:horde:horde
localhost:5432:*:radius:radius
localhost:5432:*:phpgw:phpgw
__EOF__
) > /root/.pgpass
  chmod 600 /root/.pgpass
  chown root.root /root/.pgpass
}

do_stop_db() {
  su pgsql -c "/usr/bin/pg_ctl -D ${1} status" >/dev/null 2>&1
  if [ $? == 0 ];then
    su pgsql -c "/usr/bin/pg_ctl -D ${1} -m immediate stop" > /dev/null 2>&1
    sleep 2;
  fi;
}

stop_db() {
  if [ -e /etc/pgpool/pgpool.conf ];then
    pgpool -m i stop
  fi;
  if [ -d /srv/pgsql ];then
    for SERVDIR in /srv/pgsql/slave*;do
      do_stop_db ${SERVDIR}
    done
  fi;
  do_stop_db ${PGDATA}
}

start_db() {
  Create_HBA ${PGDATA}
  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA start" > /dev/null 2>&1
  if [ -d /srv/pgsql ];then
    for SERVDIR in /srv/pgsql/slave*;do
      Create_HBA ${SERVDIR}
      su pgsql -c "pg_ctl -D ${SERVDIR} start" > /dev/null 2>&1
    done;
  fi;
  if [ -e /etc/pgpool/pgpool.conf ];then
    sleep 5
    pgpool
  fi;
}

create_db() {
  if [ ! -d ${PGDATA} ];then
    mkdir $PGDATA
    chown pgsql.pgsql $PGDATA
    chmod 0700 ${PGDATA}
  fi;
  su pgsql -c /usr/bin/initdb > /dev/null 2>&1

  check_sslcert
  if [ $? != 0 ];then
    rm -rf ${PGDATA}
    exit
  fi;

  (cat <<__EOF__
port = ${PGPORT}
wal_level = 'hot_standby'
max_wal_senders = 5
hot_standby = on
listen_addresses = '*'
ssl= on
__EOF__
) >> ${PGDATA}/postgresql.conf

  (cat <<__EOF__
host    all             pgsql           127.0.0.1       255.255.255.255 trust
local   all             pgsql                                           trust
__EOF__
) > "$PGDATA/pg_hba.conf"

  su pgsql -c "/usr/bin/pg_ctl -D $PGDATA start" > /dev/null 2>&1
  sleep 2

  (cat <<__EOF__
CREATE USER exchange WITH ENCRYPTED PASSWORD 'exchange';
CREATE USER asterisk WITH ENCRYPTED PASSWORD 'asterisk';
CREATE USER phpgw WITH ENCRYPTED PASSWORD 'phpgw';
CREATE USER horde WITH ENCRYPTED PASSWORD 'horde';
CREATE DATABASE exchange WITH OWNER = exchange;
CREATE DATABASE asterisk WITH OWNER = asterisk;
CREATE DATABASE phpgw WITH OWNER = phpgw;
CREATE USER radius WITH ENCRYPTED PASSWORD 'radius';
CREATE DATABASE radius WITH OWNER = radius;
CREATE DATABASE horde WITH OWNER = horde;
ALTER USER pgsql WITH PASSWORD 'pgadmin';
__EOF__
) |/usr/bin/psql -p ${PGPORT} -U pgsql -f - template1> /dev/null 2>&1

  setup_pgpass
  setup_dbs

  stop_db
  start_db
}

if [ -e ${PGDATA}/postgresql.conf ];then
  check_sslcert || exit

  stop_db
  start_db
  setup_dbs
 else
  create_db
fi;
