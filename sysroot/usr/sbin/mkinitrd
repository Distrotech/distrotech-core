#!/bin/bash

IFS=- read -a KREL <<< $(uname -r)
if [ "${#KREL[*]}" == "4" ];then
  KSUF=${KREL[3]};
 else
  KSUF=${KREL[2]}
fi;

init_rd_drivers() {
  kernel=${3}

  for kdir in drivers drivers-ata drivers-scsi drivers-usb nfs drivers-net;do
    mkdir -p ${1}/lib/modules/${kernel}/${kdir}
  done;

  for atadrv in ata mmc/host memstick/host memstick/core mfd ;do
    if [ -d ${2}lib/modules/${kernel}/kernel/drivers/${atadrv} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/drivers/${atadrv}/* ${1}/lib/modules/${kernel}/drivers-ata
    fi;
  done;

  if [ -d ${2}lib/modules/${kernel}/kernel/drivers/usb/storage ];then
    cp -r ${2}lib/modules/${kernel}/kernel/drivers/usb/storage/* ${1}/lib/modules/${kernel}/drivers-usb
  fi;

  if [ -d ${2}lib/modules/${kernel}/kernel/drivers/net/ethernet ];then
    cp -r ${2}lib/modules/${kernel}/kernel/drivers/net/ethernet/* ${1}/lib/modules/${kernel}/drivers-net
    rm -rf ${1}/lib/modules/${kernel}/drivers-net/sfc*
    rm -rf ${1}/lib/modules/${kernel}/drivers-net/ti/tlan.ko.gz
    rm -rf ${1}/lib/modules/${kernel}/drivers-net/i825xx/znet.ko.gz
  fi;

  for blist_ata in tps65010 htc-pasic3;do
    rm ${1}/lib/modules/${kernel}/drivers-ata/${blist_ata}.ko.gz
  done

  for kmod in drivers/net/mdio.ko.gz drivers/uio/uio.ko.gz drivers/net/mii.ko.gz drivers/net/sungem_phy.ko.gz \
              drivers/net/phy/libphy.ko.gz net/ipv6/ipv6.ko.gz net/unix/unix.ko.gz drivers/of/of_mdio.ko.gz \
              net/packet/af_packet.ko.gz drivers/ptp drivers/pps/pps_core.ko.gz drivers/dca drivers/net/phy/mdio-octeon.ko.gz \
              net/ipv4/inet_lro.ko.gz drivers/misc/eeprom/eeprom_93cx6.ko.gz drivers/base/regmap/regmap-i2c.ko.gz \
              sound/ac97_bus.ko.gz drivers/hwmon drivers/input/input-polldev.ko.gz drivers/char/ipmi \
              drivers/i2c/algos/i2c-algo-bit.ko.gz drivers/net/vxlan.ko.gz lib/lz4/lz4_compress.ko.gz \
              lib/lz4/lz4hc_compress.ko.gz net/bridge/bridge.ko.gz net/802/stp.ko.gz net/llc/llc.ko.gz \
              net/ipv4/udp_tunnel.ko.gz net/ipv6/ip6_udp_tunnel.ko.gz drivers/net/phy/fixed_phy.ko.gz \
              drivers/iio/industrialio.ko.gz;do

   if [ -f ${2}lib/modules/${kernel}/kernel/${kmod} ];then
     cp ${2}lib/modules/${kernel}/kernel/${kmod} ${1}/lib/modules/${kernel}/drivers
    elif [ -d ${2}lib/modules/${kernel}/kernel/${kmod} ];then
     cp -r ${2}lib/modules/${kernel}/kernel/${kmod} ${1}/lib/modules/${kernel}/drivers
   fi;
  done;

  for nonata in ata_generic.ko.gz pata_legacy.ko.gz ahci_platform.ko.gz pata_acpi.ko.gz libahci.ko.gz;do
    if [ -f ${1}/lib/modules/${kernel}/drivers-ata/${nonata} ];then
      mv ${1}/lib/modules/${kernel}/drivers-ata/${nonata} ${1}/lib/modules/${kernel}/drivers
    fi;
  done;

  for kmod in kernel/fs/fscache/fscache.ko.gz kernel/net/sunrpc/sunrpc.ko.gz kernel/fs/lockd/lockd.ko.gz \
              kernel/net/sunrpc/auth_gss/auth_rpcgss.ko.gz kernel/fs/nfs_common/nfs_acl.ko.gz \
              kernel/fs/nfs/nfs.ko.gz kernel/fs/nfs_common/grace.ko.gz kernel/fs/dlm/dlm.ko.gz \
              kernel/fs/configfs;do
   if [ -f ${2}lib/modules/${kernel}/${kmod} ];then
     cp ${2}lib/modules/${kernel}/${kmod} ${1}/lib/modules/${kernel}/nfs
    elif [ -d ${2}lib/modules/${kernel}/${kmod} ];then
     cp -r ${2}lib/modules/${kernel}/${kmod} ${1}/lib/modules/${kernel}/nfs
   fi;
  done;

  for kmod in block/loop.ko.gz base/firmware_class.ko.gz pcmcia mmc/core \
           mmc/card misc/cb710 misc/tifm_core.ko.gz cdrom/cdrom.ko.gz ssb \
           usb/host md/ usb/wusbcore uwb usb/misc/ftdi-elan.ko.gz connector/cn.ko.gz \
           hid/hid.ko.gz hid/usbhid hid/hid-generic.ko.gz bcma/bcma.ko.gz;do
   if [ -f ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ];then
     cp ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ${1}/lib/modules/${kernel}/drivers
    elif [ -d ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ];then
     cp -r ${2}lib/modules/${kernel}/kernel/drivers/${kmod} ${1}/lib/modules/${kernel}/drivers
   fi;
  done;

  for kmod in isofs/isofs.ko.gz nls/nls_iso8859-1.ko.gz ext3 ext4 jbd jbd2 squashfs fat vfat nls/nls_cp437.ko.gz;do
    if [ -f ${2}lib/modules/${kernel}/kernel/fs/${kmod} ];then
      cp ${2}lib/modules/${kernel}/kernel/fs/${kmod} ${1}/lib/modules/${kernel}/drivers
     elif [ -d ${2}lib/modules/${kernel}/kernel/fs/${kmod} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/fs/${kmod} ${1}/lib/modules/${kernel}/drivers
    fi
  done;

  for klib in zlib_deflate raid6 lzo libcrc32c.ko.gz crc16.ko.gz crc-t10dif.ko.gz \
	crc-itu-t.ko.gz crc7.ko.gz crc-ccitt.ko.gz 842;do
    if [ -f ${2}lib/modules/${kernel}/kernel/lib/${klib} ];then
      cp ${2}lib/modules/${kernel}/kernel/lib/${klib} ${1}/lib/modules/${kernel}/drivers
     elif [ -d ${2}lib/modules/${kernel}/kernel/lib/${klib} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/lib/${klib} ${1}/lib/modules/${kernel}/drivers
    fi;
  done;

  for scard in scsi_wait_scan scsi_mod scsi_tgt sd_mod sr_mod libsas \
            scsi_transport_iscsi scsi_transport_fc scsi_transport_sas \
            scsi_transport_spi device_handler cxgbi/libcxgbi megaraid/megaraid_mm \
            libiscsi libiscsi_tcp scsi_transport_iscsi fcoe osd libfc;do
    if [ -f ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard}.ko.gz ];then
      cp ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard}.ko.gz ${1}/lib/modules/${kernel}/drivers
     elif [ -d ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard} ];then
      cp -r ${2}lib/modules/${kernel}/kernel/drivers/scsi/${scard} ${1}/lib/modules/${kernel}/drivers
    fi;
  done
  if [ -d ${2}lib/modules/${kernel}/kernel/crypto ];then
    cp -r ${2}lib/modules/${kernel}/kernel/crypto ${1}/lib/modules/${kernel}/
  fi;
}

initrd_init() {
  INITRD=$(mktemp -p /tmp initrd_XXXXXXX)
  dd if=/dev/zero of=${INITRD} bs=1M count=24 > /dev/null 2>&1

  ILOOP=$(losetup -f --show ${INITRD})
  if [ ! "${ILOOP}" ] || [ ! -b ${LOOP} ];then
    return 1
  fi;

  (mkfs.ext2 -F -L initrd -i 1024 ${ILOOP}
  mount ${ILOOP} ${1}) > /dev/null 2>&1

  export ILOOP INITRD

  for tld in bin dev etc isofs aufs media lib proc sbin sys sysroot var usr usr/bin;do
    if [ ! -d ${1}/${tld} ];then
      mkdir ${1}/${tld}
    fi;
  done

  #Symlinks to root img mount for shared libs needed by aufs
  for libdir in lib64 libx32;do
    ln -s /aufs/root/${libdir} ${1}/${libdir}
    ln -s /aufs/root/usr/${libdir} ${1}/usr/${libdir}
  done
  ln -s /aufs/root/lib ${1}/lib/i686
  ln -s i686/ld-linux.so.2 ${1}/lib/ld-linux.so.2
  ln -s /aufs/root/usr/lib ${1}/usr/lib

  if [ ! -d ${1}/var/lock/lvm ];then
    mkdir -p ${1}/var/lock/lvm
  fi;
  if [ ! -d ${1}/etc/lvm ];then
    mkdir ${1}/etc/lvm
  fi;
  for lvmdir in archive backup cache;do
    if [ ! -d ${1}/etc/lvm/${lvmdir} ];then
      mkdir ${1}/etc/lvm/${lvmdir}
    fi;
  done;

  (cp ${2}/etc/lvm/lvm.conf ${1}/etc/lvm/
  cp ${2}/usr/sbin/lvm.static ${1}/sbin/lvm
  if [ -x ${2}/sbin/modprobe.static ];then
    cp ${2}/sbin/modprobe.static ${1}/sbin/modprobe
   else
    cp ${2}/usr/bin/modprobe.static ${1}/sbin/modprobe
  fi
  if [ -x ${2}/sbin/mdadm ];then
    cp ${2}/sbin/mdadm ${1}/sbin/
  fi;
  if [ -x ${2}/bin/mount.static ];then
    cp ${2}/bin/mount.static ${1}/bin/mount
   else
    cp ${2}/sbin/mount.static ${1}/bin/mount
  fi;
  if [ -x ${2}/sbin/mount.aufs ];then
    cp ${2}/sbin/mount.aufs ${1}/sbin/
    ln -s /aufs/root/usr/bin/aufhsm ${1}/usr/bin/
  fi;
  cp ${2}/sbin/mount.nfs.static ${1}/sbin/mount.nfs
  mkdir -p ${1}/usr/share/udhcpc/
  cp ${2}/usr/share/udhcpc/distrotech-nfs.script ${1}/usr/share/udhcpc/default.script
  ln -s -r ${1}/proc/mounts ${1}/etc/mtab
  ln -s -r ${1}/sbin/lvm ${1}/sbin/vgchange
  ln -s -r ${1}/sbin/lvm ${1}/sbin/vgscan
  ln -s -r ${1}/sbin/lvm ${1}/sbin/vgmknodes
  ln -s -r ${1}/linuxrc ${1}/sbin/init
  ln -s -r ${1}/sbin/mount.nfs ${1}/sbin/mount.nfs4
  if [ -e ${2}/boot/busybox.tgz ];then
    tar -C ${1} -xf ${2}/boot/busybox.tgz
  fi;
  touch ${1}/etc/fstab) 2>/dev/null

  dst=${1}
  shift
  src=${1}
  shift
  while [ "${1}" ];do
    init_rd_drivers ${dst} ${src} ${1}
    shift
  done
}

init_rd_drivers_scsi() {
  cd ${2}lib/modules/${3}
  for ADAPTER in `lspci -nm |awk -F\" '$2 == "Class 0100" || $2 == "Class 0101" || $2 == "Class 0102" || $2 == "Class 0103" || $2 == "Class 0104" || $2 == "Class 0106" || $2 == "Class 0107" || $2 == "Class 0180" {printf "grep -E \"%s.*%s\" modules.pcimap\n",$4,$6}' |sh |awk '{print $1}'`${EXTRA_DEV};do 
    if [ "$ADAPTER" == "sym53c8xx" ];then
      ADAPTER="sym53c8xx_2/sym53c8xx";
    fi;
    if [ "$ADAPTER" == "aic79xx" ];then
      ADAPTER="aic7xxx/aic79xx";
    fi;
    if [ "$ADAPTER" == "megaraid_sas" ] || [ "$ADAPTER" == "megaraid_mbox" ];then
      ADAPTER="megaraid/${ADAPTER}";
    fi;
    if [ "$ADAPTER" == "cxgb4i" ] || [ "$ADAPTER" = "cxgb3i" ];then
      ADAPTER="cxgbi/${ADAPTER}/${ADAPTER}";
    fi;

    if [ -e ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER.ko.gz ];then
      cp ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER.ko.gz ${1}/lib/modules/${3}/drivers-scsi
     elif [ -d ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER ];then
      cp -r ${2}lib/modules/${3}/kernel/drivers/scsi/$ADAPTER/* ${1}/lib/modules/${3}/drivers-scsi
     elif [ -e ${2}lib/modules/${3}/kernel/drivers/message/fusion/$ADAPTER.ko.gz ];then
      cp -r ${2}lib/modules/${3}/kernel/drivers/message/fusion/* ${1}/lib/modules/${3}/drivers-scsi
     elif [ -e ${2}lib/modules/${3}/kernel/drivers/message/i2o/$ADAPTER.ko.gz ];then
      cp -r ${2}lib/modules/${3}/kernel/drivers/message/i2o/* ${1}/lib/modules/${3}/drivers-scsi
    fi;
  done
}

modprobe_modules() {
  for driver in `ls ${1}/lib/modules/${2}/drivers-scsi/ |cut -d. -f1`;do
    echo "modprobe ${driver}"
  done;

  for driver in `ls ${1}/lib/modules/${2}/drivers-ata |cut -d. -f1`;do
    echo "modprobe ${driver}"
  done;

  cat <<_EOF_

modprobe pata_acpi
modprobe ata_generic
modprobe ehci_hcd
modprobe uhci_hcd
modprobe ohci_hcd
modprobe bcma-hcd
modprobe isp116x-hcd
modprobe isp1362-hcd
modprobe oxu210hp-hcd
modprobe r8a66597-hcd
modprobe sl811-hcd
modprobe ssb-hcd
modprobe u132-hcd
modprobe xhci-hcd
modprobe xhci-plat-hcd
modprobe xhci-pci
modprobe ohci-pci
modprobe ehci-pci
modprobe ohci-platform
modprobe ehci-platform

_EOF_

  for driver in `ls ${1}/lib/modules/${2}/drivers-usb |cut -d. -f1`;do
    echo "modprobe ${driver}"
  done;

  cat << EOF

modprobe sd_mod
modprobe sr_mod
modprobe cdrom

modprobe loop
modprobe dm-mod
modprobe usbhid
modprobe hid-generic
modprobe ext4
modprobe squashfs

EOF
}

pivot_boot_root() {
  cat <<_EOF_

echo 0x0100 > /proc/sys/kernel/real-root-dev

/sbin/pivot_root /sysroot /sysroot/initrd
mount -t proc none /proc
mount -t sysfs none /sys
umount /initrd/proc
umount /initrd/sys
umount /initrd/dev

_EOF_
}

mount_aufs_img() {
  cat <<_EOF_
/bin/mount -t tmpfs none /aufs

mkdir /aufs/user /aufs/images /aufs/tmp

/bin/mount -o ro -t ext4 -U ${IMGDEV} /aufs/images

AUFS_MNT="";
for img_file in qemu root core buildroot;do
  if [ -f /aufs/images/\${img_file}.img ];then
    mkdir /aufs/\${img_file}
    FLOOP=\$(losetup -f)
    losetup \${FLOOP} /aufs/images/\${img_file}.img
    /bin/mount -n -o ro \${FLOOP} /aufs/\${img_file}
    AUFS_MNT=":/aufs/\${img_file}=rr\${AUFS_MNT}"
  fi;
done

/bin/mount -t aufs -o br:/aufs/tmp=rw\${AUFS_MNT} aufs-root /sysroot
_EOF_

  pivot_boot_root

  cat <<_EOF_
mount -t devtmpfs none /dev
fsck -aTC UUID=${ROOTDEV} && \\
mount -o rw -t ext4 -U ${ROOTDEV} /initrd/aufs/user && \\
mount -o remount,add:0:/initrd/aufs/user=rw+moo / && \\
mount -o remount,del:/initrd/aufs/tmp /
umount /dev
_EOF_
}

probe_lvm() {
  #Probe LVM volumes
  cat <<_EOF_
sleep 5
vgchange -a y --sysinit lvm
mount -t ramfs none /var/lock/lvm
vgmknodes
umount /var/lock/lvm

_EOF_
}

initrd_config() {
  ROOTDEV=`grub-probe -t fs_uuid ${1} 2>/dev/null`
  if [ ! "${ROOTDEV}" ] && [ -e /dev/lvm/root ];then
    ROOTDEV=`blkid -s UUID -o value /dev/lvm/root`
  fi;

  IMGDEV=`grub-probe -t fs_uuid ${1}/boot/images 2>/dev/null`
  if [ ! "${IMGDEV}" ] && [ -e /dev/lvm/images ];then
    IMGDEV=`blkid -s UUID -o value /dev/lvm/images`
  fi;

  echo "#!/bin/ash";
  echo;

  if [ "$USBSLEEP" ];then
    echo "sleep ${USBSLEEP}"
  fi;

#  /sbin/dmraid -c -sa -i > /dev/null 2>&1
#  if [ $? == 0 ];then
#    echo "/sbin/dmraid -ay -i"
#  fi;

  if [ -e /etc/mdadm.conf ];then
    cat <<_EOF_
/sbin/mdadm -Ebsc part > /etc/mdadm.conf
/sbin/mdadm -As

_EOF_
  fi;

  if [ "${LOOP_FILE}" ] && [ "${LOOP_DEV}" ];then
    cat << _EOF_
/bin/mount -n -o ro -t `blkid ${LOOP_DEV} -s TYPE -o value` -U `grub-probe -t fs_uuid -d ${LOOP_DEV}` /isofs
/bin/mount -t devtmpfs none /isofs/dev
/bin/mount -t proc none /isofs/proc
/bin/mount -t sysfs none /isofs/sys
/sbin/pivot_root /isofs /isofs/media
/sbin/fsck -TCAa
/bin/mount / -o remount,rw
/sbin/losetup /dev/loop0 ${LOOP_FILE}
umount /proc
umount /dev
umount /sys
/sbin/pivot_root /media /media/isofs

_EOF_
  fi;

  if [ -e /etc/initrd.local ];then
    echo
    cat /etc/initrd.local
    echo
  fi;

  probe_lvm

  if [ "${IMGDEV}" ] && [ -f ${1}/boot/images/root.img ] && [ -f ${1}/boot/images/core.img ];then
    mount_aufs_img
   else
    echo "/bin/mount -o ro -t ext4 -U ${ROOTDEV} /sysroot"
    pivot_boot_root
  fi;
}

mkbootimg_cfg() {
  cat << EOF
#!/bin/ash

EOF

  if [ "${3}" == "dvd" ];then
    cat << EOF
sleep 5
/bin/mount -n -o ro -t iso9660 -L DISTROTECH_INSTALL /isofs
/sbin/losetup /dev/loop0 /isofs/flash.hdd

EOF
   elif [ "${3}" == "nfs" ];then
    for netint in `ls ${1}/lib/modules/${2}/drivers-net/*.ko.gz ${1}/lib/modules/${2}/drivers-net/*/*.ko.gz ${1}/lib/modules/${2}/drivers-net/*/*/*.ko.gz`;do
      echo modprobe `basename ${netint} |cut -d. -f1`;
    done
    cat << EOF
modprobe unix
modprobe ipv6
modprobe af_packet

sleep 5

/bin/ip link set dev eth0 down
/bin/ip link set dev eth0 name ethA
/sbin/udhcpc -i ethA -q
echo 0x0100 > /proc/sys/kernel/real-root-dev

/sbin/pivot_root /sysroot /sysroot/initrd

mount -M /initrd/proc /proc
mount -M /initrd/sys /sys
mount -M /initrd/dev /dev

EOF
   elif [ "${3}" == "install" ];then
    cat << EOF

modprobe vfat
modprobe nls-cp437
modprobe nls-iso8859-1

sleep 4

mke2fs -q /dev/ram1 >/dev/null 2>&1
mount -n /dev/ram1 /aufs
mkdir /aufs/isofs /aufs/install /aufs/user

mount -n -o ro -L DTS_INSTALL /aufs/isofs

if [ ! "\${img_path}" ];then
  img_path="/boot/\$(uname -m)/images"
fi;

AUFS_MNT="";
for img_file in qemu root core buildroot;do
  if [ -f /aufs/isofs/\${img_path}/\${img_file}.img ];then
    mkdir /aufs/\${img_file}
    FLOOP=\$(losetup -f)
    losetup \${FLOOP} /aufs/isofs/\${img_path}/\${img_file}.img
    /bin/mount -n -o ro \${FLOOP} /aufs/\${img_file}
    AUFS_MNT=":/aufs/\${img_file}=rr\${AUFS_MNT}"
  fi;
done

mount -t tmpfs tmprw /aufs/user

mount -n -t aufs -o br:/aufs/user=rw+moo\${AUFS_MNT} none /sysroot

mount -M /aufs /sysroot/media

echo 0x0100 > /proc/sys/kernel/real-root-dev

pivot_root /sysroot /sysroot/initrd

mount -M /initrd/proc /proc
mount -M /initrd/sys /sys
mount -M /initrd/dev /dev
mount -t tmpfs rundir /run

#Prepare as a installer
touch /etc/.install
cp -a /etc/distrotech/install/* /etc/

EOF
   else
    probe_lvm
    echo "/bin/mount -n -o ro \${rootfs} /sysroot"
    pivot_boot_root
  fi;
}

mkbootimg() {
  (cat << EOF
#!/bin/ash

echo "Distrotech Linux Starting"

/bin/mount -t devtmpfs none /dev
/bin/mount -t proc none /proc
/bin/mount -t sysfs none /sys

for copt in \`cat /proc/cmdline\`;do
  if [ "\${copt#${KSUF}_opt=}" != "\${copt}" ];then
    ${KSUF}_opt=\${copt#${KSUF}_opt=}
  fi;
  if [ "\${copt#root=}" != "\${copt}" ];then
    rootfs=\${copt#root=}
    export rootfs
  fi;
  if [ "\${copt#squashimg=}" != "\${copt}" ];then
    squashimg=\${copt#squashimg=}
    export squashimg
  fi;
  if [ "\${copt#buildimg=}" != "\${copt}" ];then
    buildimg=\${copt#buildimg=}
    export buildimg
  fi;
done

EOF

  modprobe_modules ${1} ${3}

  cat << EOF

case \$${KSUF}_opt in
  dvd)exec /sbin/linuxrc.dvd;;
  nfs)exec /sbin/linuxrc.nfs;;
  squashfs|buildroot|install)exec /sbin/linuxrc.install;;
esac

exec /sbin/linuxrc.default

EOF
) > ${1}/linuxrc
  chmod 750 ${1}/linuxrc

  initrd_config / > ${1}/sbin/linuxrc.default
  mkbootimg_cfg ${1} ${3} dvd > ${1}/sbin/linuxrc.dvd
  mkbootimg_cfg ${1} ${3} nfs > ${1}/sbin/linuxrc.nfs
  mkbootimg_cfg ${1} ${3} install > ${1}/sbin/linuxrc.install

  chmod 750 ${1}/sbin/linuxrc*
}

mk_initrd() {
  if [ ! -d ${2}/lib/modules/${3} ];then
    echo "No Kernel Directory ${2}/lib/modules/${3}"
    return 1
  fi;

  if [ "$EXTRA_DEV" ];then
    EXTRA_DEV=" ${EXTRA_DEV}"
  fi;

  initrd_init ${1} ${2} ${3} || return 1
  cp -r ${2}/etc/modprobe.d ${1}/etc/

  ${2}/sbin/depmod -a -F ${2}/boot/System.map-${3} -b ${2} ${3}
  (init_rd_drivers_scsi ${1} ${2} ${3})
  ${2}/sbin/depmod -a -e -F ${2}/boot/System.map-${3} -b ${1} ${3}

  mkbootimg ${1} ${2} ${3} || exit 1

  umount ${1}
  losetup -d ${ILOOP}

  (e2fsck -Dfy ${INITRD}
  dd if=${INITRD} bs=1k |gzip -c9 > ${2}/boot/initrd-${3}
  rm ${2}/boot/initrd.img ${2}/boot/vmlinuz ${2}/boot/System.map > /dev/null 2>&1

  ln -s vmlinuz-${3} ${2}/boot/vmlinuz
  ln -s System.map-${3} ${2}/boot/System.map
  ln -s initrd-${3} ${2}/boot/initrd.img) > /dev/null 2>&1

  return 0
}

initrd_system() {
  if [ -e /etc/netsentry-version ];then
    eval `cat /etc/netsentry-version`
   else
    echo "No Config File"
    exit 1
  fi;

  if [ -d /lib/modules/${KERNEL}-${KSUF} ];then
    mk_initrd ${1} / ${KERNEL}-${KSUF} || exit 1
   else
    mk_initrd ${1} / ${KERNEL} || exit 1
  fi;

  if [ -d /media/aufs/user ];then
    export GRUB_DEVICE=$(grub-probe -t device /media/aufs/user)
  fi;
  grub-mkconfig -o /boot/grub/grub.cfg
}

initrd_install() {
  initrd_init ${1} ${3} ${4} || return 1

  if [ ! -d ${1}/etc/modprobe.d ];then
    mkdir ${1}/etc/modprobe.d
  fi;
  (cat << EOF
options loop meax_part=63
options sg allow_dio=1
EOF
) > ${1}/etc/modprobe.d/modprobe.conf

  if [ ! -d ${1}/etc/modprobe.d ];then
    mkdir ${1}/etc/modprobe.d
  fi;
  (cat << EOF
options loop meax_part=63
options sg allow_dio=1
EOF
) > ${1}/etc/modprobe.d/modprobe.conf

  mkbootimg ${1} ${3} ${4} || exit 1
  ${3}/sbin/depmod -b ${1} -aeF ${3}/boot/System.map-${4} ${4}


  sleep 2
  umount ${1}

  e2fsck -Dfy ${ILOOP} > /dev/null 2>&1

  sleep 2
  losetup -d ${ILOOP}

  (dd if=${INITRD} |gzip -c9 > ${2}) > /dev/null 2>&1
}

TMPDIR=$(mktemp -d /tmp/bootinitrd-XXXXXXXX)
if [ ! "${TMPDIR}" ] || [ ! -d ${TMPDIR} ];then
  exit 1;
fi

if [ "${1}" == "" ];then
  initrd_system ${TMPDIR}
 elif [ "${1}" == "bootimg" ];then
  shift
  initrd_install ${TMPDIR} $@
fi;

rm -rf ${TMPDIR} ${INITRD}
