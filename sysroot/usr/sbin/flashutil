#!/bin/bash

SERV=pbx.distrotech.co.za
BASE=/var/spool/distrotech
MNTP=/mnt/floppy
CORE=/mnt/dev
AMNT=/media
CWD=`pwd`

KSUF="dts"

Grub_Local() {
  GPARTI=`grub-probe -t partmap ${BASE}`
  GFSMODI=`grub-probe -t fs ${BASE}`
  GDRIVEI=`grub-probe -t drive ${BASE}`
  GUUIDI=`grub-probe -t fs_uuid ${BASE}`

  if [ "${1}" ] && [ -e "${1}" ];then
    GUUIDT=`grub-probe -t fs_uuid ${1}`
    if [ "${GUUIDT}" == "${GUUIDI}" ];then
      GPARTT=${GPARTI}
      GFSMODT=${GFSMODI}
      GDRIVET=${GDRIVEI}
     else
      GPARTT=`grub-probe -t partmap ${1}`
      GFSMODT=`grub-probe -t fs ${1}`
      GDRIVET=`grub-probe -t drive ${1}`
     fi;
  fi;

  cat << EOF
menuentry "Distrotech Repository (${BASE}/flash.hdd)" --class distrotech --class os {
	insmod part_${GPARTI}
	insmod ${GFSMODI}
	insmod loopback
	set root='${GDRIVEI}'
        search --no-floppy --fs-uuid --set=root ${GUUIDI}
        loopback install ${BASE}/flash.hdd
        insmod lvm
	set root='(flash-install)'
        configfile  /boot/grub/grub.cfg
}
EOF

  if [ "${1}" ] && [ -e "${1}" ];then
    cat << EOF

menuentry "Distrotech Test Install (${1})" --class distrotech --class os {
	insmod part_${GPARTT}
	insmod ${GFSMODT}
	insmod loopback
	set root='${GDRIVET}'
        search --no-floppy --fs-uuid --set=root ${GUUIDT}
        loopback test ${1}
        insmod lvm
	set root='(lvm-root)'
        configfile  /boot/grub/grub.cfg
}
EOF
  fi;
}

Post_Update() {
  #Update netsentry-version
  if [ "${1}" ] && [ ${KERNEL} != ${1} ];then
    KERNEL=$1
    (cat <<__EOF__
BRAND="$BRAND";
VERSION="$VERSION";
KERNEL="$KERNEL";
HN_ADDR="$HN_ADDR";
DOM_ADDR="$DOM_ADDR";
BT="\$BRAND V\$VERSION Linux V\$KERNEL Install";
KERNOPTS="$KERNOPTS";
EXTRA_DEV="$EXTRA_DEV";
USBSLEEP="$USBSLEEP";
RSERV="$RSERV";
LOOP_FILE="${LOOP_FILE}";
LOOP_DEV="${LOOP_DEV}";
__EOF__
) > /etc/netsentry-version
  fi;

  /sbin/ldconfig

  /usr/bin/rebuild-info
#  pear channel-update pear.php.net;pear upgrade-all

  #Run any SQL / LDAP scripts on no error
  if [ -d /var/spool/update ];then
    for I in /var/spool/update/*.sql ; do
      if test $I -nt /etc/asterisk/astschema.psql.gz ;then
        cat $I |psql -U asterisk -h 127.0.0.1
      fi
    done;
    touch /etc/asterisk/astschema.psql.gz

    for I in /var/spool/update/*.esql ; do
      if test $I -nt /var/spool/pgsql/exchange.db ;then
        cat $I |psql -U exchange -h 127.0.0.1
      fi
    done;
    touch /var/spool/pgsql/exchange.db

    if [ /var/spool/update/remote.keys -nt /root/.ssh/authorized_keys ] || [ ! -e /root/.ssh/authorized_keys ] || [ ! -s /root/.ssh/authorized_keys ];then
      (/usr/bin/ldapmodify -U admin -Y PLAIN -y /etc/ldap.secret -cf /var/spool/update/remote.keys
      /usr/bin/gensshauth > /root/.ssh/authorized_keys.tmp
      if [ ! -d /root/.ssh ];then
        mkdir /root/.ssh
        chmod 700 /root/.ssh
      fi;
      if [ -s /root/.ssh/authorized_keys.tmp ];then
        cp /root/.ssh/authorized_keys.tmp /root/.ssh/authorized_keys
      fi) > /dev/null 2>&1
    fi;
  fi;

  if [ -d /etc/modprobe.d ];then
    rm /etc/modprobe.* >/dev/null 2>&1
  fi
  rm /etc/udev/rules.d/[145x]* >/dev/null 2>&1

  #Reinstall Grub/Update initrd if needed
  if [ ! -e /boot/grub/core.img ] || [ /usr/lib/grub/i386-pc/ -nt /boot/grub/core.img ];then
    /usr/sbin/mkgrub
   elif [ ! -e /boot/initrd-${KERNEL} ] || [ /boot/vmlinuz-${KERNEL} -nt /boot/initrd-${KERNEL} ];then
    mkinitrd
  fi

  if [ -e  /usr/sbin/mkfstab ] && [ /usr/sbin/mkfstab -nt /etc/fstab ];then
    /usr/sbin/mkfstab > /etc/fstab
  fi

  /usr/sbin/genconf
  /usr/sbin/asterisk -rx "dialplan reload"
}

Make_Grubcfg(){
  for inmod in part_msdos part_gpt ext2 ntfs vbe vga video_bochs video_cirrus jpeg gfxterm gettext;do
    echo "insmod $inmod";
  done

(cat << EOF

if test -e (cd)/flash.hdd ;then
  loopback floop (cd)/flash.hdd
fi

insmod lvm

if loadfont (flash-install)/usr/share/grub/unicode.pf2 ; then
  set gfxmode=800x600
  terminal_output gfxterm
  if background_image (flash-install)/boot/grub/background.jpg; then
    set color_normal=white/black
    set color_highlight=black/white
  else
    set menu_color_normal=white/black
    set menu_color_highlight=black/light-gray
    if background_color 44,0,30; then
      clear
    fi
  fi
else
  set menu_color_normal=white/black
  set menu_color_highlight=black/light-gray
  if background_color 44,0,30; then
    clear
  fi
fi

set timeout=5

EOF
)

  for bdisk in hd0 hd1 hd2 hd3;do
    for mpart in 1 2 3 4;do
(cat <<  EOF
if test -e ($bdisk,msdos$mpart)/bootmgr ;then
  menuentry "$bdisk $mpart (Windows)" {
	set root=(${bdisk},msdos${mpart})
        chainloader +1
  }
fi
EOF
)
      for bpath in /boot/ /;do
(cat <<  EOF
if test -e ($bdisk,msdos$mpart)${bpath}grub/grub.cfg ;then
  menuentry "$bdisk $mpart (GRUB $bpath)" {
	set root=(${bdisk},msdos${mpart})
        configfile ${bpath}grub/grub.cfg
  }
fi

EOF
)
      done;
    done;
  done;

  (cat <<  EOF
if test -e (lvm-root)/boot/grub/grub.cfg ;then
  menuentry "LVM (lvm-root GRUB)" {
	set root=(lvm-root)
        configfile /boot/grub/grub.cfg
  }
fi

EOF
)

  (cat <<  EOF
if test -e (flash-install)/boot/initrd.img ;then
  if test -e (cd)/flash.hdd ;then
    menuentry "Install" {
  	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet nomodeset ${KSUF}_opt=dvd
        initrd /boot/initrd.img
    }
    menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro single nomodeset ${KSUF}_opt=dvd
        initrd /boot/initrd.img
    }
    menuentry "Install (DHCP/NFS)" {
  	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet nomodeset ${KSUF}_opt=nfs
        initrd /boot/initrd.img
    }
   else
    if test -d (install,msdos1)/putty ;then
      menuentry "Install" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet nomodeset ${KSUF}_opt=loop
        initrd /boot/initrd.img
      }
      menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro single nomodeset ${KSUF}_opt=loop
        initrd /boot/initrd.img
      }
      menuentry "Install (DHCP/NFS)" {
	set root=(flash-install)
	linux /boot/vmlinuz root=/dev/flash/install ro quiet nomodeset ${KSUF}_opt=nfs
	initrd /boot/initrd.img
      }
     else
      menuentry "Install" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro quiet nomodeset ${KSUF}_opt=install
        initrd /boot/initrd.img
      }
      menuentry "Install (Rescue)" {
	set root=(flash-install)
        linux /boot/vmlinuz root=/dev/flash/install ro single nomodeset ${KSUF}_opt=install
        initrd /boot/initrd.img
      }
      menuentry "Install (DHCP/NFS)" {
	set root=(flash-install)
	linux /boot/vmlinuz root=/dev/flash/install ro quiet nomodeset ${KSUF}_opt=nfs
	initrd /boot/initrd.img
      }
    fi;
  fi;
  menuentry "Memory test (memtest86+)" {
	set root=(flash-install)
        linux16 /boot/memtest.bin
  }
  menuentry "Memory test (memtest86+, serial console 115200)" {
        set root='(flash-install)'
        linux16 /boot/memtest.bin console=ttyS0,115200n8
  }
fi
if test -e (hd0,msdos3)/ubuntu/desktop-i386.iso ;then
  menuentry "Ubuntu Desktop i386" {
	set iso_path=/ubuntu/desktop-i386.iso
	export iso_path
	search --set --file \$iso_path
	loopback ubudloop \$iso_path
	set root=(ubudloop)
	configfile /boot/grub/loopback.cfg
  }
fi;
if test -e (hd0,msdos3)/ubuntu/server-i386.iso ;then
  menuentry "Ubuntu Server i386" {
	set iso_path=/ubuntu/server-i386.iso
	export iso_path
	search --set --file \$iso_path
	loopback ubusloop \$iso_path
	set root=(ubusloop)
	configfile /boot/grub/loopback.cfg
  }
fi;
if test -e (hd0,msdos3)/boot/syslinux/ldlinux.sys ;then
  menuentry "Ultimate Boot CD" {
	set root=(hd0,msdos3)
	chainloader +1
  }
fi;
if test -d (hd0,msdos3)/dtsrescue ;then
  menuentry "Tiny Core (Distrotech Desktop)" {
	set root=(hd0,msdos3)
	linux /dtsrescue/tinycore/vmlinuz loglevel=3 protect tce=LABEL=BOOTISO
	initrd /dtsrescue/tinycore/core.gz
  }
  menuentry "Tiny Core (Distrotech Rescue)" {
	set root=(hd0,msdos3)
	linux /dtsrescue/tinycore/vmlinuz loglevel=3 tce=LABEL=BOOTISO/dtsrescue/tce
	initrd /dtsrescue/tinycore/core.gz
  }
fi;
EOF
)
}

pxeboot_config() {
  echo "Sync PXE Boot (Kernel/Initrd)"
  rm /tftpboot/Distrotech/initrd* /tftpboot/Distrotech/vmlinuz*
  rsync -avP ${CORE}/boot/vmlinuz ${CORE}/boot/initrd.img /tftpboot/Distrotech/
  rsync -avP ${CORE}/boot/memtest.bin /tftpboot/Distrotech/memtest
  (cat << EOF
LABEL 1
        MENU LABEL Distrotech Network Install
        KERNEL Distrotech/vmlinuz
        APPEND initrd=Distrotech/initrd.img ${KSUF}_opt=nfs
        TEXT HELP
        Install Distrotech Over The Network
        ENDTEXT
LABEL 2
        MENU LABEL Distrotech Network Install (Rescue Mode)
        KERNEL Distrotech/vmlinuz
        APPEND initrd=Distrotech/initrd.img S ${KSUF}_opt=nfs
        TEXT HELP
        Distrotech Network Rescue Mode
        ENDTEXT
LABEL 3
	MENU LABEL Memory Test
	KERNEL Distrotech/memtest
        TEXT HELP
        Memory Test Utility
        ENDTEXT
EOF
) > /tftpboot/Distrotech/Distrotech.menu
}

if [ "`id -u`" != "0" ];then
  echo "You are seeing this page as you are trying to run it non root."
  exit 255
fi;

for checkexe in /sbin/dosfsck /sbin/dmsetup /sbin/lvm /bin/dd /sbin/losetup /bin/rsync /sbin/parted /bin/grub-mkrescue /sbin/mkdosfs /bin/xorriso /bin/bc;do
  if [ ! -x ${checkexe} ] && [ ! -x /usr${checkexe} ];then
    echo "Missing ${checkexe}"
    exit -1
   fi;
done;

if [ "${1}" == "iso" ];then
  if [ -f ${BASE}/flash.hdd ] && [ "${2}" ];then
    grub-mkrescue -o ${2} --volid DISTROTECH_INSTALL ${BASE}
   else
    echo "ISO File not supplied Or missing local repository"
  fi;
 elif [ "${1}" == "upgrade" ];then
  if [ ! -e "/etc/firewall.conf" ] || [ ! -e "/etc/netsentry-version" ];then
    echo "This does not look like a valid server to upgrade"
    exit 255
  fi;

  eval `cat /etc/netsentry-version`

  if [ "${2}" ] && [ "${KERNEL}" != "${2}" ];then
    UPKERN=${2}
   else
    UPKERN=${KERNEL}
  fi;

  Post_Update ${UPKERN}

#  if [ -d ${CORE}/install/core ];then
#    pxeboot_config
#  fi;
 elif [ "${1}" == "grub2" ];then
  Grub_Local ${2}
fi;
