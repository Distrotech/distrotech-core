#!/bin/bash

if [ ! -e /etc/netsentry-version ] && [ -e /etc/distrotech/netsentry-version.dist ];then
  cp /etc/distrotech/netsentry-version.dist /etc/netsentry-version
 elif [ ! -e /etc/netsentry-version ];then
  echo "Config not found"
  exit 255
fi

export KVER=$(uname -r)
export VERSION=$(lsb_release -r -s)
eval export BRAND=$(lsb_release -d -s)
export BT="${BRAND} ${VERSION} Kernel ${KVER} Install";

setterm -blank 20

if [ -e "/tmp/fstab.new" ];then
  rm /tmp/fstab.new
fi;


Set_Serial() {
  if [ -d /sys/class/net/br0 ];then
    IFACE="br0";
   elif [ -d /sys/class/net/ethA ];then
    IFACE="ethA";
   else
    return -1;
  fi;

  MAC=`cat /sys/class/net/${IFACE}/address`
  ZCIP=`cat "/var/lib/avahi-autoipd/${MAC}"`
  if [ "${ZCIP}" ];then
    cp /usr/libexec/distrotech/serial.pl ${INST_BASE}/root
    chmod 750 ${INST_BASE}/root/serial.pl
    chroot ${INST_BASE} /root/serial.pl ${1} ${ZCIP}+16 >> ${INST_BASE}/var/spool/apache/htdocs/ns/config/netsentry.conf
    rm ${INST_BASE}/root/serial.pl
   else
    return -1;
  fi;
}

Install_System() {
  setterm -cursor off
  INST_BASE=/media/install

  if [ ! -d /etc/yum/repos.d ];then
    mkdir -p /etc/yum/repos.d;
  fi;
  (cat <<EOF
[installer]
name = Flash Installer
baseurl = file:///media/isofs/repo
EOF
) > /etc/yum/repos.d/installer.repo

  IFS=- read -a KREL <<< ${KVER}
  KARCH=${KREL[1]}
  case ${KARCH} in
    x86_64)ARCH="x86_64";
      LIBDIR="lib64";;
    x86_x32)ARCH="x86_32";
      LIBDIR="libx32";;
    x86)ARCH="i686";
      LIBDIR="lib";;
  esac;

  (yum --installroot=${INST_BASE} clean all
  rpmdb --root=${INST_BASE} --rebuilddb) >/dev/null 2>&1

  /usr/libexec/distrotech/instpkg ${ARCH} ${INST_BASE} distrotech-core-conf 2>/dev/null |/usr/libexec/distrotech/instguage.pl |\
    dialog --backtitle "$BT" --title "Installing Packages" --gauge "Install Essential Packages" 8 35
  /usr/libexec/distrotech/instpkg ${ARCH} ${INST_BASE} @root 2>/dev/null |/usr/libexec/distrotech/instguage.pl |\
    dialog --backtitle "$BT" --title "Installing Packages" --gauge "Install System Base Packages" 8 35
  /usr/libexec/distrotech/instpkg ${ARCH} ${INST_BASE} @core 2>/dev/null |/usr/libexec/distrotech/instguage.pl |\
    dialog --backtitle "$BT" --title "Installing Packages" --gauge "Install System Core Packages" 8 35

  /usr/bin/yum -y --installroot=${INST_BASE} clean all >/dev/null 2>&1

  if [ -e /sbin/modprobe.static ];then
    cp /sbin/modprobe.static ${INST_BASE}/sbin
  fi;

  if [ ! -e ${INST_BASE}/etc/shadow ];then
    cp /etc/shadow ${INST_BASE}/etc
  fi;

  for pwd_file in passwd group;do
    if [ -e ${INST_BASE}/etc/distrotech/${pwd_file}.dist ] && [ ! -e ${INST_BASE}/etc/${pwd_file} ];then
      cp ${INST_BASE}/etc/distrotech/${pwd_file}.dist ${INST_BASE}/etc/${pwd_file}
    fi;
  done

  ls -d ${INST_BASE}/opt/*/${LIBDIR} |awk -v MNT=${INST_BASE} '{printf "%s\n",substr($1,length(MNT)+1)}' > ${INST_BASE}/etc/ld.so.conf.d/opt.conf

  for newdir in autofs cdrom floppy initrd;do
    mkdir -p ${INST_BASE}/mnt/${newdir}
  done

  #Setup the kernel version in the config file used by mkinitd
  LINKERNEL=$(rpm --root ${INST_BASE} -q -i linux-intel-${KREL[2]} |grep Version |sed -e "s/.*\s\(.*\)/\1/")
  sed -e "s/\(KERNEL=\"\).*\"/\1${LINKERNEL}-${KARCH}-${KREL[2]}\"/" /etc/netsentry-version > ${INST_BASE}/etc/netsentry-version

  for newdir in usr/share/clamav var/spool/clientmqueue var/spool/MailScanner/incoming etc/MailScanner \
                var/empty var/spool/apache/htdocs/ssl/sign var/spool/apache/htdocs/ssl/casign var/state/dhcp \
                etc/quagga etc/ipsec.d/crls etc/ipsec.d/certs etc/ipsec.d/clients etc/ipsec.d/cacerts \
                etc/opensssl/certs etc/squid etc/samba etc/openssl/private etc/openssl/newcerts var/named \
                var/spool/apache/htdocs/ns/config/zones var/spool/apache/htdocs/ns/config/tftptmpl var/db/nscd \
                var/spool/apache/htdocs/ns/config/sslconf etc/radiusclient etc/samba/private var/run/nscd \
                var/spool/mailscanner/incoming var/spool/mqueue var/spool/mailscanner/quarantine \
                var/home/sogo/GNUstep/Defaults var/spool/avirus var/spool/update var/spool/mail \
                var/spool/samba/share var/spool/samba/dadmin;do
    mkdir -p ${INST_BASE}/${newdir}
  done

#  rsync -a /install/update ${INST_BASE}/var/spool/ > /dev/null 2>&1

  for webdir in postgresql mysqlmanual phpmanual polycom snom ns/config;do
    if [ ! -d ${INST_BASE}/var/spool/apache/htdocs/${webdir} ];then
      mkdir ${INST_BASE}/var/spool/apache/htdocs/${webdir}
      chown www.www ${INST_BASE}/var/spool/apache/htdocs/${webdir}
    fi;
  done;

  /usr/bin/dialog --backtitle "$BT" --title "Creating Mail/User Hash Directories" --infobox "Creating Mail/User Hash Directories" 5 45
  setfacl -m u::rwX -m g::rwX -m o::0 -m g:12:rwX -m g:100:rX -m m::rwX \
          -m d:u::rwX -m d:g::rwX -m d:o::0 -m d:g:12:rwX -m d:m::rwX ${INST_BASE}/var/spool/mail;
  for root1 in a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0;do
    mkdir -m 0770 -p ${INST_BASE}/var/spool/mail/$root1;
    setfacl -m g:100:rX ${INST_BASE}/var/spool/mail/$root1;
    mkdir -m 0755 -p ${INST_BASE}/var/home/$root1;
    for root2 in a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0;do
      mkdir -m 0770 -p ${INST_BASE}/var/spool/mail/$root1/$root2;
      setfacl -m g:100:rX ${INST_BASE}/var/spool/mail/$root1/$root2;
      mkdir -m 0755 -p ${INST_BASE}/var/home/$root1/$root2;
    done;
  done

  if [ ! -d /var/spool/apache/htdocs/ns/config ];then
    mkdir -p /var/spool/apache/htdocs/ns/config
    mkdir /var/spool/apache/htdocs/ns/config/sslconf
    mkdir /var/spool/apache/htdocs/ns/config/zones
  fi;

  (chmod 2777 ${INST_BASE}/var/spool/samba/share/
  chmod -R -o=rwX,g=rwX,o=rX ${INST_BASE}/var/spool/samba/share/*
  chown -R root.139 ${INST_BASE}/var/spool/samba/share) >/dev/null 2>&1

#  cp -r /install/tools/* ${INST_BASE}/var/spool/samba/share/

  /usr/bin/dialog --backtitle "$BT" --title "Initial Config" --infobox "Creating Initial Config" 7 35
#  cp /install/.profile ${INST_BASE}/root/.profile
#  chmod 750 ${INST_BASE}/root/.profile
  echo "clear" > ${INST_BASE}/root/.bash_logout

  for sysdir in dev proc sys;do
    if [ ! -d ${INST_BASE}/${sysdir} ];then
        mkdir ${INST_BASE}/${sysdir}
    fi;
    mount --bind /${sysdir} ${INST_BASE}/${sysdir}
  done;

  cp /var/spool/apache/htdocs/ns/config/netsentry.conf ${INST_BASE}/var/spool/apache/htdocs/ns/config/
  if [ -e ${INST_BASE}/var/spool/apache/htdocs/ns/config/networksentry-lite ];then
    rm ${INST_BASE}/var/spool/apache/htdocs/ns/config/networksentry-lite
  fi;
  if [ ! -e ${INST_BASE}/var/spool/apache/htdocs/ns/config/networksentry-full ];then
    touch ${INST_BASE}/var/spool/apache/htdocs/ns/config/networksentry-full
  fi;
  if [ -e ${INST_BASE}/etc/.networksentry-lite ];then
    rm ${INST_BASE}/etc/.networksentry-lite
  fi;

  #Create Serial On Install
#  if [ "$SERIAL" ];then
#    echo "Serial $SERIAL" >> ${INST_BASE}/var/spool/apache/htdocs/ns/config/netsentry.conf
#   else
#    Set_Serial ${HN_ADDR}.${DOM_ADDR}
#  fi

  chmod 1777 ${INST_BASE}/tmp ${INST_BASE}/var/run
  chown -R www.www ${INST_BASE}/var/spool/apache/htdocs
  chmod 770 ${INST_BASE}/var/spool/clientmqueue
  chown 51.51 ${INST_BASE}/usr/share/clamav ${INST_BASE}/var/spool/avirus > /dev/null 2>&1
  chown smmsp.smmsp ${INST_BASE}/var/spool/clientmqueue/

  if [ ! -e ${INST_BASE}/etc/firewall.conf ];then
    ln -s -r ${INST_BASE}/var/spool/apache/htdocs/ns/config/netsentry.conf ${INST_BASE}/etc/firewall.conf
  fi;
  if [ ! -e ${INST_BASE}/etc/localtime ];then
    ln -s -r ${INST_BASE}/usr/share/zoneinfo/Africa/Johannesburg ${INST_BASE}/etc/localtime
  fi;

  chroot ${INST_BASE} /sbin/ldconfig > /dev/null 2>&1
  chroot ${INST_BASE} /sbin/hwclock --systohc --utc >/dev/tty4 2>&1
  chroot ${INST_BASE} /usr/sbin/rndc-confgen -a -r /dev/urandom > /dev/null 2> /dev/null
  chroot ${INST_BASE} /usr/bin/rebuild-info

  /usr/bin/dialog --backtitle "$BT" --title "Post Install" --infobox "Running genconf/servconfig. This Takes Several Minutes" 7 35
  rm ${INST_BASE}/etc/.install ${INST_BASE}/etc/.cdrom > /dev/null 2>&1
  touch ${INST_BASE}/tmp/.firstconfig ${INST_BASE}/etc/.needsreconf
  rsync -aR /var/lib/avahi-autoipd /etc/dhclient.conf ${INST_BASE} > /dev/null 2>&1
  chroot ${INST_BASE} /usr/sbin/genconf > /dev/null 2>&1
  chroot ${INST_BASE} /usr/sbin/servconfig > /dev/tty4 2> /dev/tty4
  /usr/bin/dialog --backtitle "$BT" --title "PostGRE Setup" --infobox "Applying PostGRE Schema. This Takes Several Minutes" 7 35
  chroot ${INST_BASE} /usr/sbin/genconf > /dev/null 2>&1
  chroot ${INST_BASE} /usr/sbin/servconfig > /dev/tty4 2> /dev/tty4
  touch ${INST_BASE}/tmp/.firstconfig
  rm -rf ${INST_BASE}/var/spool/mail/shared ${INST_BASE}/root/crontab

  /usr/bin/dialog --backtitle "$BT" --title "Init RD" --infobox "Creating Initial RAM Disks" 7 35
  if [ -e ${INST_BASE}/etc/mtab ];then
    rm ${INST_BASE}/etc/mtab
  fi;
  ln -s ../proc/self/mounts ${INST_BASE}/etc/mtab
  chroot ${INST_BASE} /usr/sbin/mkfstab > ${INST_BASE}/etc/fstab 2> /dev/null
  chroot ${INST_BASE} /usr/sbin/mkgrub > /dev/null 2>&1

  setterm -cursor on

  clear
  return 0
}

Fdisk_Do() {
  DISK_FD=${2}

  (pvdisplay -c ${DISK_FD}* 2>/dev/null |awk -F: '!/:#orphan.*/ && $12 != "" {printf "if [ \"%s\" ];then vgremove -f %s;fi\n",$2,$2}' |sh
  pvdisplay -c ${DISK_FD}* 2>/dev/null |awk -F: '$12 != "" {printf "pvremove -ff -y%s\n",$1}' |sh) > /dev/null 2>&1

  SIZE=`echo ${DISK_FD} |sed -e "s/\/dev\/\(.*\)/cat \/sys\/block\/\\1\/size/" |sh`
  SIZE=`echo "${SIZE} / (2048*1024)" |bc`
  sgdisk -Z ${DISK_FD}
  if (( ${SIZE} > 1024 ));then
    parted -s ${DISK_FD} mklabel gpt
    parted -s ${DISK_FD} mkpart grub 1 2
    parted -s ${DISK_FD} set 1 bios on
    parted -s ${DISK_FD} set 1 hidden on
    parted -s ${DISK_FD} mkpart swap 2 1026
    parted -s ${DISK_FD} "mkpart lvm 1026 -1"
    parted -s ${DISK_FD} set 3 lvm on
   else
    parted -s ${DISK_FD} mklabel msdos
    parted -s ${DISK_FD} mkpart primary ext2 1 2
    parted -s ${DISK_FD} set 1 hidden on
    parted -s ${DISK_FD} mkpart primary linux-swap 2 1026
    parted -s ${DISK_FD} "mkpart primary ext2 1026 -1"
    parted -s ${DISK_FD} set 3 boot on
    parted -s ${DISK_FD} set 3 lvm on
  fi;

  sync
  losetup ${DISK_FD} 2>/dev/null |sed -e "s/\([a-z0-9\/]\+\):.*(\(.*\))/losetup -d \1;losetup \1 \2/" |sh
  sync
  sleep 5

  if [ -b ${DISK_FD}p1 ];then
    DISK_FD=${DISK_FD}p
  fi;

  if [ -b ${DISK_FD}1 ];then
    dd if=/dev/zero of=${DISK_FD}1
  fi;

  if [ -b ${DISK_FD}2 ];then
    mkswap ${DISK_FD}2
    swapon ${DISK_FD}2
  fi;

  if [ -b ${DISK_FD}3 ];then
    pvcreate -ff -y ${DISK_FD}3
    if [ ! -d /dev/${1} ];then
      if vgcreate -f ${1} ${DISK_FD}3;then
        mkdir /dev/${1}
      fi
     else
      vgextend -f ${1} ${DISK_FD}3
    fi;
  fi;
}

Format_LVM() {
  if [ "${3}" ];then
    (lvcreate $1 -n $2 -l 100%VG -i ${3} -I 64) >/dev/tty4 2>/dev/tty4
   else
    (lvcreate $1 -n $2 -l 100%VG) >/dev/tty4 2>/dev/tty4
  fi;
  (vgchange -a y $1
  mkfs.ext4 -L $2 -j -v /dev/$1/$2 -L $2) >/dev/tty4 2>/dev/tty4
}

Fdisk() {
  if [ "${DSKS}" == "" ];then
    sleep 5
    MDDSK=`ls /dev/md[a-z] 2>/dev/null`
    if [ "$MDDSK" ];then
      DSKS=$MDDSK
    fi;
    for hdd in `ls /dev/[hs]d[a-z] 2>/dev/null`;do
      HDD_LABEL=$(blkid ${hdd}1 -s LABEL -o value)
      if [ ! "`pvdisplay -c 2>/dev/null |grep -E "${hdd}[0-9]:flash:"`" ] && [ "${HDD_LABEL}" != "DTS_INSTALL" ];then
        DSKS="${DSKS} $hdd"
      fi;
    done
    if [ ! "${DSKS}" ];then
      return
    fi;
  fi;

  DISK="";
  MAN_FDISK="";
  DCNT=1;
  for dsk in ${DSKS};do
    DSIZE=`echo $dsk |awk -F/ '{printf "cat /sys/block/%s/size",$3}' |sh`
    if [ "${DSIZE}" != "0" ] && [ "${DSIZE}" ];then
      DISK="${DISK} $dsk $DCNT off"
      let DCNT++;
    fi;
  done;

  /usr/bin/dialog --backtitle "$BT" --title "Fdisk" --separate-output\
                  --checklist "Select Disk To Fdisk\nWARNING: Disks Selected Will Be NUKED!!!\nCall George W This Is A WMD\nWeapon Of M$ Destruction"\
                  17 45 7 ${DISK} 2> /tmp/menu.tmp.$$
  RETVAL=$?;
  FD_CHOICE=`cat /tmp/menu.tmp.$$`;
  rm /tmp/menu.tmp.$$;

  if [ $RETVAL == "0" ] && [ "$FD_CHOICE" ];then
    LVSTRIPE=0;
    for DISK_FD in $FD_CHOICE;do
      /usr/bin/dialog --backtitle "$BT" --title "Fdisk" --infobox "Creating partitions and assiging to PV/VG" 4 35
      Fdisk_Do lvm ${DISK_FD} > /dev/tty4 2>/dev/tty4
      let LVSTRIPE++;
    done;

    /usr/bin/dialog --backtitle "$BT" --title "Formating Root LV" --infobox "Formating Linux Partition" 4 35
    Format_LVM lvm root ${LVSTRIPE}
    echo "/ /dev/lvm/root" >> /tmp/fstab.new
    Mount_All
    Local_Install
   else
    return
  fi
}

View_Aint() {
  /sbin/ip addr show >/tmp/ifconfig
  /usr/bin/dialog --backtitle "$BT" --clear --title "Active Interfaces" --textbox /tmp/ifconfig 21 78
}

View_Aroute() {
  /sbin/ip route show table all >/tmp/routeing
  /usr/bin/dialog --backtitle "$BT" --clear --title "Routeing Table" --textbox /tmp/routeing 21 78
}


View_disk() {
  sfdisk -uM -Vl > /tmp/disk.$$
  /usr/bin/dialog --backtitle "$BT" --clear --title "Hard Drives" --textbox /tmp/disk.$$ 21 78
}

View_lspci() {
  /usr/sbin/lspci >/tmp/lspci
  /usr/bin/dialog --backtitle "$BT" --clear --title "PCI Database" --textbox /tmp/lspci 21 78
}

View_Amount() {
  /bin/df -h >/tmp/mounts
  /usr/bin/dialog --backtitle "$BT" --clear --title "Active Mounts" --textbox /tmp/mounts 21 78
}

View_Proc() {
  /bin/ps ax >/tmp/procs
  /usr/bin/dialog --backtitle "$BT" --clear --title "Active Prosesors" --textbox /tmp/procs 21 78
}

View_Menu() {
  /usr/bin/dialog --backtitle "$BT" --clear --title "View Config Menu (Viewing Items Involves Saveing)" \
    --menu "Select The Config You Wish To See." 15 70 8\
       "1" "Active Interfaces"\
       "2" "Active Routeing Table"\
       "3" "Active Mounts"\
       "4" "Active Procesors"\
       "5" "PCI Database"\
       "6" "Disk Drives"\
       "M" "Return To Main Menu" 2> /tmp/menu.tmp.$$
  RETVAL=$?;
  CM_CHOICE=`cat /tmp/menu.tmp.$$`;
  rm /tmp/menu.tmp.$$;
  if [ $RETVAL == "0" ];then
    case $CM_CHOICE in
        1)View_Aint;;
        2)View_Aroute;;
        3)View_Amount;;
        4)View_Proc;;
        5)View_lspci;;
        6)View_disk;;
        M)return 1;;
      esac;
    fi;
}

Mounts() {
  touch /tmp/fstab.new
  DISK="";
  DCNT=1;
  PCNT=1;
  for dsk in ${DSKS};do
    for prt in `fdisk -l $dsk |grep "Linux" |grep -v "Linux swap" |awk '{print $1}'`;do
      ISMNT=`grep $prt /tmp/fstab.new`;
      let PCNT++;
      if [ "$ISMNT" == "" ];then
        DISK="${DISK} $prt $DCNT off"
        LPART=$prt
        let DCNT++;
      fi;
    done;
  done;

  if [ "${DISK}" == "" ] && [ "$DCNT" == 1 ] && [ "$PCNT" == 1 ];then
    /usr/bin/dialog --backtitle "$BT" --title "Partition Allocation Error" --msgbox "There Where No Partitons Allocated." 6 35
    return
   elif [ "$DCNT" == 1  ];then
    /usr/bin/dialog --backtitle "$BT" --title "Partition(s) Allocated" --msgbox "All Partitions Have Been Allocated." 6 35
    return
   elif (( $PCNT == 2 ));then
    echo "/ ${LPART}" >> /tmp/fstab.new
    Mount_All
    Local_Install
   elif (( $DCNT > 1 ));then
    FSTAB=`cat /tmp/fstab.new`;
    /usr/bin/dialog --backtitle "$BT" --title "Configure Mount Points"\
                    --radiolist "Please Configure Mount Points Configure\n\
One Root File System As The Last Partition.\n\n\
$FSTAB"\
        20 70 6 ${DISK} 2> /tmp/menu.tmp.$$
    RETVAL=$?;
    PT_CHOICE=`cat /tmp/menu.tmp.$$`
    rm /tmp/menu.tmp.$$;
    if [ $RETVAL == "0" ] && [ "$PT_CHOICE" != "" ];then
      /usr/bin/dialog --backtitle "$BT" --title "Configure Mount Points"\
                      --inputbox "Enter Mount Point" 10 35 "/" 2> /tmp/menu.tmp.$$
      RETVAL=$?;
      MP_CHOICE=`cat /tmp/menu.tmp.$$`
      rm /tmp/menu.tmp.$$
      if [ $RETVAL == "0" ] && [ "$PT_CHOICE" != "" ];then
        ISMNT1=`grep $PT_CHOICE /tmp/fstab.new`;
        ISMNT2=`grep -w $MP_CHOICE /tmp/fstab.new`;
        if [ "$ISMNT1" == "" ] && [ "$ISMNT2" == "" ];then
          echo "$MP_CHOICE $PT_CHOICE" >> /tmp/fstab.new
        fi;
	if [ $MP_CHOICE == "/" ];then
          Mount_All;
         else
          Mounts;
        fi;
      fi;
    fi;
  fi;
}

Mount_All() {
  if [ -e "/tmp/fstab.new" ];then
    cat /tmp/fstab.new |awk '$1 == "/" {print "mount -t ext4 "$2" /media/install -o acl,user_xattr >/dev/tty4 2>/dev/tty4"}'|sh
    MNTRT=`grep "/media/install " /proc/mounts`;
    if [ "$MNTRT" == "" ];then
      /usr/bin/dialog --backtitle "$BT" --title "Mount Failure" --msgbox "No Root Partition Defined" 5 35
     else
      cat /tmp/fstab.new |/bin/sort |awk '$1 != "/" {print "mkdir -p /media/install/"$1";mount "$2" /media/install/"$1" >/dev/tty4 2> /dev/tty4"}'|sh
    fi
   else
    /usr/bin/dialog --backtitle "$BT" --title "Mount Failure" --msgbox "No Mount Points Are Defined" 5 35
  fi
}

New_Serial() {
  /usr/bin/dialog --backtitle "$BT" --title "New Serial Number" --inputbox\
    "Please Enter The Serial Number For This Version. The Existing Serial Will Be Used If Left Blank." 10 51 "" 2> /tmp/menu.tmp.$$
  RETVAL=$?
  NEW_SER=`cat /tmp/menu.tmp.$$`;
  rm /tmp/menu.tmp.$$;
  if [ $RETVAL == "0" ];then
    SERIAL=$NEW_SER
  fi;
}

Dialog_Time() {
  /usr/bin/dialog --backtitle "$BT" --clear --title "Date" --calendar "Select current date" 3 40 $(date +"%d %m %Y") 2> /tmp/date
  IFS=/ read -a DATE < /tmp/date
  if [ "$?" == "0" ];then
    /usr/bin/dialog --backtitle "$BT" --clear --title "Time" --timebox "Set current time" 3 40 $(date +"%H %M %S") 2>/tmp/time
    IFS=: read -a TIME < /tmp/time
   else
    return 1
  fi;

  if [ "$?" == "0" ];then
    /usr/bin/date ${DATE[1]}${DATE[0]}${TIME[0]}${TIME[1]}${DATE[2]}.${TIME[2]} > /dev/tty4 2>&1
    if [ "$?" == "0" ];then
      /sbin/hwclock --systohc --utc >/dev/tty4 2>&1
      /usr/bin/dialog --backtitle "$BT" --clear --title "Date/Time Ok"\
        --msgbox "`date`"  9 40
     else
      return 1
    fi;
   else
    return 1
  fi;
}

Date_Time() {
  (cnt=0;while [ "${cnt}" != "100" ] && [ ! -e /tmp/ntptime ];do let cnt+=2;sleep 1;echo ${cnt};done) |\
     dialog --backtitle "$BT" --title "NTP"  --gauge "Wait for NTP config via DHCP" 8 35

  if [ -e /tmp/ntptime ];then
    /sbin/hwclock --systohc --utc >/dev/tty4 2>&1
    return 0
  fi;

  while ! Dialog_Time;do
    /usr/bin/dialog --backtitle "$BT" --clear --title "Date/Time Error"\
     --msgbox "Invalid Date Format"  9 40
  done
}

Local_Install(){
  MNTRT=`grep "/media/install " /proc/mounts`;
  if [ "$MNTRT" == "" ];then
    /usr/bin/dialog --backtitle "$BT" --title "Cannot Install" --msgbox "No Root Partition Mounted" 5 35
    return 1;
  fi;

  Install_System
  /sbin/init 0
}

Main_Menu() {
  /usr/bin/dialog --backtitle "$BT" --clear --title "Main Menu" --menu "Read Documentation For More Information." 12 70 6\
           "1" "Fdisk/Format Drive(s)"\
           "2" "Configure Mounts"\
           "3" "Configure Server Date And Time"\
           "I" "Install Software"\
           "V" "View Config Files/Active System" 2> /tmp/menu.tmp.$$
  RESULT=$?;
  MEN_CHOICE=`cat /tmp/menu.tmp.$$`;
  rm /tmp/menu.tmp.$$;
}

if [ "${1}" == "install" ];then
  Install_System
  exit
 elif [ "${1}" == "fdisk" ];then
  shift
  vg=$1
  shift
  for dfdisk in $@;do
    if [ -b ${dfdisk} ];then
      Fdisk_Do $vg ${dfdisk}
    fi;
  done;
  exit
 elif [ "${1}" == "format" ];then
  Format_LVM ${2} ${3} ${4}
  exit
fi;

if [ -e /media/install/etc/.install ];then
  cat /proc/mounts |grep "/media/install" |awk '{print $2" "$1}' |sort -r |awk '{print "umount "$1}' |sh
  awk '$2 == "partition" {print "swapoff "$1}' /proc/swaps |sh
fi;

MDDSK=`ls /dev/md[a-z] 2>/dev/null`
if [ "$MDDSK" ];then
  DSKS=$MDDSK
fi;
for hdd in `ls /dev/[hs]d[a-z] 2>/dev/null`;do
  HDD_LABEL=$(blkid ${hdd}1 -s LABEL -o value)
  if [ ! "`pvdisplay -c 2>/dev/null |grep -E "${hdd}[0-9]:flash:"`" ] && [ "${HDD_LABEL}" != "DTS_INSTALL" ];then
    DSKS="${DSKS} $hdd"
  fi;
done

DISK="";
DCNT=1;

Date_Time
Fdisk;

RESULT="0";
while [ $RESULT == 0 ];do
  Main_Menu;
  echo "$MEN_CHOICE";
  case $MEN_CHOICE in
    1)Fdisk;;
    2){Mounts;
       Mount_All};;
    3)Date_Time;;
    I)Local_Install;;
    V)(RET=0;
       while [ ${RET} == 0 ];do
         View_Menu;
         RET=$?;
       done);;
  esac;
done
